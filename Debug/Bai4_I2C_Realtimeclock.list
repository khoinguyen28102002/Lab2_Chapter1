
Bai4_I2C_Realtimeclock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006420  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003038  080065a8  080065a8  000165a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095e0  080095e0  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080095e0  080095e0  000195e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095e8  080095e8  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095e8  080095e8  000195e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080095ec  080095ec  000195ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080095f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          000001f0  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000204  20000204  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015c3f  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003125  00000000  00000000  00035c83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011f8  00000000  00000000  00038da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001088  00000000  00000000  00039fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002311d  00000000  00000000  0003b028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016f1b  00000000  00000000  0005e145  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf8ed  00000000  00000000  00075060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014494d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000049d8  00000000  00000000  001449a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006590 	.word	0x08006590

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08006590 	.word	0x08006590

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004c4:	2201      	movs	r2, #1
 80004c6:	2108      	movs	r1, #8
 80004c8:	4802      	ldr	r0, [pc, #8]	; (80004d4 <button_init+0x14>)
 80004ca:	f002 ff8f 	bl	80033ec <HAL_GPIO_WritePin>
}
 80004ce:	bf00      	nop
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	40020c00 	.word	0x40020c00

080004d8 <button_Scan>:

void button_Scan(){
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80004de:	2200      	movs	r2, #0
 80004e0:	2108      	movs	r1, #8
 80004e2:	482f      	ldr	r0, [pc, #188]	; (80005a0 <button_Scan+0xc8>)
 80004e4:	f002 ff82 	bl	80033ec <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004e8:	2201      	movs	r2, #1
 80004ea:	2108      	movs	r1, #8
 80004ec:	482c      	ldr	r0, [pc, #176]	; (80005a0 <button_Scan+0xc8>)
 80004ee:	f002 ff7d 	bl	80033ec <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 80004f2:	230a      	movs	r3, #10
 80004f4:	2202      	movs	r2, #2
 80004f6:	492b      	ldr	r1, [pc, #172]	; (80005a4 <button_Scan+0xcc>)
 80004f8:	482b      	ldr	r0, [pc, #172]	; (80005a8 <button_Scan+0xd0>)
 80004fa:	f004 fea4 	bl	8005246 <HAL_SPI_Receive>
	  int button_index = 0;
 80004fe:	2300      	movs	r3, #0
 8000500:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 8000502:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000506:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000508:	2300      	movs	r3, #0
 800050a:	607b      	str	r3, [r7, #4]
 800050c:	e03f      	b.n	800058e <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	2b00      	cmp	r3, #0
 8000512:	db06      	blt.n	8000522 <button_Scan+0x4a>
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	2b03      	cmp	r3, #3
 8000518:	dc03      	bgt.n	8000522 <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	3304      	adds	r3, #4
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	e018      	b.n	8000554 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	2b03      	cmp	r3, #3
 8000526:	dd07      	ble.n	8000538 <button_Scan+0x60>
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	2b07      	cmp	r3, #7
 800052c:	dc04      	bgt.n	8000538 <button_Scan+0x60>
			  button_index = 7 - i;
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	f1c3 0307 	rsb	r3, r3, #7
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	e00d      	b.n	8000554 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2b07      	cmp	r3, #7
 800053c:	dd06      	ble.n	800054c <button_Scan+0x74>
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	2b0b      	cmp	r3, #11
 8000542:	dc03      	bgt.n	800054c <button_Scan+0x74>
			  button_index = i + 4;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	3304      	adds	r3, #4
 8000548:	60fb      	str	r3, [r7, #12]
 800054a:	e003      	b.n	8000554 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	f1c3 0317 	rsb	r3, r3, #23
 8000552:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8000554:	4b13      	ldr	r3, [pc, #76]	; (80005a4 <button_Scan+0xcc>)
 8000556:	881a      	ldrh	r2, [r3, #0]
 8000558:	897b      	ldrh	r3, [r7, #10]
 800055a:	4013      	ands	r3, r2
 800055c:	b29b      	uxth	r3, r3
 800055e:	2b00      	cmp	r3, #0
 8000560:	d005      	beq.n	800056e <button_Scan+0x96>
 8000562:	4a12      	ldr	r2, [pc, #72]	; (80005ac <button_Scan+0xd4>)
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	2100      	movs	r1, #0
 8000568:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800056c:	e009      	b.n	8000582 <button_Scan+0xaa>
		  else button_count[button_index]++;
 800056e:	4a0f      	ldr	r2, [pc, #60]	; (80005ac <button_Scan+0xd4>)
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000576:	3301      	adds	r3, #1
 8000578:	b299      	uxth	r1, r3
 800057a:	4a0c      	ldr	r2, [pc, #48]	; (80005ac <button_Scan+0xd4>)
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 8000582:	897b      	ldrh	r3, [r7, #10]
 8000584:	085b      	lsrs	r3, r3, #1
 8000586:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	3301      	adds	r3, #1
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	2b0f      	cmp	r3, #15
 8000592:	ddbc      	ble.n	800050e <button_Scan+0x36>
	  }
}
 8000594:	bf00      	nop
 8000596:	bf00      	nop
 8000598:	3710      	adds	r7, #16
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	40020c00 	.word	0x40020c00
 80005a4:	20000030 	.word	0x20000030
 80005a8:	20000160 	.word	0x20000160
 80005ac:	2000004c 	.word	0x2000004c

080005b0 <ds3231_init>:
uint8_t ds3231_date;
uint8_t ds3231_day;
uint8_t ds3231_month;
uint8_t ds3231_year;

void ds3231_init(){
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	ds3231_buffer[0] = DEC2BCD(0); //second
 80005b4:	2000      	movs	r0, #0
 80005b6:	f002 fb87 	bl	8002cc8 <DEC2BCD>
 80005ba:	4603      	mov	r3, r0
 80005bc:	461a      	mov	r2, r3
 80005be:	4b1c      	ldr	r3, [pc, #112]	; (8000630 <ds3231_init+0x80>)
 80005c0:	701a      	strb	r2, [r3, #0]
	ds3231_buffer[1] = DEC2BCD(10); //minute
 80005c2:	200a      	movs	r0, #10
 80005c4:	f002 fb80 	bl	8002cc8 <DEC2BCD>
 80005c8:	4603      	mov	r3, r0
 80005ca:	461a      	mov	r2, r3
 80005cc:	4b18      	ldr	r3, [pc, #96]	; (8000630 <ds3231_init+0x80>)
 80005ce:	705a      	strb	r2, [r3, #1]
	ds3231_buffer[2] = DEC2BCD(9); //hour
 80005d0:	2009      	movs	r0, #9
 80005d2:	f002 fb79 	bl	8002cc8 <DEC2BCD>
 80005d6:	4603      	mov	r3, r0
 80005d8:	461a      	mov	r2, r3
 80005da:	4b15      	ldr	r3, [pc, #84]	; (8000630 <ds3231_init+0x80>)
 80005dc:	709a      	strb	r2, [r3, #2]
	ds3231_buffer[3] = DEC2BCD(6);  //day
 80005de:	2006      	movs	r0, #6
 80005e0:	f002 fb72 	bl	8002cc8 <DEC2BCD>
 80005e4:	4603      	mov	r3, r0
 80005e6:	461a      	mov	r2, r3
 80005e8:	4b11      	ldr	r3, [pc, #68]	; (8000630 <ds3231_init+0x80>)
 80005ea:	70da      	strb	r2, [r3, #3]
	ds3231_buffer[4] = DEC2BCD(29); //date
 80005ec:	201d      	movs	r0, #29
 80005ee:	f002 fb6b 	bl	8002cc8 <DEC2BCD>
 80005f2:	4603      	mov	r3, r0
 80005f4:	461a      	mov	r2, r3
 80005f6:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <ds3231_init+0x80>)
 80005f8:	711a      	strb	r2, [r3, #4]
	ds3231_buffer[5] = DEC2BCD(11);  //month
 80005fa:	200b      	movs	r0, #11
 80005fc:	f002 fb64 	bl	8002cc8 <DEC2BCD>
 8000600:	4603      	mov	r3, r0
 8000602:	461a      	mov	r2, r3
 8000604:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <ds3231_init+0x80>)
 8000606:	715a      	strb	r2, [r3, #5]
	ds3231_buffer[6] = DEC2BCD(24); //year
 8000608:	2018      	movs	r0, #24
 800060a:	f002 fb5d 	bl	8002cc8 <DEC2BCD>
 800060e:	4603      	mov	r3, r0
 8000610:	461a      	mov	r2, r3
 8000612:	4b07      	ldr	r3, [pc, #28]	; (8000630 <ds3231_init+0x80>)
 8000614:	719a      	strb	r2, [r3, #6]
	if(HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDRESS, 3, 50) != HAL_OK){
 8000616:	2332      	movs	r3, #50	; 0x32
 8000618:	2203      	movs	r2, #3
 800061a:	21d0      	movs	r1, #208	; 0xd0
 800061c:	4805      	ldr	r0, [pc, #20]	; (8000634 <ds3231_init+0x84>)
 800061e:	f003 fb63 	bl	8003ce8 <HAL_I2C_IsDeviceReady>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d000      	beq.n	800062a <ds3231_init+0x7a>
		while(1);
 8000628:	e7fe      	b.n	8000628 <ds3231_init+0x78>
	};
}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	20000074 	.word	0x20000074
 8000634:	200000cc 	.word	0x200000cc

08000638 <ds3231_Write>:

void ds3231_Write(uint8_t address, uint8_t value){
 8000638:	b580      	push	{r7, lr}
 800063a:	b088      	sub	sp, #32
 800063c:	af04      	add	r7, sp, #16
 800063e:	4603      	mov	r3, r0
 8000640:	460a      	mov	r2, r1
 8000642:	71fb      	strb	r3, [r7, #7]
 8000644:	4613      	mov	r3, r2
 8000646:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = DEC2BCD(value);
 8000648:	79bb      	ldrb	r3, [r7, #6]
 800064a:	4618      	mov	r0, r3
 800064c:	f002 fb3c 	bl	8002cc8 <DEC2BCD>
 8000650:	4603      	mov	r3, r0
 8000652:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1,10);
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	b29a      	uxth	r2, r3
 8000658:	230a      	movs	r3, #10
 800065a:	9302      	str	r3, [sp, #8]
 800065c:	2301      	movs	r3, #1
 800065e:	9301      	str	r3, [sp, #4]
 8000660:	f107 030f 	add.w	r3, r7, #15
 8000664:	9300      	str	r3, [sp, #0]
 8000666:	2301      	movs	r3, #1
 8000668:	21d0      	movs	r1, #208	; 0xd0
 800066a:	4803      	ldr	r0, [pc, #12]	; (8000678 <ds3231_Write+0x40>)
 800066c:	f003 f81c 	bl	80036a8 <HAL_I2C_Mem_Write>
}
 8000670:	bf00      	nop
 8000672:	3710      	adds	r7, #16
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	200000cc 	.word	0x200000cc

0800067c <ds3231_ReadTime>:

void ds3231_ReadTime(){
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 8000682:	230a      	movs	r3, #10
 8000684:	9302      	str	r3, [sp, #8]
 8000686:	2307      	movs	r3, #7
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	4b25      	ldr	r3, [pc, #148]	; (8000720 <ds3231_ReadTime+0xa4>)
 800068c:	9300      	str	r3, [sp, #0]
 800068e:	2301      	movs	r3, #1
 8000690:	2200      	movs	r2, #0
 8000692:	21d0      	movs	r1, #208	; 0xd0
 8000694:	4823      	ldr	r0, [pc, #140]	; (8000724 <ds3231_ReadTime+0xa8>)
 8000696:	f003 f901 	bl	800389c <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 800069a:	4b21      	ldr	r3, [pc, #132]	; (8000720 <ds3231_ReadTime+0xa4>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	4618      	mov	r0, r3
 80006a0:	f002 faf8 	bl	8002c94 <BCD2DEC>
 80006a4:	4603      	mov	r3, r0
 80006a6:	461a      	mov	r2, r3
 80006a8:	4b1f      	ldr	r3, [pc, #124]	; (8000728 <ds3231_ReadTime+0xac>)
 80006aa:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 80006ac:	4b1c      	ldr	r3, [pc, #112]	; (8000720 <ds3231_ReadTime+0xa4>)
 80006ae:	785b      	ldrb	r3, [r3, #1]
 80006b0:	4618      	mov	r0, r3
 80006b2:	f002 faef 	bl	8002c94 <BCD2DEC>
 80006b6:	4603      	mov	r3, r0
 80006b8:	461a      	mov	r2, r3
 80006ba:	4b1c      	ldr	r3, [pc, #112]	; (800072c <ds3231_ReadTime+0xb0>)
 80006bc:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 80006be:	4b18      	ldr	r3, [pc, #96]	; (8000720 <ds3231_ReadTime+0xa4>)
 80006c0:	789b      	ldrb	r3, [r3, #2]
 80006c2:	4618      	mov	r0, r3
 80006c4:	f002 fae6 	bl	8002c94 <BCD2DEC>
 80006c8:	4603      	mov	r3, r0
 80006ca:	461a      	mov	r2, r3
 80006cc:	4b18      	ldr	r3, [pc, #96]	; (8000730 <ds3231_ReadTime+0xb4>)
 80006ce:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 80006d0:	4b13      	ldr	r3, [pc, #76]	; (8000720 <ds3231_ReadTime+0xa4>)
 80006d2:	78db      	ldrb	r3, [r3, #3]
 80006d4:	4618      	mov	r0, r3
 80006d6:	f002 fadd 	bl	8002c94 <BCD2DEC>
 80006da:	4603      	mov	r3, r0
 80006dc:	461a      	mov	r2, r3
 80006de:	4b15      	ldr	r3, [pc, #84]	; (8000734 <ds3231_ReadTime+0xb8>)
 80006e0:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 80006e2:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <ds3231_ReadTime+0xa4>)
 80006e4:	791b      	ldrb	r3, [r3, #4]
 80006e6:	4618      	mov	r0, r3
 80006e8:	f002 fad4 	bl	8002c94 <BCD2DEC>
 80006ec:	4603      	mov	r3, r0
 80006ee:	461a      	mov	r2, r3
 80006f0:	4b11      	ldr	r3, [pc, #68]	; (8000738 <ds3231_ReadTime+0xbc>)
 80006f2:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 80006f4:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <ds3231_ReadTime+0xa4>)
 80006f6:	795b      	ldrb	r3, [r3, #5]
 80006f8:	4618      	mov	r0, r3
 80006fa:	f002 facb 	bl	8002c94 <BCD2DEC>
 80006fe:	4603      	mov	r3, r0
 8000700:	461a      	mov	r2, r3
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <ds3231_ReadTime+0xc0>)
 8000704:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <ds3231_ReadTime+0xa4>)
 8000708:	799b      	ldrb	r3, [r3, #6]
 800070a:	4618      	mov	r0, r3
 800070c:	f002 fac2 	bl	8002c94 <BCD2DEC>
 8000710:	4603      	mov	r3, r0
 8000712:	461a      	mov	r2, r3
 8000714:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <ds3231_ReadTime+0xc4>)
 8000716:	701a      	strb	r2, [r3, #0]
}
 8000718:	bf00      	nop
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000074 	.word	0x20000074
 8000724:	200000cc 	.word	0x200000cc
 8000728:	2000006c 	.word	0x2000006c
 800072c:	2000006e 	.word	0x2000006e
 8000730:	20000071 	.word	0x20000071
 8000734:	20000070 	.word	0x20000070
 8000738:	2000006f 	.word	0x2000006f
 800073c:	20000072 	.word	0x20000072
 8000740:	2000006d 	.word	0x2000006d

08000744 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b08e      	sub	sp, #56	; 0x38
 8000748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800074a:	f107 031c 	add.w	r3, r7, #28
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
 8000758:	611a      	str	r2, [r3, #16]
 800075a:	615a      	str	r2, [r3, #20]
 800075c:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800075e:	463b      	mov	r3, r7
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]
 800076c:	615a      	str	r2, [r3, #20]
 800076e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000770:	4b2f      	ldr	r3, [pc, #188]	; (8000830 <MX_FSMC_Init+0xec>)
 8000772:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000776:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000778:	4b2d      	ldr	r3, [pc, #180]	; (8000830 <MX_FSMC_Init+0xec>)
 800077a:	4a2e      	ldr	r2, [pc, #184]	; (8000834 <MX_FSMC_Init+0xf0>)
 800077c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800077e:	4b2c      	ldr	r3, [pc, #176]	; (8000830 <MX_FSMC_Init+0xec>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000784:	4b2a      	ldr	r3, [pc, #168]	; (8000830 <MX_FSMC_Init+0xec>)
 8000786:	2200      	movs	r2, #0
 8000788:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800078a:	4b29      	ldr	r3, [pc, #164]	; (8000830 <MX_FSMC_Init+0xec>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000790:	4b27      	ldr	r3, [pc, #156]	; (8000830 <MX_FSMC_Init+0xec>)
 8000792:	2210      	movs	r2, #16
 8000794:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000796:	4b26      	ldr	r3, [pc, #152]	; (8000830 <MX_FSMC_Init+0xec>)
 8000798:	2200      	movs	r2, #0
 800079a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800079c:	4b24      	ldr	r3, [pc, #144]	; (8000830 <MX_FSMC_Init+0xec>)
 800079e:	2200      	movs	r2, #0
 80007a0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80007a2:	4b23      	ldr	r3, [pc, #140]	; (8000830 <MX_FSMC_Init+0xec>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80007a8:	4b21      	ldr	r3, [pc, #132]	; (8000830 <MX_FSMC_Init+0xec>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80007ae:	4b20      	ldr	r3, [pc, #128]	; (8000830 <MX_FSMC_Init+0xec>)
 80007b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007b4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80007b6:	4b1e      	ldr	r3, [pc, #120]	; (8000830 <MX_FSMC_Init+0xec>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80007bc:	4b1c      	ldr	r3, [pc, #112]	; (8000830 <MX_FSMC_Init+0xec>)
 80007be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007c2:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80007c4:	4b1a      	ldr	r3, [pc, #104]	; (8000830 <MX_FSMC_Init+0xec>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80007ca:	4b19      	ldr	r3, [pc, #100]	; (8000830 <MX_FSMC_Init+0xec>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80007d0:	4b17      	ldr	r3, [pc, #92]	; (8000830 <MX_FSMC_Init+0xec>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80007d6:	230f      	movs	r3, #15
 80007d8:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80007da:	230f      	movs	r3, #15
 80007dc:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80007de:	233c      	movs	r3, #60	; 0x3c
 80007e0:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80007e6:	2310      	movs	r3, #16
 80007e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80007ea:	2311      	movs	r3, #17
 80007ec:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80007ee:	2300      	movs	r3, #0
 80007f0:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 80007f2:	2308      	movs	r3, #8
 80007f4:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80007f6:	230f      	movs	r3, #15
 80007f8:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 80007fa:	2309      	movs	r3, #9
 80007fc:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8000802:	2310      	movs	r3, #16
 8000804:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000806:	2311      	movs	r3, #17
 8000808:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800080a:	2300      	movs	r3, #0
 800080c:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800080e:	463a      	mov	r2, r7
 8000810:	f107 031c 	add.w	r3, r7, #28
 8000814:	4619      	mov	r1, r3
 8000816:	4806      	ldr	r0, [pc, #24]	; (8000830 <MX_FSMC_Init+0xec>)
 8000818:	f005 f8f8 	bl	8005a0c <HAL_SRAM_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8000822:	f002 f883 	bl	800292c <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000826:	bf00      	nop
 8000828:	3738      	adds	r7, #56	; 0x38
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	2000007c 	.word	0x2000007c
 8000834:	a0000104 	.word	0xa0000104

08000838 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000838:	b580      	push	{r7, lr}
 800083a:	b086      	sub	sp, #24
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800084c:	4b1c      	ldr	r3, [pc, #112]	; (80008c0 <HAL_FSMC_MspInit+0x88>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d131      	bne.n	80008b8 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8000854:	4b1a      	ldr	r3, [pc, #104]	; (80008c0 <HAL_FSMC_MspInit+0x88>)
 8000856:	2201      	movs	r2, #1
 8000858:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	603b      	str	r3, [r7, #0]
 800085e:	4b19      	ldr	r3, [pc, #100]	; (80008c4 <HAL_FSMC_MspInit+0x8c>)
 8000860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000862:	4a18      	ldr	r2, [pc, #96]	; (80008c4 <HAL_FSMC_MspInit+0x8c>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6393      	str	r3, [r2, #56]	; 0x38
 800086a:	4b16      	ldr	r3, [pc, #88]	; (80008c4 <HAL_FSMC_MspInit+0x8c>)
 800086c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	603b      	str	r3, [r7, #0]
 8000874:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000876:	f64f 7388 	movw	r3, #65416	; 0xff88
 800087a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087c:	2302      	movs	r3, #2
 800087e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000884:	2303      	movs	r3, #3
 8000886:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000888:	230c      	movs	r3, #12
 800088a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	4619      	mov	r1, r3
 8000890:	480d      	ldr	r0, [pc, #52]	; (80008c8 <HAL_FSMC_MspInit+0x90>)
 8000892:	f002 fc0f 	bl	80030b4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000896:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 800089a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089c:	2302      	movs	r3, #2
 800089e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a4:	2303      	movs	r3, #3
 80008a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80008a8:	230c      	movs	r3, #12
 80008aa:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008ac:	1d3b      	adds	r3, r7, #4
 80008ae:	4619      	mov	r1, r3
 80008b0:	4806      	ldr	r0, [pc, #24]	; (80008cc <HAL_FSMC_MspInit+0x94>)
 80008b2:	f002 fbff 	bl	80030b4 <HAL_GPIO_Init>
 80008b6:	e000      	b.n	80008ba <HAL_FSMC_MspInit+0x82>
    return;
 80008b8:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80008ba:	3718      	adds	r7, #24
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20000034 	.word	0x20000034
 80008c4:	40023800 	.word	0x40023800
 80008c8:	40021000 	.word	0x40021000
 80008cc:	40020c00 	.word	0x40020c00

080008d0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80008d8:	f7ff ffae 	bl	8000838 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80008dc:	bf00      	nop
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08c      	sub	sp, #48	; 0x30
 80008e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
 80008f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	61bb      	str	r3, [r7, #24]
 80008fe:	4b6f      	ldr	r3, [pc, #444]	; (8000abc <MX_GPIO_Init+0x1d8>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a6e      	ldr	r2, [pc, #440]	; (8000abc <MX_GPIO_Init+0x1d8>)
 8000904:	f043 0310 	orr.w	r3, r3, #16
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b6c      	ldr	r3, [pc, #432]	; (8000abc <MX_GPIO_Init+0x1d8>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0310 	and.w	r3, r3, #16
 8000912:	61bb      	str	r3, [r7, #24]
 8000914:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	617b      	str	r3, [r7, #20]
 800091a:	4b68      	ldr	r3, [pc, #416]	; (8000abc <MX_GPIO_Init+0x1d8>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a67      	ldr	r2, [pc, #412]	; (8000abc <MX_GPIO_Init+0x1d8>)
 8000920:	f043 0304 	orr.w	r3, r3, #4
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b65      	ldr	r3, [pc, #404]	; (8000abc <MX_GPIO_Init+0x1d8>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0304 	and.w	r3, r3, #4
 800092e:	617b      	str	r3, [r7, #20]
 8000930:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	613b      	str	r3, [r7, #16]
 8000936:	4b61      	ldr	r3, [pc, #388]	; (8000abc <MX_GPIO_Init+0x1d8>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a60      	ldr	r2, [pc, #384]	; (8000abc <MX_GPIO_Init+0x1d8>)
 800093c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b5e      	ldr	r3, [pc, #376]	; (8000abc <MX_GPIO_Init+0x1d8>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800094a:	613b      	str	r3, [r7, #16]
 800094c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	4b5a      	ldr	r3, [pc, #360]	; (8000abc <MX_GPIO_Init+0x1d8>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a59      	ldr	r2, [pc, #356]	; (8000abc <MX_GPIO_Init+0x1d8>)
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b57      	ldr	r3, [pc, #348]	; (8000abc <MX_GPIO_Init+0x1d8>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	4b53      	ldr	r3, [pc, #332]	; (8000abc <MX_GPIO_Init+0x1d8>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a52      	ldr	r2, [pc, #328]	; (8000abc <MX_GPIO_Init+0x1d8>)
 8000974:	f043 0308 	orr.w	r3, r3, #8
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b50      	ldr	r3, [pc, #320]	; (8000abc <MX_GPIO_Init+0x1d8>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0308 	and.w	r3, r3, #8
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	4b4c      	ldr	r3, [pc, #304]	; (8000abc <MX_GPIO_Init+0x1d8>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a4b      	ldr	r2, [pc, #300]	; (8000abc <MX_GPIO_Init+0x1d8>)
 8000990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b49      	ldr	r3, [pc, #292]	; (8000abc <MX_GPIO_Init+0x1d8>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	603b      	str	r3, [r7, #0]
 80009a6:	4b45      	ldr	r3, [pc, #276]	; (8000abc <MX_GPIO_Init+0x1d8>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a44      	ldr	r2, [pc, #272]	; (8000abc <MX_GPIO_Init+0x1d8>)
 80009ac:	f043 0302 	orr.w	r3, r3, #2
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b42      	ldr	r3, [pc, #264]	; (8000abc <MX_GPIO_Init+0x1d8>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0302 	and.w	r3, r3, #2
 80009ba:	603b      	str	r3, [r7, #0]
 80009bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 80009be:	2200      	movs	r2, #0
 80009c0:	2170      	movs	r1, #112	; 0x70
 80009c2:	483f      	ldr	r0, [pc, #252]	; (8000ac0 <MX_GPIO_Init+0x1dc>)
 80009c4:	f002 fd12 	bl	80033ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009ce:	483d      	ldr	r0, [pc, #244]	; (8000ac4 <MX_GPIO_Init+0x1e0>)
 80009d0:	f002 fd0c 	bl	80033ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 80009d4:	2200      	movs	r2, #0
 80009d6:	2140      	movs	r1, #64	; 0x40
 80009d8:	483b      	ldr	r0, [pc, #236]	; (8000ac8 <MX_GPIO_Init+0x1e4>)
 80009da:	f002 fd07 	bl	80033ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 80009de:	2200      	movs	r2, #0
 80009e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009e4:	4839      	ldr	r0, [pc, #228]	; (8000acc <MX_GPIO_Init+0x1e8>)
 80009e6:	f002 fd01 	bl	80033ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2108      	movs	r1, #8
 80009ee:	4838      	ldr	r0, [pc, #224]	; (8000ad0 <MX_GPIO_Init+0x1ec>)
 80009f0:	f002 fcfc 	bl	80033ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 80009f4:	2370      	movs	r3, #112	; 0x70
 80009f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f8:	2301      	movs	r3, #1
 80009fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a00:	2300      	movs	r3, #0
 8000a02:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a04:	f107 031c 	add.w	r3, r7, #28
 8000a08:	4619      	mov	r1, r3
 8000a0a:	482d      	ldr	r0, [pc, #180]	; (8000ac0 <MX_GPIO_Init+0x1dc>)
 8000a0c:	f002 fb52 	bl	80030b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8000a10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a16:	2301      	movs	r3, #1
 8000a18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8000a22:	f107 031c 	add.w	r3, r7, #28
 8000a26:	4619      	mov	r1, r3
 8000a28:	4826      	ldr	r0, [pc, #152]	; (8000ac4 <MX_GPIO_Init+0x1e0>)
 8000a2a:	f002 fb43 	bl	80030b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8000a2e:	23c0      	movs	r3, #192	; 0xc0
 8000a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a32:	2300      	movs	r3, #0
 8000a34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3a:	f107 031c 	add.w	r3, r7, #28
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4822      	ldr	r0, [pc, #136]	; (8000acc <MX_GPIO_Init+0x1e8>)
 8000a42:	f002 fb37 	bl	80030b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8000a46:	2330      	movs	r3, #48	; 0x30
 8000a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a52:	f107 031c 	add.w	r3, r7, #28
 8000a56:	4619      	mov	r1, r3
 8000a58:	481a      	ldr	r0, [pc, #104]	; (8000ac4 <MX_GPIO_Init+0x1e0>)
 8000a5a:	f002 fb2b 	bl	80030b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8000a5e:	2340      	movs	r3, #64	; 0x40
 8000a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a62:	2301      	movs	r3, #1
 8000a64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	f107 031c 	add.w	r3, r7, #28
 8000a72:	4619      	mov	r1, r3
 8000a74:	4814      	ldr	r0, [pc, #80]	; (8000ac8 <MX_GPIO_Init+0x1e4>)
 8000a76:	f002 fb1d 	bl	80030b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8000a7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a80:	2301      	movs	r3, #1
 8000a82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8000a8c:	f107 031c 	add.w	r3, r7, #28
 8000a90:	4619      	mov	r1, r3
 8000a92:	480e      	ldr	r0, [pc, #56]	; (8000acc <MX_GPIO_Init+0x1e8>)
 8000a94:	f002 fb0e 	bl	80030b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000a98:	2308      	movs	r3, #8
 8000a9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000aa8:	f107 031c 	add.w	r3, r7, #28
 8000aac:	4619      	mov	r1, r3
 8000aae:	4808      	ldr	r0, [pc, #32]	; (8000ad0 <MX_GPIO_Init+0x1ec>)
 8000ab0:	f002 fb00 	bl	80030b4 <HAL_GPIO_Init>

}
 8000ab4:	bf00      	nop
 8000ab6:	3730      	adds	r7, #48	; 0x30
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	40020800 	.word	0x40020800
 8000ac8:	40021800 	.word	0x40021800
 8000acc:	40020000 	.word	0x40020000
 8000ad0:	40020c00 	.word	0x40020c00

08000ad4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ad8:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <MX_I2C1_Init+0x50>)
 8000ada:	4a13      	ldr	r2, [pc, #76]	; (8000b28 <MX_I2C1_Init+0x54>)
 8000adc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ade:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <MX_I2C1_Init+0x50>)
 8000ae0:	4a12      	ldr	r2, [pc, #72]	; (8000b2c <MX_I2C1_Init+0x58>)
 8000ae2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ae4:	4b0f      	ldr	r3, [pc, #60]	; (8000b24 <MX_I2C1_Init+0x50>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000aea:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <MX_I2C1_Init+0x50>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <MX_I2C1_Init+0x50>)
 8000af2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000af6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000af8:	4b0a      	ldr	r3, [pc, #40]	; (8000b24 <MX_I2C1_Init+0x50>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000afe:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <MX_I2C1_Init+0x50>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b04:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <MX_I2C1_Init+0x50>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <MX_I2C1_Init+0x50>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b10:	4804      	ldr	r0, [pc, #16]	; (8000b24 <MX_I2C1_Init+0x50>)
 8000b12:	f002 fc85 	bl	8003420 <HAL_I2C_Init>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b1c:	f001 ff06 	bl	800292c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b20:	bf00      	nop
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	200000cc 	.word	0x200000cc
 8000b28:	40005400 	.word	0x40005400
 8000b2c:	000186a0 	.word	0x000186a0

08000b30 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08a      	sub	sp, #40	; 0x28
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a19      	ldr	r2, [pc, #100]	; (8000bb4 <HAL_I2C_MspInit+0x84>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d12b      	bne.n	8000baa <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	613b      	str	r3, [r7, #16]
 8000b56:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <HAL_I2C_MspInit+0x88>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a17      	ldr	r2, [pc, #92]	; (8000bb8 <HAL_I2C_MspInit+0x88>)
 8000b5c:	f043 0302 	orr.w	r3, r3, #2
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <HAL_I2C_MspInit+0x88>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f003 0302 	and.w	r3, r3, #2
 8000b6a:	613b      	str	r3, [r7, #16]
 8000b6c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b6e:	23c0      	movs	r3, #192	; 0xc0
 8000b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b72:	2312      	movs	r3, #18
 8000b74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b7e:	2304      	movs	r3, #4
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	4619      	mov	r1, r3
 8000b88:	480c      	ldr	r0, [pc, #48]	; (8000bbc <HAL_I2C_MspInit+0x8c>)
 8000b8a:	f002 fa93 	bl	80030b4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <HAL_I2C_MspInit+0x88>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	4a08      	ldr	r2, [pc, #32]	; (8000bb8 <HAL_I2C_MspInit+0x88>)
 8000b98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b9e:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <HAL_I2C_MspInit+0x88>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000baa:	bf00      	nop
 8000bac:	3728      	adds	r7, #40	; 0x28
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40005400 	.word	0x40005400
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	40020400 	.word	0x40020400

08000bc0 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg) //
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8000bca:	4a04      	ldr	r2, [pc, #16]	; (8000bdc <LCD_WR_REG+0x1c>)
 8000bcc:	88fb      	ldrh	r3, [r7, #6]
 8000bce:	8013      	strh	r3, [r2, #0]
}
 8000bd0:	bf00      	nop
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	600ffffe 	.word	0x600ffffe

08000be0 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000bea:	4a04      	ldr	r2, [pc, #16]	; (8000bfc <LCD_WR_DATA+0x1c>)
 8000bec:	88fb      	ldrh	r3, [r7, #6]
 8000bee:	8053      	strh	r3, [r2, #2]
}
 8000bf0:	bf00      	nop
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	600ffffe 	.word	0x600ffffe

08000c00 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8000c06:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <LCD_RD_DATA+0x20>)
 8000c08:	885b      	ldrh	r3, [r3, #2]
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000c0e:	88fb      	ldrh	r3, [r7, #6]
 8000c10:	b29b      	uxth	r3, r3
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	600ffffe 	.word	0x600ffffe

08000c24 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8000c24:	b590      	push	{r4, r7, lr}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4604      	mov	r4, r0
 8000c2c:	4608      	mov	r0, r1
 8000c2e:	4611      	mov	r1, r2
 8000c30:	461a      	mov	r2, r3
 8000c32:	4623      	mov	r3, r4
 8000c34:	80fb      	strh	r3, [r7, #6]
 8000c36:	4603      	mov	r3, r0
 8000c38:	80bb      	strh	r3, [r7, #4]
 8000c3a:	460b      	mov	r3, r1
 8000c3c:	807b      	strh	r3, [r7, #2]
 8000c3e:	4613      	mov	r3, r2
 8000c40:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8000c42:	202a      	movs	r0, #42	; 0x2a
 8000c44:	f7ff ffbc 	bl	8000bc0 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8000c48:	88fb      	ldrh	r3, [r7, #6]
 8000c4a:	0a1b      	lsrs	r3, r3, #8
 8000c4c:	b29b      	uxth	r3, r3
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff ffc6 	bl	8000be0 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8000c54:	88fb      	ldrh	r3, [r7, #6]
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	b29b      	uxth	r3, r3
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff ffc0 	bl	8000be0 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8000c60:	887b      	ldrh	r3, [r7, #2]
 8000c62:	0a1b      	lsrs	r3, r3, #8
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	4618      	mov	r0, r3
 8000c68:	f7ff ffba 	bl	8000be0 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8000c6c:	887b      	ldrh	r3, [r7, #2]
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	b29b      	uxth	r3, r3
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff ffb4 	bl	8000be0 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8000c78:	202b      	movs	r0, #43	; 0x2b
 8000c7a:	f7ff ffa1 	bl	8000bc0 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8000c7e:	88bb      	ldrh	r3, [r7, #4]
 8000c80:	0a1b      	lsrs	r3, r3, #8
 8000c82:	b29b      	uxth	r3, r3
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff ffab 	bl	8000be0 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8000c8a:	88bb      	ldrh	r3, [r7, #4]
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	b29b      	uxth	r3, r3
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff ffa5 	bl	8000be0 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8000c96:	883b      	ldrh	r3, [r7, #0]
 8000c98:	0a1b      	lsrs	r3, r3, #8
 8000c9a:	b29b      	uxth	r3, r3
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff ff9f 	bl	8000be0 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8000ca2:	883b      	ldrh	r3, [r7, #0]
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff ff99 	bl	8000be0 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8000cae:	202c      	movs	r0, #44	; 0x2c
 8000cb0:	f7ff ff86 	bl	8000bc0 <LCD_WR_REG>
}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd90      	pop	{r4, r7, pc}

08000cbc <lcd_Clear>:
	return (((r>>11)<<11)|((g>>10)<<5)|(b>>11));
}


void lcd_Clear(uint16_t color) //
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	uint8_t buffer[2];
	buffer[0] = color >> 8;
 8000cc6:	88fb      	ldrh	r3, [r7, #6]
 8000cc8:	0a1b      	lsrs	r3, r3, #8
 8000cca:	b29b      	uxth	r3, r3
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	723b      	strb	r3, [r7, #8]
	buffer[1] = color;
 8000cd0:	88fb      	ldrh	r3, [r7, #6]
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	727b      	strb	r3, [r7, #9]
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8000cd6:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <lcd_Clear+0x70>)
 8000cd8:	881b      	ldrh	r3, [r3, #0]
 8000cda:	3b01      	subs	r3, #1
 8000cdc:	b29a      	uxth	r2, r3
 8000cde:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <lcd_Clear+0x70>)
 8000ce0:	885b      	ldrh	r3, [r3, #2]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	b29b      	uxth	r3, r3
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	2000      	movs	r0, #0
 8000cea:	f7ff ff9b 	bl	8000c24 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8000cee:	2300      	movs	r3, #0
 8000cf0:	81fb      	strh	r3, [r7, #14]
 8000cf2:	e011      	b.n	8000d18 <lcd_Clear+0x5c>
	{
		for(j=0;j<lcddev.height;j++)
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	81bb      	strh	r3, [r7, #12]
 8000cf8:	e006      	b.n	8000d08 <lcd_Clear+0x4c>
		{
			LCD_WR_DATA(color);
 8000cfa:	88fb      	ldrh	r3, [r7, #6]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff ff6f 	bl	8000be0 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8000d02:	89bb      	ldrh	r3, [r7, #12]
 8000d04:	3301      	adds	r3, #1
 8000d06:	81bb      	strh	r3, [r7, #12]
 8000d08:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <lcd_Clear+0x70>)
 8000d0a:	885b      	ldrh	r3, [r3, #2]
 8000d0c:	89ba      	ldrh	r2, [r7, #12]
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d3f3      	bcc.n	8000cfa <lcd_Clear+0x3e>
	for(i=0;i<lcddev.width;i++)
 8000d12:	89fb      	ldrh	r3, [r7, #14]
 8000d14:	3301      	adds	r3, #1
 8000d16:	81fb      	strh	r3, [r7, #14]
 8000d18:	4b04      	ldr	r3, [pc, #16]	; (8000d2c <lcd_Clear+0x70>)
 8000d1a:	881b      	ldrh	r3, [r3, #0]
 8000d1c:	89fa      	ldrh	r2, [r7, #14]
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d3e8      	bcc.n	8000cf4 <lcd_Clear+0x38>
//			sram_WriteBuffer(&buffer, (i*lcddev.width+j)*4, 2);
		}
	}
}
 8000d22:	bf00      	nop
 8000d24:	bf00      	nop
 8000d26:	3710      	adds	r7, #16
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20000120 	.word	0x20000120

08000d30 <lcd_Fill>:

void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8000d30:	b590      	push	{r4, r7, lr}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4604      	mov	r4, r0
 8000d38:	4608      	mov	r0, r1
 8000d3a:	4611      	mov	r1, r2
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	4623      	mov	r3, r4
 8000d40:	80fb      	strh	r3, [r7, #6]
 8000d42:	4603      	mov	r3, r0
 8000d44:	80bb      	strh	r3, [r7, #4]
 8000d46:	460b      	mov	r3, r1
 8000d48:	807b      	strh	r3, [r7, #2]
 8000d4a:	4613      	mov	r3, r2
 8000d4c:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8000d4e:	887b      	ldrh	r3, [r7, #2]
 8000d50:	3b01      	subs	r3, #1
 8000d52:	b29a      	uxth	r2, r3
 8000d54:	883b      	ldrh	r3, [r7, #0]
 8000d56:	3b01      	subs	r3, #1
 8000d58:	b29b      	uxth	r3, r3
 8000d5a:	88b9      	ldrh	r1, [r7, #4]
 8000d5c:	88f8      	ldrh	r0, [r7, #6]
 8000d5e:	f7ff ff61 	bl	8000c24 <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8000d62:	88bb      	ldrh	r3, [r7, #4]
 8000d64:	81fb      	strh	r3, [r7, #14]
 8000d66:	e010      	b.n	8000d8a <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8000d68:	88fb      	ldrh	r3, [r7, #6]
 8000d6a:	81bb      	strh	r3, [r7, #12]
 8000d6c:	e006      	b.n	8000d7c <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8000d6e:	8c3b      	ldrh	r3, [r7, #32]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff ff35 	bl	8000be0 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 8000d76:	89bb      	ldrh	r3, [r7, #12]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	81bb      	strh	r3, [r7, #12]
 8000d7c:	89ba      	ldrh	r2, [r7, #12]
 8000d7e:	887b      	ldrh	r3, [r7, #2]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d3f4      	bcc.n	8000d6e <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8000d84:	89fb      	ldrh	r3, [r7, #14]
 8000d86:	3301      	adds	r3, #1
 8000d88:	81fb      	strh	r3, [r7, #14]
 8000d8a:	89fa      	ldrh	r2, [r7, #14]
 8000d8c:	883b      	ldrh	r3, [r7, #0]
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d3ea      	bcc.n	8000d68 <lcd_Fill+0x38>
		}
	}
}
 8000d92:	bf00      	nop
 8000d94:	bf00      	nop
 8000d96:	3714      	adds	r7, #20
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd90      	pop	{r4, r7, pc}

08000d9c <lcd_DrawPoint>:

void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	80fb      	strh	r3, [r7, #6]
 8000da6:	460b      	mov	r3, r1
 8000da8:	80bb      	strh	r3, [r7, #4]
 8000daa:	4613      	mov	r3, r2
 8000dac:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8000dae:	88bb      	ldrh	r3, [r7, #4]
 8000db0:	88fa      	ldrh	r2, [r7, #6]
 8000db2:	88b9      	ldrh	r1, [r7, #4]
 8000db4:	88f8      	ldrh	r0, [r7, #6]
 8000db6:	f7ff ff35 	bl	8000c24 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8000dba:	887b      	ldrh	r3, [r7, #2]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff ff0f 	bl	8000be0 <LCD_WR_DATA>
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
	...

08000dcc <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8000dcc:	b590      	push	{r4, r7, lr}
 8000dce:	b087      	sub	sp, #28
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4604      	mov	r4, r0
 8000dd4:	4608      	mov	r0, r1
 8000dd6:	4611      	mov	r1, r2
 8000dd8:	461a      	mov	r2, r3
 8000dda:	4623      	mov	r3, r4
 8000ddc:	80fb      	strh	r3, [r7, #6]
 8000dde:	4603      	mov	r3, r0
 8000de0:	80bb      	strh	r3, [r7, #4]
 8000de2:	460b      	mov	r3, r1
 8000de4:	70fb      	strb	r3, [r7, #3]
 8000de6:	4613      	mov	r3, r2
 8000de8:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8000dea:	2300      	movs	r3, #0
 8000dec:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8000dee:	88fb      	ldrh	r3, [r7, #6]
 8000df0:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8000df2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000df6:	085b      	lsrs	r3, r3, #1
 8000df8:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8000dfa:	7bfb      	ldrb	r3, [r7, #15]
 8000dfc:	08db      	lsrs	r3, r3, #3
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	461a      	mov	r2, r3
 8000e02:	7bfb      	ldrb	r3, [r7, #15]
 8000e04:	f003 0307 	and.w	r3, r3, #7
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	bf14      	ite	ne
 8000e0e:	2301      	movne	r3, #1
 8000e10:	2300      	moveq	r3, #0
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	4413      	add	r3, r2
 8000e16:	b29a      	uxth	r2, r3
 8000e18:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e1c:	b29b      	uxth	r3, r3
 8000e1e:	fb12 f303 	smulbb	r3, r2, r3
 8000e22:	81bb      	strh	r3, [r7, #12]
	num=num-' ';
 8000e24:	78fb      	ldrb	r3, [r7, #3]
 8000e26:	3b20      	subs	r3, #32
 8000e28:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8000e2a:	7bfb      	ldrb	r3, [r7, #15]
 8000e2c:	b29a      	uxth	r2, r3
 8000e2e:	88fb      	ldrh	r3, [r7, #6]
 8000e30:	4413      	add	r3, r2
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	3b01      	subs	r3, #1
 8000e36:	b29c      	uxth	r4, r3
 8000e38:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e3c:	b29a      	uxth	r2, r3
 8000e3e:	88bb      	ldrh	r3, [r7, #4]
 8000e40:	4413      	add	r3, r2
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	3b01      	subs	r3, #1
 8000e46:	b29b      	uxth	r3, r3
 8000e48:	88b9      	ldrh	r1, [r7, #4]
 8000e4a:	88f8      	ldrh	r0, [r7, #6]
 8000e4c:	4622      	mov	r2, r4
 8000e4e:	f7ff fee9 	bl	8000c24 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8000e52:	2300      	movs	r3, #0
 8000e54:	827b      	strh	r3, [r7, #18]
 8000e56:	e07a      	b.n	8000f4e <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8000e58:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e5c:	2b0c      	cmp	r3, #12
 8000e5e:	d028      	beq.n	8000eb2 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[num][i];
 8000e60:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e64:	2b10      	cmp	r3, #16
 8000e66:	d108      	bne.n	8000e7a <lcd_ShowChar+0xae>
 8000e68:	78fa      	ldrb	r2, [r7, #3]
 8000e6a:	8a7b      	ldrh	r3, [r7, #18]
 8000e6c:	493c      	ldr	r1, [pc, #240]	; (8000f60 <lcd_ShowChar+0x194>)
 8000e6e:	0112      	lsls	r2, r2, #4
 8000e70:	440a      	add	r2, r1
 8000e72:	4413      	add	r3, r2
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	75fb      	strb	r3, [r7, #23]
 8000e78:	e01b      	b.n	8000eb2 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[num][i];
 8000e7a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e7e:	2b18      	cmp	r3, #24
 8000e80:	d10b      	bne.n	8000e9a <lcd_ShowChar+0xce>
 8000e82:	78fa      	ldrb	r2, [r7, #3]
 8000e84:	8a79      	ldrh	r1, [r7, #18]
 8000e86:	4837      	ldr	r0, [pc, #220]	; (8000f64 <lcd_ShowChar+0x198>)
 8000e88:	4613      	mov	r3, r2
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	4413      	add	r3, r2
 8000e8e:	011b      	lsls	r3, r3, #4
 8000e90:	4403      	add	r3, r0
 8000e92:	440b      	add	r3, r1
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	75fb      	strb	r3, [r7, #23]
 8000e98:	e00b      	b.n	8000eb2 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[num][i];
 8000e9a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e9e:	2b20      	cmp	r3, #32
 8000ea0:	d15a      	bne.n	8000f58 <lcd_ShowChar+0x18c>
 8000ea2:	78fa      	ldrb	r2, [r7, #3]
 8000ea4:	8a7b      	ldrh	r3, [r7, #18]
 8000ea6:	4930      	ldr	r1, [pc, #192]	; (8000f68 <lcd_ShowChar+0x19c>)
 8000ea8:	0192      	lsls	r2, r2, #6
 8000eaa:	440a      	add	r2, r1
 8000eac:	4413      	add	r3, r2
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	75bb      	strb	r3, [r7, #22]
 8000eb6:	e044      	b.n	8000f42 <lcd_ShowChar+0x176>
		{
			if(!mode)
 8000eb8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d120      	bne.n	8000f02 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8000ec0:	7dfa      	ldrb	r2, [r7, #23]
 8000ec2:	7dbb      	ldrb	r3, [r7, #22]
 8000ec4:	fa42 f303 	asr.w	r3, r2, r3
 8000ec8:	f003 0301 	and.w	r3, r3, #1
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d004      	beq.n	8000eda <lcd_ShowChar+0x10e>
 8000ed0:	883b      	ldrh	r3, [r7, #0]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff fe84 	bl	8000be0 <LCD_WR_DATA>
 8000ed8:	e003      	b.n	8000ee2 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8000eda:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff fe7f 	bl	8000be0 <LCD_WR_DATA>
				m++;
 8000ee2:	7d7b      	ldrb	r3, [r7, #21]
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8000ee8:	7d7b      	ldrb	r3, [r7, #21]
 8000eea:	7bfa      	ldrb	r2, [r7, #15]
 8000eec:	fbb3 f1f2 	udiv	r1, r3, r2
 8000ef0:	fb02 f201 	mul.w	r2, r2, r1
 8000ef4:	1a9b      	subs	r3, r3, r2
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d11f      	bne.n	8000f3c <lcd_ShowChar+0x170>
				{
					m=0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	757b      	strb	r3, [r7, #21]
					break;
 8000f00:	e022      	b.n	8000f48 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8000f02:	7dfa      	ldrb	r2, [r7, #23]
 8000f04:	7dbb      	ldrb	r3, [r7, #22]
 8000f06:	fa42 f303 	asr.w	r3, r2, r3
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d005      	beq.n	8000f1e <lcd_ShowChar+0x152>
 8000f12:	883a      	ldrh	r2, [r7, #0]
 8000f14:	88b9      	ldrh	r1, [r7, #4]
 8000f16:	88fb      	ldrh	r3, [r7, #6]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff ff3f 	bl	8000d9c <lcd_DrawPoint>
				x++;
 8000f1e:	88fb      	ldrh	r3, [r7, #6]
 8000f20:	3301      	adds	r3, #1
 8000f22:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8000f24:	88fa      	ldrh	r2, [r7, #6]
 8000f26:	8a3b      	ldrh	r3, [r7, #16]
 8000f28:	1ad2      	subs	r2, r2, r3
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d105      	bne.n	8000f3c <lcd_ShowChar+0x170>
				{
					x=x0;
 8000f30:	8a3b      	ldrh	r3, [r7, #16]
 8000f32:	80fb      	strh	r3, [r7, #6]
					y++;
 8000f34:	88bb      	ldrh	r3, [r7, #4]
 8000f36:	3301      	adds	r3, #1
 8000f38:	80bb      	strh	r3, [r7, #4]
					break;
 8000f3a:	e005      	b.n	8000f48 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8000f3c:	7dbb      	ldrb	r3, [r7, #22]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	75bb      	strb	r3, [r7, #22]
 8000f42:	7dbb      	ldrb	r3, [r7, #22]
 8000f44:	2b07      	cmp	r3, #7
 8000f46:	d9b7      	bls.n	8000eb8 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8000f48:	8a7b      	ldrh	r3, [r7, #18]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	827b      	strh	r3, [r7, #18]
 8000f4e:	8a7a      	ldrh	r2, [r7, #18]
 8000f50:	89bb      	ldrh	r3, [r7, #12]
 8000f52:	429a      	cmp	r2, r3
 8000f54:	d380      	bcc.n	8000e58 <lcd_ShowChar+0x8c>
 8000f56:	e000      	b.n	8000f5a <lcd_ShowChar+0x18e>
		else return;
 8000f58:	bf00      	nop
				}
			}
		}
	}
}
 8000f5a:	371c      	adds	r7, #28
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd90      	pop	{r4, r7, pc}
 8000f60:	08006648 	.word	0x08006648
 8000f64:	08006c38 	.word	0x08006c38
 8000f68:	08007e08 	.word	0x08007e08

08000f6c <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	460a      	mov	r2, r1
 8000f76:	71fb      	strb	r3, [r7, #7]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8000f80:	e004      	b.n	8000f8c <mypow+0x20>
 8000f82:	79fa      	ldrb	r2, [r7, #7]
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	fb02 f303 	mul.w	r3, r2, r3
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	79bb      	ldrb	r3, [r7, #6]
 8000f8e:	1e5a      	subs	r2, r3, #1
 8000f90:	71ba      	strb	r2, [r7, #6]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d1f5      	bne.n	8000f82 <mypow+0x16>
	return result;
 8000f96:	68fb      	ldr	r3, [r7, #12]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3714      	adds	r7, #20
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8000fa4:	b590      	push	{r4, r7, lr}
 8000fa6:	b089      	sub	sp, #36	; 0x24
 8000fa8:	af04      	add	r7, sp, #16
 8000faa:	4604      	mov	r4, r0
 8000fac:	4608      	mov	r0, r1
 8000fae:	4611      	mov	r1, r2
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	4623      	mov	r3, r4
 8000fb4:	80fb      	strh	r3, [r7, #6]
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	80bb      	strh	r3, [r7, #4]
 8000fba:	460b      	mov	r3, r1
 8000fbc:	807b      	strh	r3, [r7, #2]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8000fc6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000fca:	085b      	lsrs	r3, r3, #1
 8000fcc:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8000fce:	2300      	movs	r3, #0
 8000fd0:	73fb      	strb	r3, [r7, #15]
 8000fd2:	e059      	b.n	8001088 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8000fd4:	887c      	ldrh	r4, [r7, #2]
 8000fd6:	787a      	ldrb	r2, [r7, #1]
 8000fd8:	7bfb      	ldrb	r3, [r7, #15]
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	200a      	movs	r0, #10
 8000fe6:	f7ff ffc1 	bl	8000f6c <mypow>
 8000fea:	4603      	mov	r3, r0
 8000fec:	fbb4 f1f3 	udiv	r1, r4, r3
 8000ff0:	4b2a      	ldr	r3, [pc, #168]	; (800109c <lcd_ShowIntNum+0xf8>)
 8000ff2:	fba3 2301 	umull	r2, r3, r3, r1
 8000ff6:	08da      	lsrs	r2, r3, #3
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	4413      	add	r3, r2
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	1aca      	subs	r2, r1, r3
 8001002:	4613      	mov	r3, r2
 8001004:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8001006:	7bbb      	ldrb	r3, [r7, #14]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d121      	bne.n	8001050 <lcd_ShowIntNum+0xac>
 800100c:	7bfa      	ldrb	r2, [r7, #15]
 800100e:	787b      	ldrb	r3, [r7, #1]
 8001010:	3b01      	subs	r3, #1
 8001012:	429a      	cmp	r2, r3
 8001014:	da1c      	bge.n	8001050 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8001016:	7b3b      	ldrb	r3, [r7, #12]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d117      	bne.n	800104c <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 800101c:	7bfb      	ldrb	r3, [r7, #15]
 800101e:	b29a      	uxth	r2, r3
 8001020:	7b7b      	ldrb	r3, [r7, #13]
 8001022:	b29b      	uxth	r3, r3
 8001024:	fb12 f303 	smulbb	r3, r2, r3
 8001028:	b29a      	uxth	r2, r3
 800102a:	88fb      	ldrh	r3, [r7, #6]
 800102c:	4413      	add	r3, r2
 800102e:	b298      	uxth	r0, r3
 8001030:	8c3a      	ldrh	r2, [r7, #32]
 8001032:	88b9      	ldrh	r1, [r7, #4]
 8001034:	2300      	movs	r3, #0
 8001036:	9302      	str	r3, [sp, #8]
 8001038:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800103c:	9301      	str	r3, [sp, #4]
 800103e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001040:	9300      	str	r3, [sp, #0]
 8001042:	4613      	mov	r3, r2
 8001044:	2220      	movs	r2, #32
 8001046:	f7ff fec1 	bl	8000dcc <lcd_ShowChar>
				continue;
 800104a:	e01a      	b.n	8001082 <lcd_ShowIntNum+0xde>
			}else enshow=1;
 800104c:	2301      	movs	r3, #1
 800104e:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001050:	7bfb      	ldrb	r3, [r7, #15]
 8001052:	b29a      	uxth	r2, r3
 8001054:	7b7b      	ldrb	r3, [r7, #13]
 8001056:	b29b      	uxth	r3, r3
 8001058:	fb12 f303 	smulbb	r3, r2, r3
 800105c:	b29a      	uxth	r2, r3
 800105e:	88fb      	ldrh	r3, [r7, #6]
 8001060:	4413      	add	r3, r2
 8001062:	b298      	uxth	r0, r3
 8001064:	7b3b      	ldrb	r3, [r7, #12]
 8001066:	3330      	adds	r3, #48	; 0x30
 8001068:	b2da      	uxtb	r2, r3
 800106a:	8c3c      	ldrh	r4, [r7, #32]
 800106c:	88b9      	ldrh	r1, [r7, #4]
 800106e:	2300      	movs	r3, #0
 8001070:	9302      	str	r3, [sp, #8]
 8001072:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001076:	9301      	str	r3, [sp, #4]
 8001078:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	4623      	mov	r3, r4
 800107e:	f7ff fea5 	bl	8000dcc <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001082:	7bfb      	ldrb	r3, [r7, #15]
 8001084:	3301      	adds	r3, #1
 8001086:	73fb      	strb	r3, [r7, #15]
 8001088:	7bfa      	ldrb	r2, [r7, #15]
 800108a:	787b      	ldrb	r3, [r7, #1]
 800108c:	429a      	cmp	r2, r3
 800108e:	d3a1      	bcc.n	8000fd4 <lcd_ShowIntNum+0x30>
	}
}
 8001090:	bf00      	nop
 8001092:	bf00      	nop
 8001094:	3714      	adds	r7, #20
 8001096:	46bd      	mov	sp, r7
 8001098:	bd90      	pop	{r4, r7, pc}
 800109a:	bf00      	nop
 800109c:	cccccccd 	.word	0xcccccccd

080010a0 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	091b      	lsrs	r3, r3, #4
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	f003 0303 	and.w	r3, r3, #3
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d007      	beq.n	80010ca <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 80010ba:	4b0a      	ldr	r3, [pc, #40]	; (80010e4 <lcd_SetDir+0x44>)
 80010bc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80010c0:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 80010c2:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <lcd_SetDir+0x44>)
 80010c4:	22f0      	movs	r2, #240	; 0xf0
 80010c6:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 80010c8:	e006      	b.n	80010d8 <lcd_SetDir+0x38>
		lcddev.width=240;
 80010ca:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <lcd_SetDir+0x44>)
 80010cc:	22f0      	movs	r2, #240	; 0xf0
 80010ce:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 80010d0:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <lcd_SetDir+0x44>)
 80010d2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80010d6:	805a      	strh	r2, [r3, #2]
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	20000120 	.word	0x20000120

080010e8 <lcd_init>:


void lcd_init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80010ec:	2200      	movs	r2, #0
 80010ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010f2:	48aa      	ldr	r0, [pc, #680]	; (800139c <lcd_init+0x2b4>)
 80010f4:	f002 f97a 	bl	80033ec <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80010f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010fc:	f001 fea4 	bl	8002e48 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001100:	2201      	movs	r2, #1
 8001102:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001106:	48a5      	ldr	r0, [pc, #660]	; (800139c <lcd_init+0x2b4>)
 8001108:	f002 f970 	bl	80033ec <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800110c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001110:	f001 fe9a 	bl	8002e48 <HAL_Delay>
	lcd_SetDir(L2R_U2D);
 8001114:	2000      	movs	r0, #0
 8001116:	f7ff ffc3 	bl	80010a0 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 800111a:	20d3      	movs	r0, #211	; 0xd3
 800111c:	f7ff fd50 	bl	8000bc0 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001120:	f7ff fd6e 	bl	8000c00 <LCD_RD_DATA>
 8001124:	4603      	mov	r3, r0
 8001126:	461a      	mov	r2, r3
 8001128:	4b9d      	ldr	r3, [pc, #628]	; (80013a0 <lcd_init+0x2b8>)
 800112a:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 800112c:	f7ff fd68 	bl	8000c00 <LCD_RD_DATA>
 8001130:	4603      	mov	r3, r0
 8001132:	461a      	mov	r2, r3
 8001134:	4b9a      	ldr	r3, [pc, #616]	; (80013a0 <lcd_init+0x2b8>)
 8001136:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001138:	f7ff fd62 	bl	8000c00 <LCD_RD_DATA>
 800113c:	4603      	mov	r3, r0
 800113e:	461a      	mov	r2, r3
 8001140:	4b97      	ldr	r3, [pc, #604]	; (80013a0 <lcd_init+0x2b8>)
 8001142:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001144:	4b96      	ldr	r3, [pc, #600]	; (80013a0 <lcd_init+0x2b8>)
 8001146:	889b      	ldrh	r3, [r3, #4]
 8001148:	021b      	lsls	r3, r3, #8
 800114a:	b29a      	uxth	r2, r3
 800114c:	4b94      	ldr	r3, [pc, #592]	; (80013a0 <lcd_init+0x2b8>)
 800114e:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001150:	f7ff fd56 	bl	8000c00 <LCD_RD_DATA>
 8001154:	4603      	mov	r3, r0
 8001156:	461a      	mov	r2, r3
 8001158:	4b91      	ldr	r3, [pc, #580]	; (80013a0 <lcd_init+0x2b8>)
 800115a:	889b      	ldrh	r3, [r3, #4]
 800115c:	4313      	orrs	r3, r2
 800115e:	b29a      	uxth	r2, r3
 8001160:	4b8f      	ldr	r3, [pc, #572]	; (80013a0 <lcd_init+0x2b8>)
 8001162:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001164:	20cf      	movs	r0, #207	; 0xcf
 8001166:	f7ff fd2b 	bl	8000bc0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800116a:	2000      	movs	r0, #0
 800116c:	f7ff fd38 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001170:	20c1      	movs	r0, #193	; 0xc1
 8001172:	f7ff fd35 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001176:	2030      	movs	r0, #48	; 0x30
 8001178:	f7ff fd32 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 800117c:	20ed      	movs	r0, #237	; 0xed
 800117e:	f7ff fd1f 	bl	8000bc0 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001182:	2064      	movs	r0, #100	; 0x64
 8001184:	f7ff fd2c 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001188:	2003      	movs	r0, #3
 800118a:	f7ff fd29 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 800118e:	2012      	movs	r0, #18
 8001190:	f7ff fd26 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001194:	2081      	movs	r0, #129	; 0x81
 8001196:	f7ff fd23 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 800119a:	20e8      	movs	r0, #232	; 0xe8
 800119c:	f7ff fd10 	bl	8000bc0 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 80011a0:	2085      	movs	r0, #133	; 0x85
 80011a2:	f7ff fd1d 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80011a6:	2010      	movs	r0, #16
 80011a8:	f7ff fd1a 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 80011ac:	207a      	movs	r0, #122	; 0x7a
 80011ae:	f7ff fd17 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 80011b2:	20cb      	movs	r0, #203	; 0xcb
 80011b4:	f7ff fd04 	bl	8000bc0 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 80011b8:	2039      	movs	r0, #57	; 0x39
 80011ba:	f7ff fd11 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 80011be:	202c      	movs	r0, #44	; 0x2c
 80011c0:	f7ff fd0e 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80011c4:	2000      	movs	r0, #0
 80011c6:	f7ff fd0b 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 80011ca:	2034      	movs	r0, #52	; 0x34
 80011cc:	f7ff fd08 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 80011d0:	2002      	movs	r0, #2
 80011d2:	f7ff fd05 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 80011d6:	20f7      	movs	r0, #247	; 0xf7
 80011d8:	f7ff fcf2 	bl	8000bc0 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 80011dc:	2020      	movs	r0, #32
 80011de:	f7ff fcff 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 80011e2:	20ea      	movs	r0, #234	; 0xea
 80011e4:	f7ff fcec 	bl	8000bc0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80011e8:	2000      	movs	r0, #0
 80011ea:	f7ff fcf9 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80011ee:	2000      	movs	r0, #0
 80011f0:	f7ff fcf6 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 80011f4:	20c0      	movs	r0, #192	; 0xc0
 80011f6:	f7ff fce3 	bl	8000bc0 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 80011fa:	201b      	movs	r0, #27
 80011fc:	f7ff fcf0 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001200:	20c1      	movs	r0, #193	; 0xc1
 8001202:	f7ff fcdd 	bl	8000bc0 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001206:	2001      	movs	r0, #1
 8001208:	f7ff fcea 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 800120c:	20c5      	movs	r0, #197	; 0xc5
 800120e:	f7ff fcd7 	bl	8000bc0 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001212:	2030      	movs	r0, #48	; 0x30
 8001214:	f7ff fce4 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001218:	2030      	movs	r0, #48	; 0x30
 800121a:	f7ff fce1 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 800121e:	20c7      	movs	r0, #199	; 0xc7
 8001220:	f7ff fcce 	bl	8000bc0 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001224:	20b7      	movs	r0, #183	; 0xb7
 8001226:	f7ff fcdb 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 800122a:	2036      	movs	r0, #54	; 0x36
 800122c:	f7ff fcc8 	bl	8000bc0 <LCD_WR_REG>
	LCD_WR_DATA(0x08|L2R_U2D);
 8001230:	2008      	movs	r0, #8
 8001232:	f7ff fcd5 	bl	8000be0 <LCD_WR_DATA>

//	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
	LCD_WR_REG(0x3A);
 8001236:	203a      	movs	r0, #58	; 0x3a
 8001238:	f7ff fcc2 	bl	8000bc0 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 800123c:	2055      	movs	r0, #85	; 0x55
 800123e:	f7ff fccf 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001242:	20b1      	movs	r0, #177	; 0xb1
 8001244:	f7ff fcbc 	bl	8000bc0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001248:	2000      	movs	r0, #0
 800124a:	f7ff fcc9 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 800124e:	201a      	movs	r0, #26
 8001250:	f7ff fcc6 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001254:	20b6      	movs	r0, #182	; 0xb6
 8001256:	f7ff fcb3 	bl	8000bc0 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 800125a:	200a      	movs	r0, #10
 800125c:	f7ff fcc0 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001260:	20a2      	movs	r0, #162	; 0xa2
 8001262:	f7ff fcbd 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001266:	20f2      	movs	r0, #242	; 0xf2
 8001268:	f7ff fcaa 	bl	8000bc0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800126c:	2000      	movs	r0, #0
 800126e:	f7ff fcb7 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001272:	2026      	movs	r0, #38	; 0x26
 8001274:	f7ff fca4 	bl	8000bc0 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001278:	2001      	movs	r0, #1
 800127a:	f7ff fcb1 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 800127e:	20e0      	movs	r0, #224	; 0xe0
 8001280:	f7ff fc9e 	bl	8000bc0 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001284:	200f      	movs	r0, #15
 8001286:	f7ff fcab 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 800128a:	202a      	movs	r0, #42	; 0x2a
 800128c:	f7ff fca8 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001290:	2028      	movs	r0, #40	; 0x28
 8001292:	f7ff fca5 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001296:	2008      	movs	r0, #8
 8001298:	f7ff fca2 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 800129c:	200e      	movs	r0, #14
 800129e:	f7ff fc9f 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80012a2:	2008      	movs	r0, #8
 80012a4:	f7ff fc9c 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 80012a8:	2054      	movs	r0, #84	; 0x54
 80012aa:	f7ff fc99 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 80012ae:	20a9      	movs	r0, #169	; 0xa9
 80012b0:	f7ff fc96 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 80012b4:	2043      	movs	r0, #67	; 0x43
 80012b6:	f7ff fc93 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 80012ba:	200a      	movs	r0, #10
 80012bc:	f7ff fc90 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80012c0:	200f      	movs	r0, #15
 80012c2:	f7ff fc8d 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80012c6:	2000      	movs	r0, #0
 80012c8:	f7ff fc8a 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80012cc:	2000      	movs	r0, #0
 80012ce:	f7ff fc87 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80012d2:	2000      	movs	r0, #0
 80012d4:	f7ff fc84 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80012d8:	2000      	movs	r0, #0
 80012da:	f7ff fc81 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 80012de:	20e1      	movs	r0, #225	; 0xe1
 80012e0:	f7ff fc6e 	bl	8000bc0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80012e4:	2000      	movs	r0, #0
 80012e6:	f7ff fc7b 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 80012ea:	2015      	movs	r0, #21
 80012ec:	f7ff fc78 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 80012f0:	2017      	movs	r0, #23
 80012f2:	f7ff fc75 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 80012f6:	2007      	movs	r0, #7
 80012f8:	f7ff fc72 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 80012fc:	2011      	movs	r0, #17
 80012fe:	f7ff fc6f 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001302:	2006      	movs	r0, #6
 8001304:	f7ff fc6c 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001308:	202b      	movs	r0, #43	; 0x2b
 800130a:	f7ff fc69 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 800130e:	2056      	movs	r0, #86	; 0x56
 8001310:	f7ff fc66 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001314:	203c      	movs	r0, #60	; 0x3c
 8001316:	f7ff fc63 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 800131a:	2005      	movs	r0, #5
 800131c:	f7ff fc60 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001320:	2010      	movs	r0, #16
 8001322:	f7ff fc5d 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001326:	200f      	movs	r0, #15
 8001328:	f7ff fc5a 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800132c:	203f      	movs	r0, #63	; 0x3f
 800132e:	f7ff fc57 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001332:	203f      	movs	r0, #63	; 0x3f
 8001334:	f7ff fc54 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001338:	200f      	movs	r0, #15
 800133a:	f7ff fc51 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 800133e:	202b      	movs	r0, #43	; 0x2b
 8001340:	f7ff fc3e 	bl	8000bc0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001344:	2000      	movs	r0, #0
 8001346:	f7ff fc4b 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800134a:	2000      	movs	r0, #0
 800134c:	f7ff fc48 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001350:	2001      	movs	r0, #1
 8001352:	f7ff fc45 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001356:	203f      	movs	r0, #63	; 0x3f
 8001358:	f7ff fc42 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 800135c:	202a      	movs	r0, #42	; 0x2a
 800135e:	f7ff fc2f 	bl	8000bc0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001362:	2000      	movs	r0, #0
 8001364:	f7ff fc3c 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001368:	2000      	movs	r0, #0
 800136a:	f7ff fc39 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800136e:	2000      	movs	r0, #0
 8001370:	f7ff fc36 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001374:	20ef      	movs	r0, #239	; 0xef
 8001376:	f7ff fc33 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 800137a:	2011      	movs	r0, #17
 800137c:	f7ff fc20 	bl	8000bc0 <LCD_WR_REG>
	HAL_Delay(120);
 8001380:	2078      	movs	r0, #120	; 0x78
 8001382:	f001 fd61 	bl	8002e48 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001386:	2029      	movs	r0, #41	; 0x29
 8001388:	f7ff fc1a 	bl	8000bc0 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 800138c:	2201      	movs	r2, #1
 800138e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001392:	4804      	ldr	r0, [pc, #16]	; (80013a4 <lcd_init+0x2bc>)
 8001394:	f002 f82a 	bl	80033ec <HAL_GPIO_WritePin>
}
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40020800 	.word	0x40020800
 80013a0:	20000120 	.word	0x20000120
 80013a4:	40020000 	.word	0x40020000

080013a8 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 80013a8:	b590      	push	{r4, r7, lr}
 80013aa:	b08b      	sub	sp, #44	; 0x2c
 80013ac:	af04      	add	r7, sp, #16
 80013ae:	60ba      	str	r2, [r7, #8]
 80013b0:	461a      	mov	r2, r3
 80013b2:	4603      	mov	r3, r0
 80013b4:	81fb      	strh	r3, [r7, #14]
 80013b6:	460b      	mov	r3, r1
 80013b8:	81bb      	strh	r3, [r7, #12]
 80013ba:	4613      	mov	r3, r2
 80013bc:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 80013be:	89fb      	ldrh	r3, [r7, #14]
 80013c0:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 80013c6:	e048      	b.n	800145a <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 80013c8:	7dfb      	ldrb	r3, [r7, #23]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d145      	bne.n	800145a <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80013ce:	89fa      	ldrh	r2, [r7, #14]
 80013d0:	4b26      	ldr	r3, [pc, #152]	; (800146c <lcd_ShowStr+0xc4>)
 80013d2:	881b      	ldrh	r3, [r3, #0]
 80013d4:	4619      	mov	r1, r3
 80013d6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80013da:	085b      	lsrs	r3, r3, #1
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	1acb      	subs	r3, r1, r3
 80013e0:	429a      	cmp	r2, r3
 80013e2:	dc3f      	bgt.n	8001464 <lcd_ShowStr+0xbc>
 80013e4:	89ba      	ldrh	r2, [r7, #12]
 80013e6:	4b21      	ldr	r3, [pc, #132]	; (800146c <lcd_ShowStr+0xc4>)
 80013e8:	885b      	ldrh	r3, [r3, #2]
 80013ea:	4619      	mov	r1, r3
 80013ec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80013f0:	1acb      	subs	r3, r1, r3
 80013f2:	429a      	cmp	r2, r3
 80013f4:	dc36      	bgt.n	8001464 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	2b80      	cmp	r3, #128	; 0x80
 80013fc:	d902      	bls.n	8001404 <lcd_ShowStr+0x5c>
 80013fe:	2301      	movs	r3, #1
 8001400:	75fb      	strb	r3, [r7, #23]
 8001402:	e02a      	b.n	800145a <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b0d      	cmp	r3, #13
 800140a:	d10b      	bne.n	8001424 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 800140c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001410:	b29a      	uxth	r2, r3
 8001412:	89bb      	ldrh	r3, [r7, #12]
 8001414:	4413      	add	r3, r2
 8001416:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8001418:	8abb      	ldrh	r3, [r7, #20]
 800141a:	81fb      	strh	r3, [r7, #14]
					str++;
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	3301      	adds	r3, #1
 8001420:	60bb      	str	r3, [r7, #8]
 8001422:	e017      	b.n	8001454 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	781a      	ldrb	r2, [r3, #0]
 8001428:	88fc      	ldrh	r4, [r7, #6]
 800142a:	89b9      	ldrh	r1, [r7, #12]
 800142c:	89f8      	ldrh	r0, [r7, #14]
 800142e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001432:	9302      	str	r3, [sp, #8]
 8001434:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001438:	9301      	str	r3, [sp, #4]
 800143a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800143c:	9300      	str	r3, [sp, #0]
 800143e:	4623      	mov	r3, r4
 8001440:	f7ff fcc4 	bl	8000dcc <lcd_ShowChar>
					x+=sizey/2;
 8001444:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001448:	085b      	lsrs	r3, r3, #1
 800144a:	b2db      	uxtb	r3, r3
 800144c:	b29a      	uxth	r2, r3
 800144e:	89fb      	ldrh	r3, [r7, #14]
 8001450:	4413      	add	r3, r2
 8001452:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	3301      	adds	r3, #1
 8001458:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1b2      	bne.n	80013c8 <lcd_ShowStr+0x20>
 8001462:	e000      	b.n	8001466 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001464:	bf00      	nop
			}
		}
	}
}
 8001466:	371c      	adds	r7, #28
 8001468:	46bd      	mov	sp, r7
 800146a:	bd90      	pop	{r4, r7, pc}
 800146c:	20000120 	.word	0x20000120

08001470 <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;

int led7_index = 0;

void led7_init(){
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001474:	2201      	movs	r2, #1
 8001476:	2140      	movs	r1, #64	; 0x40
 8001478:	4802      	ldr	r0, [pc, #8]	; (8001484 <led7_init+0x14>)
 800147a:	f001 ffb7 	bl	80033ec <HAL_GPIO_WritePin>
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40021800 	.word	0x40021800

08001488 <led7_Scan>:

void led7_Scan(){
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 800148c:	4b3f      	ldr	r3, [pc, #252]	; (800158c <led7_Scan+0x104>)
 800148e:	881b      	ldrh	r3, [r3, #0]
 8001490:	b2db      	uxtb	r3, r3
 8001492:	b29a      	uxth	r2, r3
 8001494:	4b3d      	ldr	r3, [pc, #244]	; (800158c <led7_Scan+0x104>)
 8001496:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8001498:	4b3d      	ldr	r3, [pc, #244]	; (8001590 <led7_Scan+0x108>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a3d      	ldr	r2, [pc, #244]	; (8001594 <led7_Scan+0x10c>)
 800149e:	5cd3      	ldrb	r3, [r2, r3]
 80014a0:	021b      	lsls	r3, r3, #8
 80014a2:	b21a      	sxth	r2, r3
 80014a4:	4b39      	ldr	r3, [pc, #228]	; (800158c <led7_Scan+0x104>)
 80014a6:	881b      	ldrh	r3, [r3, #0]
 80014a8:	b21b      	sxth	r3, r3
 80014aa:	4313      	orrs	r3, r2
 80014ac:	b21b      	sxth	r3, r3
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	4b36      	ldr	r3, [pc, #216]	; (800158c <led7_Scan+0x104>)
 80014b2:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 80014b4:	4b36      	ldr	r3, [pc, #216]	; (8001590 <led7_Scan+0x108>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b03      	cmp	r3, #3
 80014ba:	d847      	bhi.n	800154c <led7_Scan+0xc4>
 80014bc:	a201      	add	r2, pc, #4	; (adr r2, 80014c4 <led7_Scan+0x3c>)
 80014be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c2:	bf00      	nop
 80014c4:	080014d5 	.word	0x080014d5
 80014c8:	080014f3 	.word	0x080014f3
 80014cc:	08001511 	.word	0x08001511
 80014d0:	0800152f 	.word	0x0800152f
	case 0:
		spi_buffer |= 0x00b0;
 80014d4:	4b2d      	ldr	r3, [pc, #180]	; (800158c <led7_Scan+0x104>)
 80014d6:	881b      	ldrh	r3, [r3, #0]
 80014d8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80014dc:	b29a      	uxth	r2, r3
 80014de:	4b2b      	ldr	r3, [pc, #172]	; (800158c <led7_Scan+0x104>)
 80014e0:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 80014e2:	4b2a      	ldr	r3, [pc, #168]	; (800158c <led7_Scan+0x104>)
 80014e4:	881b      	ldrh	r3, [r3, #0]
 80014e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80014ea:	b29a      	uxth	r2, r3
 80014ec:	4b27      	ldr	r3, [pc, #156]	; (800158c <led7_Scan+0x104>)
 80014ee:	801a      	strh	r2, [r3, #0]
		break;
 80014f0:	e02d      	b.n	800154e <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 80014f2:	4b26      	ldr	r3, [pc, #152]	; (800158c <led7_Scan+0x104>)
 80014f4:	881b      	ldrh	r3, [r3, #0]
 80014f6:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 80014fa:	b29a      	uxth	r2, r3
 80014fc:	4b23      	ldr	r3, [pc, #140]	; (800158c <led7_Scan+0x104>)
 80014fe:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 8001500:	4b22      	ldr	r3, [pc, #136]	; (800158c <led7_Scan+0x104>)
 8001502:	881b      	ldrh	r3, [r3, #0]
 8001504:	f023 0320 	bic.w	r3, r3, #32
 8001508:	b29a      	uxth	r2, r3
 800150a:	4b20      	ldr	r3, [pc, #128]	; (800158c <led7_Scan+0x104>)
 800150c:	801a      	strh	r2, [r3, #0]
		break;
 800150e:	e01e      	b.n	800154e <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8001510:	4b1e      	ldr	r3, [pc, #120]	; (800158c <led7_Scan+0x104>)
 8001512:	881b      	ldrh	r3, [r3, #0]
 8001514:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8001518:	b29a      	uxth	r2, r3
 800151a:	4b1c      	ldr	r3, [pc, #112]	; (800158c <led7_Scan+0x104>)
 800151c:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 800151e:	4b1b      	ldr	r3, [pc, #108]	; (800158c <led7_Scan+0x104>)
 8001520:	881b      	ldrh	r3, [r3, #0]
 8001522:	f023 0310 	bic.w	r3, r3, #16
 8001526:	b29a      	uxth	r2, r3
 8001528:	4b18      	ldr	r3, [pc, #96]	; (800158c <led7_Scan+0x104>)
 800152a:	801a      	strh	r2, [r3, #0]
		break;
 800152c:	e00f      	b.n	800154e <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 800152e:	4b17      	ldr	r3, [pc, #92]	; (800158c <led7_Scan+0x104>)
 8001530:	881b      	ldrh	r3, [r3, #0]
 8001532:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001536:	b29a      	uxth	r2, r3
 8001538:	4b14      	ldr	r3, [pc, #80]	; (800158c <led7_Scan+0x104>)
 800153a:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 800153c:	4b13      	ldr	r3, [pc, #76]	; (800158c <led7_Scan+0x104>)
 800153e:	881b      	ldrh	r3, [r3, #0]
 8001540:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001544:	b29a      	uxth	r2, r3
 8001546:	4b11      	ldr	r3, [pc, #68]	; (800158c <led7_Scan+0x104>)
 8001548:	801a      	strh	r2, [r3, #0]
		break;
 800154a:	e000      	b.n	800154e <led7_Scan+0xc6>
	default:
		break;
 800154c:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 800154e:	4b10      	ldr	r3, [pc, #64]	; (8001590 <led7_Scan+0x108>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	3301      	adds	r3, #1
 8001554:	425a      	negs	r2, r3
 8001556:	f003 0303 	and.w	r3, r3, #3
 800155a:	f002 0203 	and.w	r2, r2, #3
 800155e:	bf58      	it	pl
 8001560:	4253      	negpl	r3, r2
 8001562:	4a0b      	ldr	r2, [pc, #44]	; (8001590 <led7_Scan+0x108>)
 8001564:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8001566:	2200      	movs	r2, #0
 8001568:	2140      	movs	r1, #64	; 0x40
 800156a:	480b      	ldr	r0, [pc, #44]	; (8001598 <led7_Scan+0x110>)
 800156c:	f001 ff3e 	bl	80033ec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8001570:	2301      	movs	r3, #1
 8001572:	2202      	movs	r2, #2
 8001574:	4905      	ldr	r1, [pc, #20]	; (800158c <led7_Scan+0x104>)
 8001576:	4809      	ldr	r0, [pc, #36]	; (800159c <led7_Scan+0x114>)
 8001578:	f003 fd29 	bl	8004fce <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 800157c:	2201      	movs	r2, #1
 800157e:	2140      	movs	r1, #64	; 0x40
 8001580:	4805      	ldr	r0, [pc, #20]	; (8001598 <led7_Scan+0x110>)
 8001582:	f001 ff33 	bl	80033ec <HAL_GPIO_WritePin>
}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000004 	.word	0x20000004
 8001590:	20000038 	.word	0x20000038
 8001594:	20000000 	.word	0x20000000
 8001598:	40021800 	.word	0x40021800
 800159c:	20000160 	.word	0x20000160

080015a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015a4:	f001 fbde 	bl	8002d64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015a8:	f000 f822 	bl	80015f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015ac:	f7ff f99a 	bl	80008e4 <MX_GPIO_Init>
  MX_TIM2_Init();
 80015b0:	f001 fafe 	bl	8002bb0 <MX_TIM2_Init>
  MX_SPI1_Init();
 80015b4:	f001 fa10 	bl	80029d8 <MX_SPI1_Init>
  MX_FSMC_Init();
 80015b8:	f7ff f8c4 	bl	8000744 <MX_FSMC_Init>
  MX_I2C1_Init();
 80015bc:	f7ff fa8a 	bl	8000ad4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 80015c0:	f000 f880 	bl	80016c4 <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 lcd_Clear(BLACK);
 80015c4:	2000      	movs	r0, #0
 80015c6:	f7ff fb79 	bl	8000cbc <lcd_Clear>
 updateTime();
 80015ca:	f000 f89d 	bl	8001708 <updateTime>
  while (1)
  {
	  while(!flag_timer2);
 80015ce:	bf00      	nop
 80015d0:	4b06      	ldr	r3, [pc, #24]	; (80015ec <main+0x4c>)
 80015d2:	881b      	ldrh	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d0fb      	beq.n	80015d0 <main+0x30>
	  flag_timer2 = 0;
 80015d8:	4b04      	ldr	r3, [pc, #16]	; (80015ec <main+0x4c>)
 80015da:	2200      	movs	r2, #0
 80015dc:	801a      	strh	r2, [r3, #0]
	  button_Scan();
 80015de:	f7fe ff7b 	bl	80004d8 <button_Scan>
	  ds3231_ReadTime();
 80015e2:	f7ff f84b 	bl	800067c <ds3231_ReadTime>
//	  displayTime();
	  runSystem();
 80015e6:	f000 f8cf 	bl	8001788 <runSystem>
	  while(!flag_timer2);
 80015ea:	e7f0      	b.n	80015ce <main+0x2e>
 80015ec:	20000046 	.word	0x20000046

080015f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b094      	sub	sp, #80	; 0x50
 80015f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015f6:	f107 0320 	add.w	r3, r7, #32
 80015fa:	2230      	movs	r2, #48	; 0x30
 80015fc:	2100      	movs	r1, #0
 80015fe:	4618      	mov	r0, r3
 8001600:	f004 ffbe 	bl	8006580 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001604:	f107 030c 	add.w	r3, r7, #12
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
 8001612:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001614:	2300      	movs	r3, #0
 8001616:	60bb      	str	r3, [r7, #8]
 8001618:	4b28      	ldr	r3, [pc, #160]	; (80016bc <SystemClock_Config+0xcc>)
 800161a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161c:	4a27      	ldr	r2, [pc, #156]	; (80016bc <SystemClock_Config+0xcc>)
 800161e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001622:	6413      	str	r3, [r2, #64]	; 0x40
 8001624:	4b25      	ldr	r3, [pc, #148]	; (80016bc <SystemClock_Config+0xcc>)
 8001626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001630:	2300      	movs	r3, #0
 8001632:	607b      	str	r3, [r7, #4]
 8001634:	4b22      	ldr	r3, [pc, #136]	; (80016c0 <SystemClock_Config+0xd0>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a21      	ldr	r2, [pc, #132]	; (80016c0 <SystemClock_Config+0xd0>)
 800163a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800163e:	6013      	str	r3, [r2, #0]
 8001640:	4b1f      	ldr	r3, [pc, #124]	; (80016c0 <SystemClock_Config+0xd0>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001648:	607b      	str	r3, [r7, #4]
 800164a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800164c:	2302      	movs	r3, #2
 800164e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001650:	2301      	movs	r3, #1
 8001652:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001654:	2310      	movs	r3, #16
 8001656:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001658:	2302      	movs	r3, #2
 800165a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800165c:	2300      	movs	r3, #0
 800165e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001660:	2308      	movs	r3, #8
 8001662:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001664:	23a8      	movs	r3, #168	; 0xa8
 8001666:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001668:	2302      	movs	r3, #2
 800166a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800166c:	2304      	movs	r3, #4
 800166e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001670:	f107 0320 	add.w	r3, r7, #32
 8001674:	4618      	mov	r0, r3
 8001676:	f002 ffc1 	bl	80045fc <HAL_RCC_OscConfig>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001680:	f001 f954 	bl	800292c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001684:	230f      	movs	r3, #15
 8001686:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001688:	2302      	movs	r3, #2
 800168a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001690:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001694:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001696:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800169a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800169c:	f107 030c 	add.w	r3, r7, #12
 80016a0:	2105      	movs	r1, #5
 80016a2:	4618      	mov	r0, r3
 80016a4:	f003 fa22 	bl	8004aec <HAL_RCC_ClockConfig>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80016ae:	f001 f93d 	bl	800292c <Error_Handler>
  }
}
 80016b2:	bf00      	nop
 80016b4:	3750      	adds	r7, #80	; 0x50
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40007000 	.word	0x40007000

080016c4 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 80016c8:	2200      	movs	r2, #0
 80016ca:	2120      	movs	r1, #32
 80016cc:	480d      	ldr	r0, [pc, #52]	; (8001704 <system_init+0x40>)
 80016ce:	f001 fe8d 	bl	80033ec <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 80016d2:	2200      	movs	r2, #0
 80016d4:	2140      	movs	r1, #64	; 0x40
 80016d6:	480b      	ldr	r0, [pc, #44]	; (8001704 <system_init+0x40>)
 80016d8:	f001 fe88 	bl	80033ec <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 80016dc:	2200      	movs	r2, #0
 80016de:	2110      	movs	r1, #16
 80016e0:	4808      	ldr	r0, [pc, #32]	; (8001704 <system_init+0x40>)
 80016e2:	f001 fe83 	bl	80033ec <HAL_GPIO_WritePin>
	  timer_init();
 80016e6:	f001 f927 	bl	8002938 <timer_init>
	  led7_init();
 80016ea:	f7ff fec1 	bl	8001470 <led7_init>
	  button_init();
 80016ee:	f7fe fee7 	bl	80004c0 <button_init>
	  lcd_init();
 80016f2:	f7ff fcf9 	bl	80010e8 <lcd_init>
	  ds3231_init();
 80016f6:	f7fe ff5b 	bl	80005b0 <ds3231_init>
	  setTimer2(50);
 80016fa:	2032      	movs	r0, #50	; 0x32
 80016fc:	f001 f926 	bl	800294c <setTimer2>
}
 8001700:	bf00      	nop
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40021000 	.word	0x40021000

08001708 <updateTime>:
			led7_SetDigit(i%10, 3, 0);
		}
	}
}

void updateTime(){
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
	ds3231_Write(ADDRESS_YEAR, 24);
 800170c:	2118      	movs	r1, #24
 800170e:	2006      	movs	r0, #6
 8001710:	f7fe ff92 	bl	8000638 <ds3231_Write>
	ds3231_Write(ADDRESS_MONTH, 11);
 8001714:	210b      	movs	r1, #11
 8001716:	2005      	movs	r0, #5
 8001718:	f7fe ff8e 	bl	8000638 <ds3231_Write>
	ds3231_Write(ADDRESS_DATE, 29);
 800171c:	211d      	movs	r1, #29
 800171e:	2004      	movs	r0, #4
 8001720:	f7fe ff8a 	bl	8000638 <ds3231_Write>
	ds3231_Write(ADDRESS_DAY, 6);
 8001724:	2106      	movs	r1, #6
 8001726:	2003      	movs	r0, #3
 8001728:	f7fe ff86 	bl	8000638 <ds3231_Write>
	ds3231_Write(ADDRESS_HOUR, 9);
 800172c:	2109      	movs	r1, #9
 800172e:	2002      	movs	r0, #2
 8001730:	f7fe ff82 	bl	8000638 <ds3231_Write>
	ds3231_Write(ADDRESS_MIN, 10);
 8001734:	210a      	movs	r1, #10
 8001736:	2001      	movs	r0, #1
 8001738:	f7fe ff7e 	bl	8000638 <ds3231_Write>
	ds3231_Write(ADDRESS_SEC, 00);
 800173c:	2100      	movs	r1, #0
 800173e:	2000      	movs	r0, #0
 8001740:	f7fe ff7a 	bl	8000638 <ds3231_Write>
}
 8001744:	bf00      	nop
 8001746:	bd80      	pop	{r7, pc}

08001748 <isButtonUp>:

uint8_t isButtonUp()
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
    if (button_count[3] == 1)
 800174c:	4b05      	ldr	r3, [pc, #20]	; (8001764 <isButtonUp+0x1c>)
 800174e:	88db      	ldrh	r3, [r3, #6]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d101      	bne.n	8001758 <isButtonUp+0x10>
        return 1;
 8001754:	2301      	movs	r3, #1
 8001756:	e000      	b.n	800175a <isButtonUp+0x12>
    else
        return 0;
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	2000004c 	.word	0x2000004c

08001768 <isButtonDown>:
uint8_t isButtonDown()
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
    if (button_count[7] == 1)
 800176c:	4b05      	ldr	r3, [pc, #20]	; (8001784 <isButtonDown+0x1c>)
 800176e:	89db      	ldrh	r3, [r3, #14]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d101      	bne.n	8001778 <isButtonDown+0x10>
        return 1;
 8001774:	2301      	movs	r3, #1
 8001776:	e000      	b.n	800177a <isButtonDown+0x12>
    else
        return 0;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	2000004c 	.word	0x2000004c

08001788 <runSystem>:
//uint8_t systemState = 0; // 0: INIT, 1: NORMAL, 2: MODIFY, 3: ALARM
//uint8_t modifyState = 0; // 0: modify HOUR; 1: modify MIN, 2: modify SEC
//uint8_t count_blink = 0;
//uint8_t blink_state = 0;
uint8_t temp_time;
void runSystem(){
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af04      	add	r7, sp, #16
	switch(systemState){
 800178e:	4b77      	ldr	r3, [pc, #476]	; (800196c <runSystem+0x1e4>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2b08      	cmp	r3, #8
 8001794:	f201 8037 	bhi.w	8002806 <runSystem+0x107e>
 8001798:	a201      	add	r2, pc, #4	; (adr r2, 80017a0 <runSystem+0x18>)
 800179a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800179e:	bf00      	nop
 80017a0:	080017c5 	.word	0x080017c5
 80017a4:	0800180d 	.word	0x0800180d
 80017a8:	080018eb 	.word	0x080018eb
 80017ac:	08001b91 	.word	0x08001b91
 80017b0:	08001e31 	.word	0x08001e31
 80017b4:	080020cf 	.word	0x080020cf
 80017b8:	08002375 	.word	0x08002375
 80017bc:	08002807 	.word	0x08002807
 80017c0:	0800260d 	.word	0x0800260d
	case INIT:
		ds3231_Write(ADDRESS_YEAR, 24);
 80017c4:	2118      	movs	r1, #24
 80017c6:	2006      	movs	r0, #6
 80017c8:	f7fe ff36 	bl	8000638 <ds3231_Write>
		ds3231_Write(ADDRESS_MONTH, 11);
 80017cc:	210b      	movs	r1, #11
 80017ce:	2005      	movs	r0, #5
 80017d0:	f7fe ff32 	bl	8000638 <ds3231_Write>
		ds3231_Write(ADDRESS_DATE, 28);
 80017d4:	211c      	movs	r1, #28
 80017d6:	2004      	movs	r0, #4
 80017d8:	f7fe ff2e 	bl	8000638 <ds3231_Write>
		ds3231_Write(ADDRESS_DAY, 5);
 80017dc:	2105      	movs	r1, #5
 80017de:	2003      	movs	r0, #3
 80017e0:	f7fe ff2a 	bl	8000638 <ds3231_Write>
		ds3231_Write(ADDRESS_HOUR, 10);
 80017e4:	210a      	movs	r1, #10
 80017e6:	2002      	movs	r0, #2
 80017e8:	f7fe ff26 	bl	8000638 <ds3231_Write>
		ds3231_Write(ADDRESS_MIN, 47);
 80017ec:	212f      	movs	r1, #47	; 0x2f
 80017ee:	2001      	movs	r0, #1
 80017f0:	f7fe ff22 	bl	8000638 <ds3231_Write>
		ds3231_Write(ADDRESS_SEC, 50);
 80017f4:	2132      	movs	r1, #50	; 0x32
 80017f6:	2000      	movs	r0, #0
 80017f8:	f7fe ff1e 	bl	8000638 <ds3231_Write>
		systemState = NORMAL;
 80017fc:	4b5b      	ldr	r3, [pc, #364]	; (800196c <runSystem+0x1e4>)
 80017fe:	2201      	movs	r2, #1
 8001800:	601a      	str	r2, [r3, #0]
		lcd_Clear(BLACK);
 8001802:	2000      	movs	r0, #0
 8001804:	f7ff fa5a 	bl	8000cbc <lcd_Clear>
		break;
 8001808:	f000 bffd 	b.w	8002806 <runSystem+0x107e>
	case NORMAL:
		ds3231_ReadTime();
 800180c:	f7fe ff36 	bl	800067c <ds3231_ReadTime>
		displayTime();
 8001810:	f001 f80e 	bl	8002830 <displayTime>
		if(button_count[0] == 1){
 8001814:	4b56      	ldr	r3, [pc, #344]	; (8001970 <runSystem+0x1e8>)
 8001816:	881b      	ldrh	r3, [r3, #0]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d109      	bne.n	8001830 <runSystem+0xa8>
			systemState = MODIFY_HOUR;
 800181c:	4b53      	ldr	r3, [pc, #332]	; (800196c <runSystem+0x1e4>)
 800181e:	2202      	movs	r2, #2
 8001820:	601a      	str	r2, [r3, #0]
			temp_time = ds3231_hours;
 8001822:	4b54      	ldr	r3, [pc, #336]	; (8001974 <runSystem+0x1ec>)
 8001824:	781a      	ldrb	r2, [r3, #0]
 8001826:	4b54      	ldr	r3, [pc, #336]	; (8001978 <runSystem+0x1f0>)
 8001828:	701a      	strb	r2, [r3, #0]
			lcd_Clear(BLACK);
 800182a:	2000      	movs	r0, #0
 800182c:	f7ff fa46 	bl	8000cbc <lcd_Clear>
		}
		if(ds3231_hours == alarm_hour && ds3231_min == alarm_min && set_alarm_flag == 1){
 8001830:	4b50      	ldr	r3, [pc, #320]	; (8001974 <runSystem+0x1ec>)
 8001832:	781a      	ldrb	r2, [r3, #0]
 8001834:	4b51      	ldr	r3, [pc, #324]	; (800197c <runSystem+0x1f4>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	429a      	cmp	r2, r3
 800183a:	f040 87d9 	bne.w	80027f0 <runSystem+0x1068>
 800183e:	4b50      	ldr	r3, [pc, #320]	; (8001980 <runSystem+0x1f8>)
 8001840:	781a      	ldrb	r2, [r3, #0]
 8001842:	4b50      	ldr	r3, [pc, #320]	; (8001984 <runSystem+0x1fc>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	429a      	cmp	r2, r3
 8001848:	f040 87d2 	bne.w	80027f0 <runSystem+0x1068>
 800184c:	4b4e      	ldr	r3, [pc, #312]	; (8001988 <runSystem+0x200>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b01      	cmp	r3, #1
 8001852:	f040 87cd 	bne.w	80027f0 <runSystem+0x1068>
			if(ds3231_sec >= 0 && ds3231_sec <= 15){
 8001856:	4b4d      	ldr	r3, [pc, #308]	; (800198c <runSystem+0x204>)
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2b0f      	cmp	r3, #15
 800185c:	d838      	bhi.n	80018d0 <runSystem+0x148>
				count_blink = count_blink + 1;
 800185e:	4b4c      	ldr	r3, [pc, #304]	; (8001990 <runSystem+0x208>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	3301      	adds	r3, #1
 8001864:	b2da      	uxtb	r2, r3
 8001866:	4b4a      	ldr	r3, [pc, #296]	; (8001990 <runSystem+0x208>)
 8001868:	701a      	strb	r2, [r3, #0]
				if(count_blink % 10 == 0){
 800186a:	4b49      	ldr	r3, [pc, #292]	; (8001990 <runSystem+0x208>)
 800186c:	781a      	ldrb	r2, [r3, #0]
 800186e:	4b49      	ldr	r3, [pc, #292]	; (8001994 <runSystem+0x20c>)
 8001870:	fba3 1302 	umull	r1, r3, r3, r2
 8001874:	08d9      	lsrs	r1, r3, #3
 8001876:	460b      	mov	r3, r1
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	440b      	add	r3, r1
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b00      	cmp	r3, #0
 8001884:	f040 87b4 	bne.w	80027f0 <runSystem+0x1068>
					if(blink_state == 0){
 8001888:	4b43      	ldr	r3, [pc, #268]	; (8001998 <runSystem+0x210>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d10c      	bne.n	80018aa <runSystem+0x122>
						lcd_Fill(20, 30, 150, 100, BLACK);
 8001890:	2300      	movs	r3, #0
 8001892:	9300      	str	r3, [sp, #0]
 8001894:	2364      	movs	r3, #100	; 0x64
 8001896:	2296      	movs	r2, #150	; 0x96
 8001898:	211e      	movs	r1, #30
 800189a:	2014      	movs	r0, #20
 800189c:	f7ff fa48 	bl	8000d30 <lcd_Fill>
						blink_state = 1;
 80018a0:	4b3d      	ldr	r3, [pc, #244]	; (8001998 <runSystem+0x210>)
 80018a2:	2201      	movs	r2, #1
 80018a4:	701a      	strb	r2, [r3, #0]
			}else{
				lcd_Fill(20, 30, 150, 100, BLACK);
				set_alarm_flag = 0;
			}
		}
		break;
 80018a6:	f000 bfa3 	b.w	80027f0 <runSystem+0x1068>
						lcd_ShowStr(20, 30, "TIME UP!!!", WHITE, RED, 24, 0);
 80018aa:	2300      	movs	r3, #0
 80018ac:	9302      	str	r3, [sp, #8]
 80018ae:	2318      	movs	r3, #24
 80018b0:	9301      	str	r3, [sp, #4]
 80018b2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80018b6:	9300      	str	r3, [sp, #0]
 80018b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018bc:	4a37      	ldr	r2, [pc, #220]	; (800199c <runSystem+0x214>)
 80018be:	211e      	movs	r1, #30
 80018c0:	2014      	movs	r0, #20
 80018c2:	f7ff fd71 	bl	80013a8 <lcd_ShowStr>
						blink_state = 0;
 80018c6:	4b34      	ldr	r3, [pc, #208]	; (8001998 <runSystem+0x210>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	701a      	strb	r2, [r3, #0]
		break;
 80018cc:	f000 bf90 	b.w	80027f0 <runSystem+0x1068>
				lcd_Fill(20, 30, 150, 100, BLACK);
 80018d0:	2300      	movs	r3, #0
 80018d2:	9300      	str	r3, [sp, #0]
 80018d4:	2364      	movs	r3, #100	; 0x64
 80018d6:	2296      	movs	r2, #150	; 0x96
 80018d8:	211e      	movs	r1, #30
 80018da:	2014      	movs	r0, #20
 80018dc:	f7ff fa28 	bl	8000d30 <lcd_Fill>
				set_alarm_flag = 0;
 80018e0:	4b29      	ldr	r3, [pc, #164]	; (8001988 <runSystem+0x200>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	701a      	strb	r2, [r3, #0]
		break;
 80018e6:	f000 bf83 	b.w	80027f0 <runSystem+0x1068>
	case MODIFY_HOUR:
		lcd_ShowStr(20, 30, "Modify HOUR", WHITE, BLUE, 24, 0);
 80018ea:	2300      	movs	r3, #0
 80018ec:	9302      	str	r3, [sp, #8]
 80018ee:	2318      	movs	r3, #24
 80018f0:	9301      	str	r3, [sp, #4]
 80018f2:	231f      	movs	r3, #31
 80018f4:	9300      	str	r3, [sp, #0]
 80018f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018fa:	4a29      	ldr	r2, [pc, #164]	; (80019a0 <runSystem+0x218>)
 80018fc:	211e      	movs	r1, #30
 80018fe:	2014      	movs	r0, #20
 8001900:	f7ff fd52 	bl	80013a8 <lcd_ShowStr>
		ds3231_Write(ADDRESS_SEC, ds3231_sec);
 8001904:	4b21      	ldr	r3, [pc, #132]	; (800198c <runSystem+0x204>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	4619      	mov	r1, r3
 800190a:	2000      	movs	r0, #0
 800190c:	f7fe fe94 	bl	8000638 <ds3231_Write>
		count_blink = count_blink + 1;
 8001910:	4b1f      	ldr	r3, [pc, #124]	; (8001990 <runSystem+0x208>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	3301      	adds	r3, #1
 8001916:	b2da      	uxtb	r2, r3
 8001918:	4b1d      	ldr	r3, [pc, #116]	; (8001990 <runSystem+0x208>)
 800191a:	701a      	strb	r2, [r3, #0]
		if(count_blink % 10 == 0){
 800191c:	4b1c      	ldr	r3, [pc, #112]	; (8001990 <runSystem+0x208>)
 800191e:	781a      	ldrb	r2, [r3, #0]
 8001920:	4b1c      	ldr	r3, [pc, #112]	; (8001994 <runSystem+0x20c>)
 8001922:	fba3 1302 	umull	r1, r3, r3, r2
 8001926:	08d9      	lsrs	r1, r3, #3
 8001928:	460b      	mov	r3, r1
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	440b      	add	r3, r1
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	b2db      	uxtb	r3, r3
 8001934:	2b00      	cmp	r3, #0
 8001936:	d106      	bne.n	8001946 <runSystem+0x1be>
			blink_state ^= 1;
 8001938:	4b17      	ldr	r3, [pc, #92]	; (8001998 <runSystem+0x210>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	f083 0301 	eor.w	r3, r3, #1
 8001940:	b2da      	uxtb	r2, r3
 8001942:	4b15      	ldr	r3, [pc, #84]	; (8001998 <runSystem+0x210>)
 8001944:	701a      	strb	r2, [r3, #0]
		}
		if(blink_state == 0){
 8001946:	4b14      	ldr	r3, [pc, #80]	; (8001998 <runSystem+0x210>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d12c      	bne.n	80019a8 <runSystem+0x220>
			lcd_ShowStr(70, 100, "  ", GREEN, BLACK, 24, 0);
 800194e:	2300      	movs	r3, #0
 8001950:	9302      	str	r3, [sp, #8]
 8001952:	2318      	movs	r3, #24
 8001954:	9301      	str	r3, [sp, #4]
 8001956:	2300      	movs	r3, #0
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800195e:	4a11      	ldr	r2, [pc, #68]	; (80019a4 <runSystem+0x21c>)
 8001960:	2164      	movs	r1, #100	; 0x64
 8001962:	2046      	movs	r0, #70	; 0x46
 8001964:	f7ff fd20 	bl	80013a8 <lcd_ShowStr>
 8001968:	e02d      	b.n	80019c6 <runSystem+0x23e>
 800196a:	bf00      	nop
 800196c:	2000003c 	.word	0x2000003c
 8001970:	2000004c 	.word	0x2000004c
 8001974:	20000071 	.word	0x20000071
 8001978:	2000015b 	.word	0x2000015b
 800197c:	2000015a 	.word	0x2000015a
 8001980:	2000006e 	.word	0x2000006e
 8001984:	2000015c 	.word	0x2000015c
 8001988:	20000042 	.word	0x20000042
 800198c:	2000006c 	.word	0x2000006c
 8001990:	20000040 	.word	0x20000040
 8001994:	cccccccd 	.word	0xcccccccd
 8001998:	20000041 	.word	0x20000041
 800199c:	080065a8 	.word	0x080065a8
 80019a0:	080065b4 	.word	0x080065b4
 80019a4:	080065c0 	.word	0x080065c0
		}else{
			lcd_ShowIntNum(70, 100, temp_time, 2, GREEN, BLACK, 24);
 80019a8:	4b99      	ldr	r3, [pc, #612]	; (8001c10 <runSystem+0x488>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	b29a      	uxth	r2, r3
 80019ae:	2318      	movs	r3, #24
 80019b0:	9302      	str	r3, [sp, #8]
 80019b2:	2300      	movs	r3, #0
 80019b4:	9301      	str	r3, [sp, #4]
 80019b6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	2302      	movs	r3, #2
 80019be:	2164      	movs	r1, #100	; 0x64
 80019c0:	2046      	movs	r0, #70	; 0x46
 80019c2:	f7ff faef 	bl	8000fa4 <lcd_ShowIntNum>
		}
		lcd_ShowIntNum(110, 100, ds3231_min, 2, GREEN, BLACK, 24);
 80019c6:	4b93      	ldr	r3, [pc, #588]	; (8001c14 <runSystem+0x48c>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	b29a      	uxth	r2, r3
 80019cc:	2318      	movs	r3, #24
 80019ce:	9302      	str	r3, [sp, #8]
 80019d0:	2300      	movs	r3, #0
 80019d2:	9301      	str	r3, [sp, #4]
 80019d4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80019d8:	9300      	str	r3, [sp, #0]
 80019da:	2302      	movs	r3, #2
 80019dc:	2164      	movs	r1, #100	; 0x64
 80019de:	206e      	movs	r0, #110	; 0x6e
 80019e0:	f7ff fae0 	bl	8000fa4 <lcd_ShowIntNum>
		lcd_ShowIntNum(150, 100, ds3231_sec, 2, GREEN, BLACK, 24);
 80019e4:	4b8c      	ldr	r3, [pc, #560]	; (8001c18 <runSystem+0x490>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	2318      	movs	r3, #24
 80019ec:	9302      	str	r3, [sp, #8]
 80019ee:	2300      	movs	r3, #0
 80019f0:	9301      	str	r3, [sp, #4]
 80019f2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80019f6:	9300      	str	r3, [sp, #0]
 80019f8:	2302      	movs	r3, #2
 80019fa:	2164      	movs	r1, #100	; 0x64
 80019fc:	2096      	movs	r0, #150	; 0x96
 80019fe:	f7ff fad1 	bl	8000fa4 <lcd_ShowIntNum>
		lcd_ShowIntNum(20, 130, ds3231_day, 2, YELLOW, BLACK, 24);
 8001a02:	4b86      	ldr	r3, [pc, #536]	; (8001c1c <runSystem+0x494>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	2318      	movs	r3, #24
 8001a0a:	9302      	str	r3, [sp, #8]
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	9301      	str	r3, [sp, #4]
 8001a10:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001a14:	9300      	str	r3, [sp, #0]
 8001a16:	2302      	movs	r3, #2
 8001a18:	2182      	movs	r1, #130	; 0x82
 8001a1a:	2014      	movs	r0, #20
 8001a1c:	f7ff fac2 	bl	8000fa4 <lcd_ShowIntNum>
		lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 8001a20:	4b7f      	ldr	r3, [pc, #508]	; (8001c20 <runSystem+0x498>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	b29a      	uxth	r2, r3
 8001a26:	2318      	movs	r3, #24
 8001a28:	9302      	str	r3, [sp, #8]
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	9301      	str	r3, [sp, #4]
 8001a2e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001a32:	9300      	str	r3, [sp, #0]
 8001a34:	2302      	movs	r3, #2
 8001a36:	2182      	movs	r1, #130	; 0x82
 8001a38:	2046      	movs	r0, #70	; 0x46
 8001a3a:	f7ff fab3 	bl	8000fa4 <lcd_ShowIntNum>
		lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 8001a3e:	4b79      	ldr	r3, [pc, #484]	; (8001c24 <runSystem+0x49c>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	2318      	movs	r3, #24
 8001a46:	9302      	str	r3, [sp, #8]
 8001a48:	2300      	movs	r3, #0
 8001a4a:	9301      	str	r3, [sp, #4]
 8001a4c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001a50:	9300      	str	r3, [sp, #0]
 8001a52:	2302      	movs	r3, #2
 8001a54:	2182      	movs	r1, #130	; 0x82
 8001a56:	206e      	movs	r0, #110	; 0x6e
 8001a58:	f7ff faa4 	bl	8000fa4 <lcd_ShowIntNum>
		lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 8001a5c:	4b72      	ldr	r3, [pc, #456]	; (8001c28 <runSystem+0x4a0>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	2318      	movs	r3, #24
 8001a64:	9302      	str	r3, [sp, #8]
 8001a66:	2300      	movs	r3, #0
 8001a68:	9301      	str	r3, [sp, #4]
 8001a6a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	2302      	movs	r3, #2
 8001a72:	2182      	movs	r1, #130	; 0x82
 8001a74:	2096      	movs	r0, #150	; 0x96
 8001a76:	f7ff fa95 	bl	8000fa4 <lcd_ShowIntNum>
		if(isButtonUp()){
 8001a7a:	f7ff fe65 	bl	8001748 <isButtonUp>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d00c      	beq.n	8001a9e <runSystem+0x316>
			temp_time++;
 8001a84:	4b62      	ldr	r3, [pc, #392]	; (8001c10 <runSystem+0x488>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	4b60      	ldr	r3, [pc, #384]	; (8001c10 <runSystem+0x488>)
 8001a8e:	701a      	strb	r2, [r3, #0]
			if(temp_time >= 24){
 8001a90:	4b5f      	ldr	r3, [pc, #380]	; (8001c10 <runSystem+0x488>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b17      	cmp	r3, #23
 8001a96:	d902      	bls.n	8001a9e <runSystem+0x316>
				temp_time = 0;
 8001a98:	4b5d      	ldr	r3, [pc, #372]	; (8001c10 <runSystem+0x488>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	701a      	strb	r2, [r3, #0]
			}
		}
		if(isButtonDown()){
 8001a9e:	f7ff fe63 	bl	8001768 <isButtonDown>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d00c      	beq.n	8001ac2 <runSystem+0x33a>
			temp_time--;
 8001aa8:	4b59      	ldr	r3, [pc, #356]	; (8001c10 <runSystem+0x488>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	3b01      	subs	r3, #1
 8001aae:	b2da      	uxtb	r2, r3
 8001ab0:	4b57      	ldr	r3, [pc, #348]	; (8001c10 <runSystem+0x488>)
 8001ab2:	701a      	strb	r2, [r3, #0]
			if(temp_time <= 0){
 8001ab4:	4b56      	ldr	r3, [pc, #344]	; (8001c10 <runSystem+0x488>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d102      	bne.n	8001ac2 <runSystem+0x33a>
				temp_time = 0;
 8001abc:	4b54      	ldr	r3, [pc, #336]	; (8001c10 <runSystem+0x488>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	701a      	strb	r2, [r3, #0]
			}
		}
		if(button_count[3] >= 40 && count_blink % 4 == 0){
 8001ac2:	4b5a      	ldr	r3, [pc, #360]	; (8001c2c <runSystem+0x4a4>)
 8001ac4:	88db      	ldrh	r3, [r3, #6]
 8001ac6:	2b27      	cmp	r3, #39	; 0x27
 8001ac8:	d916      	bls.n	8001af8 <runSystem+0x370>
 8001aca:	4b59      	ldr	r3, [pc, #356]	; (8001c30 <runSystem+0x4a8>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	f003 0303 	and.w	r3, r3, #3
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d10f      	bne.n	8001af8 <runSystem+0x370>
			temp_time++;
 8001ad8:	4b4d      	ldr	r3, [pc, #308]	; (8001c10 <runSystem+0x488>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	3301      	adds	r3, #1
 8001ade:	b2da      	uxtb	r2, r3
 8001ae0:	4b4b      	ldr	r3, [pc, #300]	; (8001c10 <runSystem+0x488>)
 8001ae2:	701a      	strb	r2, [r3, #0]
			if(temp_time >= 24){
 8001ae4:	4b4a      	ldr	r3, [pc, #296]	; (8001c10 <runSystem+0x488>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2b17      	cmp	r3, #23
 8001aea:	d902      	bls.n	8001af2 <runSystem+0x36a>
				temp_time = 0;
 8001aec:	4b48      	ldr	r3, [pc, #288]	; (8001c10 <runSystem+0x488>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	701a      	strb	r2, [r3, #0]
			}
			blink_state = 1;
 8001af2:	4b50      	ldr	r3, [pc, #320]	; (8001c34 <runSystem+0x4ac>)
 8001af4:	2201      	movs	r2, #1
 8001af6:	701a      	strb	r2, [r3, #0]
		}
		if(button_count[7] >= 40 && count_blink % 4 == 0){
 8001af8:	4b4c      	ldr	r3, [pc, #304]	; (8001c2c <runSystem+0x4a4>)
 8001afa:	89db      	ldrh	r3, [r3, #14]
 8001afc:	2b27      	cmp	r3, #39	; 0x27
 8001afe:	d916      	bls.n	8001b2e <runSystem+0x3a6>
 8001b00:	4b4b      	ldr	r3, [pc, #300]	; (8001c30 <runSystem+0x4a8>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	f003 0303 	and.w	r3, r3, #3
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d10f      	bne.n	8001b2e <runSystem+0x3a6>
			temp_time--;
 8001b0e:	4b40      	ldr	r3, [pc, #256]	; (8001c10 <runSystem+0x488>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	3b01      	subs	r3, #1
 8001b14:	b2da      	uxtb	r2, r3
 8001b16:	4b3e      	ldr	r3, [pc, #248]	; (8001c10 <runSystem+0x488>)
 8001b18:	701a      	strb	r2, [r3, #0]
			if(temp_time <= 0){
 8001b1a:	4b3d      	ldr	r3, [pc, #244]	; (8001c10 <runSystem+0x488>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d102      	bne.n	8001b28 <runSystem+0x3a0>
				temp_time = 0;
 8001b22:	4b3b      	ldr	r3, [pc, #236]	; (8001c10 <runSystem+0x488>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	701a      	strb	r2, [r3, #0]
			}
			blink_state = 1;
 8001b28:	4b42      	ldr	r3, [pc, #264]	; (8001c34 <runSystem+0x4ac>)
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	701a      	strb	r2, [r3, #0]
		}

		if(button_count[12] == 1){
 8001b2e:	4b3f      	ldr	r3, [pc, #252]	; (8001c2c <runSystem+0x4a4>)
 8001b30:	8b1b      	ldrh	r3, [r3, #24]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d115      	bne.n	8001b62 <runSystem+0x3da>
			ds3231_Write(ADDRESS_HOUR, temp_time);
 8001b36:	4b36      	ldr	r3, [pc, #216]	; (8001c10 <runSystem+0x488>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	2002      	movs	r0, #2
 8001b3e:	f7fe fd7b 	bl	8000638 <ds3231_Write>
			count_blink = 0;
 8001b42:	4b3b      	ldr	r3, [pc, #236]	; (8001c30 <runSystem+0x4a8>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	701a      	strb	r2, [r3, #0]
			blink_state = 0;
 8001b48:	4b3a      	ldr	r3, [pc, #232]	; (8001c34 <runSystem+0x4ac>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	701a      	strb	r2, [r3, #0]
			temp_time = ds3231_min;
 8001b4e:	4b31      	ldr	r3, [pc, #196]	; (8001c14 <runSystem+0x48c>)
 8001b50:	781a      	ldrb	r2, [r3, #0]
 8001b52:	4b2f      	ldr	r3, [pc, #188]	; (8001c10 <runSystem+0x488>)
 8001b54:	701a      	strb	r2, [r3, #0]
			systemState = MODIFY_MIN;
 8001b56:	4b38      	ldr	r3, [pc, #224]	; (8001c38 <runSystem+0x4b0>)
 8001b58:	2203      	movs	r2, #3
 8001b5a:	601a      	str	r2, [r3, #0]
			lcd_Clear(BLACK);
 8001b5c:	2000      	movs	r0, #0
 8001b5e:	f7ff f8ad 	bl	8000cbc <lcd_Clear>
		}
		if(button_count[0] == 1){
 8001b62:	4b32      	ldr	r3, [pc, #200]	; (8001c2c <runSystem+0x4a4>)
 8001b64:	881b      	ldrh	r3, [r3, #0]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	f040 8644 	bne.w	80027f4 <runSystem+0x106c>
			count_blink = 0;
 8001b6c:	4b30      	ldr	r3, [pc, #192]	; (8001c30 <runSystem+0x4a8>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	701a      	strb	r2, [r3, #0]
			blink_state = 0;
 8001b72:	4b30      	ldr	r3, [pc, #192]	; (8001c34 <runSystem+0x4ac>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	701a      	strb	r2, [r3, #0]
			temp_time = ds3231_min;
 8001b78:	4b26      	ldr	r3, [pc, #152]	; (8001c14 <runSystem+0x48c>)
 8001b7a:	781a      	ldrb	r2, [r3, #0]
 8001b7c:	4b24      	ldr	r3, [pc, #144]	; (8001c10 <runSystem+0x488>)
 8001b7e:	701a      	strb	r2, [r3, #0]
			systemState = MODIFY_MIN;
 8001b80:	4b2d      	ldr	r3, [pc, #180]	; (8001c38 <runSystem+0x4b0>)
 8001b82:	2203      	movs	r2, #3
 8001b84:	601a      	str	r2, [r3, #0]
			lcd_Clear(BLACK);
 8001b86:	2000      	movs	r0, #0
 8001b88:	f7ff f898 	bl	8000cbc <lcd_Clear>
		}
		break;
 8001b8c:	f000 be32 	b.w	80027f4 <runSystem+0x106c>
	case MODIFY_MIN:
		lcd_ShowStr(20, 30, "Modify MIN", WHITE, BLUE, 24, 0);
 8001b90:	2300      	movs	r3, #0
 8001b92:	9302      	str	r3, [sp, #8]
 8001b94:	2318      	movs	r3, #24
 8001b96:	9301      	str	r3, [sp, #4]
 8001b98:	231f      	movs	r3, #31
 8001b9a:	9300      	str	r3, [sp, #0]
 8001b9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ba0:	4a26      	ldr	r2, [pc, #152]	; (8001c3c <runSystem+0x4b4>)
 8001ba2:	211e      	movs	r1, #30
 8001ba4:	2014      	movs	r0, #20
 8001ba6:	f7ff fbff 	bl	80013a8 <lcd_ShowStr>
		ds3231_Write(ADDRESS_SEC, ds3231_sec);
 8001baa:	4b1b      	ldr	r3, [pc, #108]	; (8001c18 <runSystem+0x490>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	4619      	mov	r1, r3
 8001bb0:	2000      	movs	r0, #0
 8001bb2:	f7fe fd41 	bl	8000638 <ds3231_Write>
		count_blink = count_blink + 1;
 8001bb6:	4b1e      	ldr	r3, [pc, #120]	; (8001c30 <runSystem+0x4a8>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	4b1c      	ldr	r3, [pc, #112]	; (8001c30 <runSystem+0x4a8>)
 8001bc0:	701a      	strb	r2, [r3, #0]
		if(count_blink % 10 == 0){
 8001bc2:	4b1b      	ldr	r3, [pc, #108]	; (8001c30 <runSystem+0x4a8>)
 8001bc4:	781a      	ldrb	r2, [r3, #0]
 8001bc6:	4b1e      	ldr	r3, [pc, #120]	; (8001c40 <runSystem+0x4b8>)
 8001bc8:	fba3 1302 	umull	r1, r3, r3, r2
 8001bcc:	08d9      	lsrs	r1, r3, #3
 8001bce:	460b      	mov	r3, r1
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	440b      	add	r3, r1
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d106      	bne.n	8001bec <runSystem+0x464>
			blink_state ^= 1;
 8001bde:	4b15      	ldr	r3, [pc, #84]	; (8001c34 <runSystem+0x4ac>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	f083 0301 	eor.w	r3, r3, #1
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	4b12      	ldr	r3, [pc, #72]	; (8001c34 <runSystem+0x4ac>)
 8001bea:	701a      	strb	r2, [r3, #0]
		}
		if(blink_state == 0){
 8001bec:	4b11      	ldr	r3, [pc, #68]	; (8001c34 <runSystem+0x4ac>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d129      	bne.n	8001c48 <runSystem+0x4c0>
			lcd_ShowStr(110, 100, "  ", GREEN, BLACK, 24, 0);
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	9302      	str	r3, [sp, #8]
 8001bf8:	2318      	movs	r3, #24
 8001bfa:	9301      	str	r3, [sp, #4]
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	9300      	str	r3, [sp, #0]
 8001c00:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001c04:	4a0f      	ldr	r2, [pc, #60]	; (8001c44 <runSystem+0x4bc>)
 8001c06:	2164      	movs	r1, #100	; 0x64
 8001c08:	206e      	movs	r0, #110	; 0x6e
 8001c0a:	f7ff fbcd 	bl	80013a8 <lcd_ShowStr>
 8001c0e:	e02a      	b.n	8001c66 <runSystem+0x4de>
 8001c10:	2000015b 	.word	0x2000015b
 8001c14:	2000006e 	.word	0x2000006e
 8001c18:	2000006c 	.word	0x2000006c
 8001c1c:	20000070 	.word	0x20000070
 8001c20:	2000006f 	.word	0x2000006f
 8001c24:	20000072 	.word	0x20000072
 8001c28:	2000006d 	.word	0x2000006d
 8001c2c:	2000004c 	.word	0x2000004c
 8001c30:	20000040 	.word	0x20000040
 8001c34:	20000041 	.word	0x20000041
 8001c38:	2000003c 	.word	0x2000003c
 8001c3c:	080065c4 	.word	0x080065c4
 8001c40:	cccccccd 	.word	0xcccccccd
 8001c44:	080065c0 	.word	0x080065c0
		}else{
			lcd_ShowIntNum(110, 100, temp_time, 2, GREEN, BLACK, 24);
 8001c48:	4b99      	ldr	r3, [pc, #612]	; (8001eb0 <runSystem+0x728>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	2318      	movs	r3, #24
 8001c50:	9302      	str	r3, [sp, #8]
 8001c52:	2300      	movs	r3, #0
 8001c54:	9301      	str	r3, [sp, #4]
 8001c56:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001c5a:	9300      	str	r3, [sp, #0]
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	2164      	movs	r1, #100	; 0x64
 8001c60:	206e      	movs	r0, #110	; 0x6e
 8001c62:	f7ff f99f 	bl	8000fa4 <lcd_ShowIntNum>
		}
		lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 24);
 8001c66:	4b93      	ldr	r3, [pc, #588]	; (8001eb4 <runSystem+0x72c>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	2318      	movs	r3, #24
 8001c6e:	9302      	str	r3, [sp, #8]
 8001c70:	2300      	movs	r3, #0
 8001c72:	9301      	str	r3, [sp, #4]
 8001c74:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001c78:	9300      	str	r3, [sp, #0]
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	2164      	movs	r1, #100	; 0x64
 8001c7e:	2046      	movs	r0, #70	; 0x46
 8001c80:	f7ff f990 	bl	8000fa4 <lcd_ShowIntNum>
		lcd_ShowIntNum(150, 100, ds3231_sec, 2, GREEN, BLACK, 24);
 8001c84:	4b8c      	ldr	r3, [pc, #560]	; (8001eb8 <runSystem+0x730>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	2318      	movs	r3, #24
 8001c8c:	9302      	str	r3, [sp, #8]
 8001c8e:	2300      	movs	r3, #0
 8001c90:	9301      	str	r3, [sp, #4]
 8001c92:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001c96:	9300      	str	r3, [sp, #0]
 8001c98:	2302      	movs	r3, #2
 8001c9a:	2164      	movs	r1, #100	; 0x64
 8001c9c:	2096      	movs	r0, #150	; 0x96
 8001c9e:	f7ff f981 	bl	8000fa4 <lcd_ShowIntNum>
		lcd_ShowIntNum(20, 130, ds3231_day, 2, YELLOW, BLACK, 24);
 8001ca2:	4b86      	ldr	r3, [pc, #536]	; (8001ebc <runSystem+0x734>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	2318      	movs	r3, #24
 8001caa:	9302      	str	r3, [sp, #8]
 8001cac:	2300      	movs	r3, #0
 8001cae:	9301      	str	r3, [sp, #4]
 8001cb0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001cb4:	9300      	str	r3, [sp, #0]
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	2182      	movs	r1, #130	; 0x82
 8001cba:	2014      	movs	r0, #20
 8001cbc:	f7ff f972 	bl	8000fa4 <lcd_ShowIntNum>
		lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 8001cc0:	4b7f      	ldr	r3, [pc, #508]	; (8001ec0 <runSystem+0x738>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	b29a      	uxth	r2, r3
 8001cc6:	2318      	movs	r3, #24
 8001cc8:	9302      	str	r3, [sp, #8]
 8001cca:	2300      	movs	r3, #0
 8001ccc:	9301      	str	r3, [sp, #4]
 8001cce:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001cd2:	9300      	str	r3, [sp, #0]
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	2182      	movs	r1, #130	; 0x82
 8001cd8:	2046      	movs	r0, #70	; 0x46
 8001cda:	f7ff f963 	bl	8000fa4 <lcd_ShowIntNum>
		lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 8001cde:	4b79      	ldr	r3, [pc, #484]	; (8001ec4 <runSystem+0x73c>)
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	2318      	movs	r3, #24
 8001ce6:	9302      	str	r3, [sp, #8]
 8001ce8:	2300      	movs	r3, #0
 8001cea:	9301      	str	r3, [sp, #4]
 8001cec:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001cf0:	9300      	str	r3, [sp, #0]
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	2182      	movs	r1, #130	; 0x82
 8001cf6:	206e      	movs	r0, #110	; 0x6e
 8001cf8:	f7ff f954 	bl	8000fa4 <lcd_ShowIntNum>
		lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 8001cfc:	4b72      	ldr	r3, [pc, #456]	; (8001ec8 <runSystem+0x740>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	2318      	movs	r3, #24
 8001d04:	9302      	str	r3, [sp, #8]
 8001d06:	2300      	movs	r3, #0
 8001d08:	9301      	str	r3, [sp, #4]
 8001d0a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001d0e:	9300      	str	r3, [sp, #0]
 8001d10:	2302      	movs	r3, #2
 8001d12:	2182      	movs	r1, #130	; 0x82
 8001d14:	2096      	movs	r0, #150	; 0x96
 8001d16:	f7ff f945 	bl	8000fa4 <lcd_ShowIntNum>
		if(isButtonUp()){
 8001d1a:	f7ff fd15 	bl	8001748 <isButtonUp>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d00c      	beq.n	8001d3e <runSystem+0x5b6>
			temp_time++;
 8001d24:	4b62      	ldr	r3, [pc, #392]	; (8001eb0 <runSystem+0x728>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	b2da      	uxtb	r2, r3
 8001d2c:	4b60      	ldr	r3, [pc, #384]	; (8001eb0 <runSystem+0x728>)
 8001d2e:	701a      	strb	r2, [r3, #0]
			if(temp_time >= 60){
 8001d30:	4b5f      	ldr	r3, [pc, #380]	; (8001eb0 <runSystem+0x728>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	2b3b      	cmp	r3, #59	; 0x3b
 8001d36:	d902      	bls.n	8001d3e <runSystem+0x5b6>
				temp_time = 0;
 8001d38:	4b5d      	ldr	r3, [pc, #372]	; (8001eb0 <runSystem+0x728>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	701a      	strb	r2, [r3, #0]
			}
		}
		if(isButtonDown()){
 8001d3e:	f7ff fd13 	bl	8001768 <isButtonDown>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d00c      	beq.n	8001d62 <runSystem+0x5da>
			temp_time--;
 8001d48:	4b59      	ldr	r3, [pc, #356]	; (8001eb0 <runSystem+0x728>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	3b01      	subs	r3, #1
 8001d4e:	b2da      	uxtb	r2, r3
 8001d50:	4b57      	ldr	r3, [pc, #348]	; (8001eb0 <runSystem+0x728>)
 8001d52:	701a      	strb	r2, [r3, #0]
			if(temp_time <= 0){
 8001d54:	4b56      	ldr	r3, [pc, #344]	; (8001eb0 <runSystem+0x728>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d102      	bne.n	8001d62 <runSystem+0x5da>
				temp_time = 0;
 8001d5c:	4b54      	ldr	r3, [pc, #336]	; (8001eb0 <runSystem+0x728>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	701a      	strb	r2, [r3, #0]
			}
		}
		if(button_count[3] >= 40 && count_blink % 4 == 0){
 8001d62:	4b5a      	ldr	r3, [pc, #360]	; (8001ecc <runSystem+0x744>)
 8001d64:	88db      	ldrh	r3, [r3, #6]
 8001d66:	2b27      	cmp	r3, #39	; 0x27
 8001d68:	d916      	bls.n	8001d98 <runSystem+0x610>
 8001d6a:	4b59      	ldr	r3, [pc, #356]	; (8001ed0 <runSystem+0x748>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	f003 0303 	and.w	r3, r3, #3
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d10f      	bne.n	8001d98 <runSystem+0x610>
			temp_time++;
 8001d78:	4b4d      	ldr	r3, [pc, #308]	; (8001eb0 <runSystem+0x728>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	b2da      	uxtb	r2, r3
 8001d80:	4b4b      	ldr	r3, [pc, #300]	; (8001eb0 <runSystem+0x728>)
 8001d82:	701a      	strb	r2, [r3, #0]
			if(temp_time >= 60){
 8001d84:	4b4a      	ldr	r3, [pc, #296]	; (8001eb0 <runSystem+0x728>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	2b3b      	cmp	r3, #59	; 0x3b
 8001d8a:	d902      	bls.n	8001d92 <runSystem+0x60a>
				temp_time = 0;
 8001d8c:	4b48      	ldr	r3, [pc, #288]	; (8001eb0 <runSystem+0x728>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	701a      	strb	r2, [r3, #0]
			}
			blink_state = 1;
 8001d92:	4b50      	ldr	r3, [pc, #320]	; (8001ed4 <runSystem+0x74c>)
 8001d94:	2201      	movs	r2, #1
 8001d96:	701a      	strb	r2, [r3, #0]
		}
		if(button_count[7] >= 40 && count_blink % 4 == 0){
 8001d98:	4b4c      	ldr	r3, [pc, #304]	; (8001ecc <runSystem+0x744>)
 8001d9a:	89db      	ldrh	r3, [r3, #14]
 8001d9c:	2b27      	cmp	r3, #39	; 0x27
 8001d9e:	d916      	bls.n	8001dce <runSystem+0x646>
 8001da0:	4b4b      	ldr	r3, [pc, #300]	; (8001ed0 <runSystem+0x748>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	f003 0303 	and.w	r3, r3, #3
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d10f      	bne.n	8001dce <runSystem+0x646>
			temp_time--;
 8001dae:	4b40      	ldr	r3, [pc, #256]	; (8001eb0 <runSystem+0x728>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	3b01      	subs	r3, #1
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	4b3e      	ldr	r3, [pc, #248]	; (8001eb0 <runSystem+0x728>)
 8001db8:	701a      	strb	r2, [r3, #0]
			if(temp_time <= 0){
 8001dba:	4b3d      	ldr	r3, [pc, #244]	; (8001eb0 <runSystem+0x728>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d102      	bne.n	8001dc8 <runSystem+0x640>
				temp_time = 0;
 8001dc2:	4b3b      	ldr	r3, [pc, #236]	; (8001eb0 <runSystem+0x728>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	701a      	strb	r2, [r3, #0]
			}
			blink_state = 1;
 8001dc8:	4b42      	ldr	r3, [pc, #264]	; (8001ed4 <runSystem+0x74c>)
 8001dca:	2201      	movs	r2, #1
 8001dcc:	701a      	strb	r2, [r3, #0]
		}
		if(button_count[12] == 1){
 8001dce:	4b3f      	ldr	r3, [pc, #252]	; (8001ecc <runSystem+0x744>)
 8001dd0:	8b1b      	ldrh	r3, [r3, #24]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d115      	bne.n	8001e02 <runSystem+0x67a>
			ds3231_Write(ADDRESS_MIN, temp_time);
 8001dd6:	4b36      	ldr	r3, [pc, #216]	; (8001eb0 <runSystem+0x728>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	4619      	mov	r1, r3
 8001ddc:	2001      	movs	r0, #1
 8001dde:	f7fe fc2b 	bl	8000638 <ds3231_Write>
			count_blink = 0;
 8001de2:	4b3b      	ldr	r3, [pc, #236]	; (8001ed0 <runSystem+0x748>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	701a      	strb	r2, [r3, #0]
			blink_state = 0;
 8001de8:	4b3a      	ldr	r3, [pc, #232]	; (8001ed4 <runSystem+0x74c>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	701a      	strb	r2, [r3, #0]
			temp_time = ds3231_sec;
 8001dee:	4b32      	ldr	r3, [pc, #200]	; (8001eb8 <runSystem+0x730>)
 8001df0:	781a      	ldrb	r2, [r3, #0]
 8001df2:	4b2f      	ldr	r3, [pc, #188]	; (8001eb0 <runSystem+0x728>)
 8001df4:	701a      	strb	r2, [r3, #0]
			systemState = MODIFY_SEC;
 8001df6:	4b38      	ldr	r3, [pc, #224]	; (8001ed8 <runSystem+0x750>)
 8001df8:	2204      	movs	r2, #4
 8001dfa:	601a      	str	r2, [r3, #0]
			lcd_Clear(BLACK);
 8001dfc:	2000      	movs	r0, #0
 8001dfe:	f7fe ff5d 	bl	8000cbc <lcd_Clear>
		}
		if(button_count[0] == 1){
 8001e02:	4b32      	ldr	r3, [pc, #200]	; (8001ecc <runSystem+0x744>)
 8001e04:	881b      	ldrh	r3, [r3, #0]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	f040 84f6 	bne.w	80027f8 <runSystem+0x1070>
			count_blink = 0;
 8001e0c:	4b30      	ldr	r3, [pc, #192]	; (8001ed0 <runSystem+0x748>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	701a      	strb	r2, [r3, #0]
			blink_state = 0;
 8001e12:	4b30      	ldr	r3, [pc, #192]	; (8001ed4 <runSystem+0x74c>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	701a      	strb	r2, [r3, #0]
			temp_time = ds3231_sec;
 8001e18:	4b27      	ldr	r3, [pc, #156]	; (8001eb8 <runSystem+0x730>)
 8001e1a:	781a      	ldrb	r2, [r3, #0]
 8001e1c:	4b24      	ldr	r3, [pc, #144]	; (8001eb0 <runSystem+0x728>)
 8001e1e:	701a      	strb	r2, [r3, #0]
			systemState = MODIFY_SEC;
 8001e20:	4b2d      	ldr	r3, [pc, #180]	; (8001ed8 <runSystem+0x750>)
 8001e22:	2204      	movs	r2, #4
 8001e24:	601a      	str	r2, [r3, #0]
			lcd_Clear(BLACK);
 8001e26:	2000      	movs	r0, #0
 8001e28:	f7fe ff48 	bl	8000cbc <lcd_Clear>
		}
		break;
 8001e2c:	f000 bce4 	b.w	80027f8 <runSystem+0x1070>
	case MODIFY_SEC:
		lcd_ShowStr(20, 30, "Modify SEC", WHITE, BLUE, 24, 0);
 8001e30:	2300      	movs	r3, #0
 8001e32:	9302      	str	r3, [sp, #8]
 8001e34:	2318      	movs	r3, #24
 8001e36:	9301      	str	r3, [sp, #4]
 8001e38:	231f      	movs	r3, #31
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e40:	4a26      	ldr	r2, [pc, #152]	; (8001edc <runSystem+0x754>)
 8001e42:	211e      	movs	r1, #30
 8001e44:	2014      	movs	r0, #20
 8001e46:	f7ff faaf 	bl	80013a8 <lcd_ShowStr>
		ds3231_Write(ADDRESS_SEC, ds3231_sec);
 8001e4a:	4b1b      	ldr	r3, [pc, #108]	; (8001eb8 <runSystem+0x730>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	4619      	mov	r1, r3
 8001e50:	2000      	movs	r0, #0
 8001e52:	f7fe fbf1 	bl	8000638 <ds3231_Write>
		count_blink = count_blink + 1;
 8001e56:	4b1e      	ldr	r3, [pc, #120]	; (8001ed0 <runSystem+0x748>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	b2da      	uxtb	r2, r3
 8001e5e:	4b1c      	ldr	r3, [pc, #112]	; (8001ed0 <runSystem+0x748>)
 8001e60:	701a      	strb	r2, [r3, #0]
		if(count_blink % 10 == 0){
 8001e62:	4b1b      	ldr	r3, [pc, #108]	; (8001ed0 <runSystem+0x748>)
 8001e64:	781a      	ldrb	r2, [r3, #0]
 8001e66:	4b1e      	ldr	r3, [pc, #120]	; (8001ee0 <runSystem+0x758>)
 8001e68:	fba3 1302 	umull	r1, r3, r3, r2
 8001e6c:	08d9      	lsrs	r1, r3, #3
 8001e6e:	460b      	mov	r3, r1
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	440b      	add	r3, r1
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d106      	bne.n	8001e8c <runSystem+0x704>
			blink_state ^= 1;
 8001e7e:	4b15      	ldr	r3, [pc, #84]	; (8001ed4 <runSystem+0x74c>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	f083 0301 	eor.w	r3, r3, #1
 8001e86:	b2da      	uxtb	r2, r3
 8001e88:	4b12      	ldr	r3, [pc, #72]	; (8001ed4 <runSystem+0x74c>)
 8001e8a:	701a      	strb	r2, [r3, #0]
		}
		if(blink_state == 0){
 8001e8c:	4b11      	ldr	r3, [pc, #68]	; (8001ed4 <runSystem+0x74c>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d129      	bne.n	8001ee8 <runSystem+0x760>
			lcd_ShowStr(150, 100, "  ", GREEN, BLACK, 24, 0);
 8001e94:	2300      	movs	r3, #0
 8001e96:	9302      	str	r3, [sp, #8]
 8001e98:	2318      	movs	r3, #24
 8001e9a:	9301      	str	r3, [sp, #4]
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	9300      	str	r3, [sp, #0]
 8001ea0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001ea4:	4a0f      	ldr	r2, [pc, #60]	; (8001ee4 <runSystem+0x75c>)
 8001ea6:	2164      	movs	r1, #100	; 0x64
 8001ea8:	2096      	movs	r0, #150	; 0x96
 8001eaa:	f7ff fa7d 	bl	80013a8 <lcd_ShowStr>
 8001eae:	e02a      	b.n	8001f06 <runSystem+0x77e>
 8001eb0:	2000015b 	.word	0x2000015b
 8001eb4:	20000071 	.word	0x20000071
 8001eb8:	2000006c 	.word	0x2000006c
 8001ebc:	20000070 	.word	0x20000070
 8001ec0:	2000006f 	.word	0x2000006f
 8001ec4:	20000072 	.word	0x20000072
 8001ec8:	2000006d 	.word	0x2000006d
 8001ecc:	2000004c 	.word	0x2000004c
 8001ed0:	20000040 	.word	0x20000040
 8001ed4:	20000041 	.word	0x20000041
 8001ed8:	2000003c 	.word	0x2000003c
 8001edc:	080065d0 	.word	0x080065d0
 8001ee0:	cccccccd 	.word	0xcccccccd
 8001ee4:	080065c0 	.word	0x080065c0
		}else{
			lcd_ShowIntNum(150, 100, temp_time, 2, GREEN, BLACK, 24);
 8001ee8:	4b99      	ldr	r3, [pc, #612]	; (8002150 <runSystem+0x9c8>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	b29a      	uxth	r2, r3
 8001eee:	2318      	movs	r3, #24
 8001ef0:	9302      	str	r3, [sp, #8]
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	9301      	str	r3, [sp, #4]
 8001ef6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001efa:	9300      	str	r3, [sp, #0]
 8001efc:	2302      	movs	r3, #2
 8001efe:	2164      	movs	r1, #100	; 0x64
 8001f00:	2096      	movs	r0, #150	; 0x96
 8001f02:	f7ff f84f 	bl	8000fa4 <lcd_ShowIntNum>
		}
		lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 24);
 8001f06:	4b93      	ldr	r3, [pc, #588]	; (8002154 <runSystem+0x9cc>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	2318      	movs	r3, #24
 8001f0e:	9302      	str	r3, [sp, #8]
 8001f10:	2300      	movs	r3, #0
 8001f12:	9301      	str	r3, [sp, #4]
 8001f14:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001f18:	9300      	str	r3, [sp, #0]
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	2164      	movs	r1, #100	; 0x64
 8001f1e:	2046      	movs	r0, #70	; 0x46
 8001f20:	f7ff f840 	bl	8000fa4 <lcd_ShowIntNum>
		lcd_ShowIntNum(110, 100, ds3231_min, 2, GREEN, BLACK, 24);
 8001f24:	4b8c      	ldr	r3, [pc, #560]	; (8002158 <runSystem+0x9d0>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	2318      	movs	r3, #24
 8001f2c:	9302      	str	r3, [sp, #8]
 8001f2e:	2300      	movs	r3, #0
 8001f30:	9301      	str	r3, [sp, #4]
 8001f32:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001f36:	9300      	str	r3, [sp, #0]
 8001f38:	2302      	movs	r3, #2
 8001f3a:	2164      	movs	r1, #100	; 0x64
 8001f3c:	206e      	movs	r0, #110	; 0x6e
 8001f3e:	f7ff f831 	bl	8000fa4 <lcd_ShowIntNum>
		lcd_ShowIntNum(20, 130, ds3231_day, 2, YELLOW, BLACK, 24);
 8001f42:	4b86      	ldr	r3, [pc, #536]	; (800215c <runSystem+0x9d4>)
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	b29a      	uxth	r2, r3
 8001f48:	2318      	movs	r3, #24
 8001f4a:	9302      	str	r3, [sp, #8]
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	9301      	str	r3, [sp, #4]
 8001f50:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001f54:	9300      	str	r3, [sp, #0]
 8001f56:	2302      	movs	r3, #2
 8001f58:	2182      	movs	r1, #130	; 0x82
 8001f5a:	2014      	movs	r0, #20
 8001f5c:	f7ff f822 	bl	8000fa4 <lcd_ShowIntNum>
		lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 8001f60:	4b7f      	ldr	r3, [pc, #508]	; (8002160 <runSystem+0x9d8>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	2318      	movs	r3, #24
 8001f68:	9302      	str	r3, [sp, #8]
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	9301      	str	r3, [sp, #4]
 8001f6e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001f72:	9300      	str	r3, [sp, #0]
 8001f74:	2302      	movs	r3, #2
 8001f76:	2182      	movs	r1, #130	; 0x82
 8001f78:	2046      	movs	r0, #70	; 0x46
 8001f7a:	f7ff f813 	bl	8000fa4 <lcd_ShowIntNum>
		lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 8001f7e:	4b79      	ldr	r3, [pc, #484]	; (8002164 <runSystem+0x9dc>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	2318      	movs	r3, #24
 8001f86:	9302      	str	r3, [sp, #8]
 8001f88:	2300      	movs	r3, #0
 8001f8a:	9301      	str	r3, [sp, #4]
 8001f8c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001f90:	9300      	str	r3, [sp, #0]
 8001f92:	2302      	movs	r3, #2
 8001f94:	2182      	movs	r1, #130	; 0x82
 8001f96:	206e      	movs	r0, #110	; 0x6e
 8001f98:	f7ff f804 	bl	8000fa4 <lcd_ShowIntNum>
		lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 8001f9c:	4b72      	ldr	r3, [pc, #456]	; (8002168 <runSystem+0x9e0>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	b29a      	uxth	r2, r3
 8001fa2:	2318      	movs	r3, #24
 8001fa4:	9302      	str	r3, [sp, #8]
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	9301      	str	r3, [sp, #4]
 8001faa:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001fae:	9300      	str	r3, [sp, #0]
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	2182      	movs	r1, #130	; 0x82
 8001fb4:	2096      	movs	r0, #150	; 0x96
 8001fb6:	f7fe fff5 	bl	8000fa4 <lcd_ShowIntNum>
		if(isButtonUp()){
 8001fba:	f7ff fbc5 	bl	8001748 <isButtonUp>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d00c      	beq.n	8001fde <runSystem+0x856>
			temp_time++;
 8001fc4:	4b62      	ldr	r3, [pc, #392]	; (8002150 <runSystem+0x9c8>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	b2da      	uxtb	r2, r3
 8001fcc:	4b60      	ldr	r3, [pc, #384]	; (8002150 <runSystem+0x9c8>)
 8001fce:	701a      	strb	r2, [r3, #0]
			if(temp_time >= 60){
 8001fd0:	4b5f      	ldr	r3, [pc, #380]	; (8002150 <runSystem+0x9c8>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	2b3b      	cmp	r3, #59	; 0x3b
 8001fd6:	d902      	bls.n	8001fde <runSystem+0x856>
				temp_time = 0;
 8001fd8:	4b5d      	ldr	r3, [pc, #372]	; (8002150 <runSystem+0x9c8>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	701a      	strb	r2, [r3, #0]
			}
		}
		if(isButtonDown()){
 8001fde:	f7ff fbc3 	bl	8001768 <isButtonDown>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d00c      	beq.n	8002002 <runSystem+0x87a>
			temp_time--;
 8001fe8:	4b59      	ldr	r3, [pc, #356]	; (8002150 <runSystem+0x9c8>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	3b01      	subs	r3, #1
 8001fee:	b2da      	uxtb	r2, r3
 8001ff0:	4b57      	ldr	r3, [pc, #348]	; (8002150 <runSystem+0x9c8>)
 8001ff2:	701a      	strb	r2, [r3, #0]
			if(temp_time <= 0){
 8001ff4:	4b56      	ldr	r3, [pc, #344]	; (8002150 <runSystem+0x9c8>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d102      	bne.n	8002002 <runSystem+0x87a>
				temp_time = 0;
 8001ffc:	4b54      	ldr	r3, [pc, #336]	; (8002150 <runSystem+0x9c8>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	701a      	strb	r2, [r3, #0]
			}
		}
		if(button_count[3] >= 40 && count_blink % 4 == 0){
 8002002:	4b5a      	ldr	r3, [pc, #360]	; (800216c <runSystem+0x9e4>)
 8002004:	88db      	ldrh	r3, [r3, #6]
 8002006:	2b27      	cmp	r3, #39	; 0x27
 8002008:	d916      	bls.n	8002038 <runSystem+0x8b0>
 800200a:	4b59      	ldr	r3, [pc, #356]	; (8002170 <runSystem+0x9e8>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	f003 0303 	and.w	r3, r3, #3
 8002012:	b2db      	uxtb	r3, r3
 8002014:	2b00      	cmp	r3, #0
 8002016:	d10f      	bne.n	8002038 <runSystem+0x8b0>
			temp_time++;
 8002018:	4b4d      	ldr	r3, [pc, #308]	; (8002150 <runSystem+0x9c8>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	3301      	adds	r3, #1
 800201e:	b2da      	uxtb	r2, r3
 8002020:	4b4b      	ldr	r3, [pc, #300]	; (8002150 <runSystem+0x9c8>)
 8002022:	701a      	strb	r2, [r3, #0]
			if(temp_time >= 60){
 8002024:	4b4a      	ldr	r3, [pc, #296]	; (8002150 <runSystem+0x9c8>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	2b3b      	cmp	r3, #59	; 0x3b
 800202a:	d902      	bls.n	8002032 <runSystem+0x8aa>
				temp_time = 0;
 800202c:	4b48      	ldr	r3, [pc, #288]	; (8002150 <runSystem+0x9c8>)
 800202e:	2200      	movs	r2, #0
 8002030:	701a      	strb	r2, [r3, #0]
			}
			blink_state = 1;
 8002032:	4b50      	ldr	r3, [pc, #320]	; (8002174 <runSystem+0x9ec>)
 8002034:	2201      	movs	r2, #1
 8002036:	701a      	strb	r2, [r3, #0]
		}
		if(button_count[7] >= 40 && count_blink % 4 == 0){
 8002038:	4b4c      	ldr	r3, [pc, #304]	; (800216c <runSystem+0x9e4>)
 800203a:	89db      	ldrh	r3, [r3, #14]
 800203c:	2b27      	cmp	r3, #39	; 0x27
 800203e:	d916      	bls.n	800206e <runSystem+0x8e6>
 8002040:	4b4b      	ldr	r3, [pc, #300]	; (8002170 <runSystem+0x9e8>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	f003 0303 	and.w	r3, r3, #3
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d10f      	bne.n	800206e <runSystem+0x8e6>
			temp_time--;
 800204e:	4b40      	ldr	r3, [pc, #256]	; (8002150 <runSystem+0x9c8>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	3b01      	subs	r3, #1
 8002054:	b2da      	uxtb	r2, r3
 8002056:	4b3e      	ldr	r3, [pc, #248]	; (8002150 <runSystem+0x9c8>)
 8002058:	701a      	strb	r2, [r3, #0]
			if(temp_time <= 0){
 800205a:	4b3d      	ldr	r3, [pc, #244]	; (8002150 <runSystem+0x9c8>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d102      	bne.n	8002068 <runSystem+0x8e0>
				temp_time = 0;
 8002062:	4b3b      	ldr	r3, [pc, #236]	; (8002150 <runSystem+0x9c8>)
 8002064:	2200      	movs	r2, #0
 8002066:	701a      	strb	r2, [r3, #0]
			}
			blink_state = 1;
 8002068:	4b42      	ldr	r3, [pc, #264]	; (8002174 <runSystem+0x9ec>)
 800206a:	2201      	movs	r2, #1
 800206c:	701a      	strb	r2, [r3, #0]
		}
		if(button_count[12] == 1){
 800206e:	4b3f      	ldr	r3, [pc, #252]	; (800216c <runSystem+0x9e4>)
 8002070:	8b1b      	ldrh	r3, [r3, #24]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d115      	bne.n	80020a2 <runSystem+0x91a>
			ds3231_Write(ADDRESS_SEC, temp_time);
 8002076:	4b36      	ldr	r3, [pc, #216]	; (8002150 <runSystem+0x9c8>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	4619      	mov	r1, r3
 800207c:	2000      	movs	r0, #0
 800207e:	f7fe fadb 	bl	8000638 <ds3231_Write>
			count_blink = 0;
 8002082:	4b3b      	ldr	r3, [pc, #236]	; (8002170 <runSystem+0x9e8>)
 8002084:	2200      	movs	r2, #0
 8002086:	701a      	strb	r2, [r3, #0]
			blink_state = 0;
 8002088:	4b3a      	ldr	r3, [pc, #232]	; (8002174 <runSystem+0x9ec>)
 800208a:	2200      	movs	r2, #0
 800208c:	701a      	strb	r2, [r3, #0]
			temp_time = ds3231_hours;
 800208e:	4b31      	ldr	r3, [pc, #196]	; (8002154 <runSystem+0x9cc>)
 8002090:	781a      	ldrb	r2, [r3, #0]
 8002092:	4b2f      	ldr	r3, [pc, #188]	; (8002150 <runSystem+0x9c8>)
 8002094:	701a      	strb	r2, [r3, #0]
			systemState = ALARM_HOUR;
 8002096:	4b38      	ldr	r3, [pc, #224]	; (8002178 <runSystem+0x9f0>)
 8002098:	2205      	movs	r2, #5
 800209a:	601a      	str	r2, [r3, #0]
			lcd_Clear(BLACK);
 800209c:	2000      	movs	r0, #0
 800209e:	f7fe fe0d 	bl	8000cbc <lcd_Clear>
		}
		if(button_count[0] == 1){
 80020a2:	4b32      	ldr	r3, [pc, #200]	; (800216c <runSystem+0x9e4>)
 80020a4:	881b      	ldrh	r3, [r3, #0]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	f040 83a8 	bne.w	80027fc <runSystem+0x1074>
			count_blink = 0;
 80020ac:	4b30      	ldr	r3, [pc, #192]	; (8002170 <runSystem+0x9e8>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	701a      	strb	r2, [r3, #0]
			blink_state = 0;
 80020b2:	4b30      	ldr	r3, [pc, #192]	; (8002174 <runSystem+0x9ec>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	701a      	strb	r2, [r3, #0]
			temp_time = ds3231_hours;
 80020b8:	4b26      	ldr	r3, [pc, #152]	; (8002154 <runSystem+0x9cc>)
 80020ba:	781a      	ldrb	r2, [r3, #0]
 80020bc:	4b24      	ldr	r3, [pc, #144]	; (8002150 <runSystem+0x9c8>)
 80020be:	701a      	strb	r2, [r3, #0]
			systemState = ALARM_HOUR;
 80020c0:	4b2d      	ldr	r3, [pc, #180]	; (8002178 <runSystem+0x9f0>)
 80020c2:	2205      	movs	r2, #5
 80020c4:	601a      	str	r2, [r3, #0]
			lcd_Clear(BLACK);
 80020c6:	2000      	movs	r0, #0
 80020c8:	f7fe fdf8 	bl	8000cbc <lcd_Clear>
		}
		break;
 80020cc:	e396      	b.n	80027fc <runSystem+0x1074>
	case ALARM_HOUR:
		lcd_ShowStr(20, 30, "set Alarm - HOUR", WHITE, BLUE, 24, 0);
 80020ce:	2300      	movs	r3, #0
 80020d0:	9302      	str	r3, [sp, #8]
 80020d2:	2318      	movs	r3, #24
 80020d4:	9301      	str	r3, [sp, #4]
 80020d6:	231f      	movs	r3, #31
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020de:	4a27      	ldr	r2, [pc, #156]	; (800217c <runSystem+0x9f4>)
 80020e0:	211e      	movs	r1, #30
 80020e2:	2014      	movs	r0, #20
 80020e4:	f7ff f960 	bl	80013a8 <lcd_ShowStr>
		ds3231_Write(ADDRESS_SEC, ds3231_sec);
 80020e8:	4b25      	ldr	r3, [pc, #148]	; (8002180 <runSystem+0x9f8>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	4619      	mov	r1, r3
 80020ee:	2000      	movs	r0, #0
 80020f0:	f7fe faa2 	bl	8000638 <ds3231_Write>
		count_blink = count_blink + 1;
 80020f4:	4b1e      	ldr	r3, [pc, #120]	; (8002170 <runSystem+0x9e8>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	3301      	adds	r3, #1
 80020fa:	b2da      	uxtb	r2, r3
 80020fc:	4b1c      	ldr	r3, [pc, #112]	; (8002170 <runSystem+0x9e8>)
 80020fe:	701a      	strb	r2, [r3, #0]
		if(count_blink % 10 == 0){
 8002100:	4b1b      	ldr	r3, [pc, #108]	; (8002170 <runSystem+0x9e8>)
 8002102:	781a      	ldrb	r2, [r3, #0]
 8002104:	4b1f      	ldr	r3, [pc, #124]	; (8002184 <runSystem+0x9fc>)
 8002106:	fba3 1302 	umull	r1, r3, r3, r2
 800210a:	08d9      	lsrs	r1, r3, #3
 800210c:	460b      	mov	r3, r1
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	440b      	add	r3, r1
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	b2db      	uxtb	r3, r3
 8002118:	2b00      	cmp	r3, #0
 800211a:	d106      	bne.n	800212a <runSystem+0x9a2>
			blink_state ^= 1;
 800211c:	4b15      	ldr	r3, [pc, #84]	; (8002174 <runSystem+0x9ec>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	f083 0301 	eor.w	r3, r3, #1
 8002124:	b2da      	uxtb	r2, r3
 8002126:	4b13      	ldr	r3, [pc, #76]	; (8002174 <runSystem+0x9ec>)
 8002128:	701a      	strb	r2, [r3, #0]
		}
		if(blink_state == 0){
 800212a:	4b12      	ldr	r3, [pc, #72]	; (8002174 <runSystem+0x9ec>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d12c      	bne.n	800218c <runSystem+0xa04>
			lcd_ShowStr(70, 100, "  ", GREEN, BLACK, 24, 0);
 8002132:	2300      	movs	r3, #0
 8002134:	9302      	str	r3, [sp, #8]
 8002136:	2318      	movs	r3, #24
 8002138:	9301      	str	r3, [sp, #4]
 800213a:	2300      	movs	r3, #0
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002142:	4a11      	ldr	r2, [pc, #68]	; (8002188 <runSystem+0xa00>)
 8002144:	2164      	movs	r1, #100	; 0x64
 8002146:	2046      	movs	r0, #70	; 0x46
 8002148:	f7ff f92e 	bl	80013a8 <lcd_ShowStr>
 800214c:	e02d      	b.n	80021aa <runSystem+0xa22>
 800214e:	bf00      	nop
 8002150:	2000015b 	.word	0x2000015b
 8002154:	20000071 	.word	0x20000071
 8002158:	2000006e 	.word	0x2000006e
 800215c:	20000070 	.word	0x20000070
 8002160:	2000006f 	.word	0x2000006f
 8002164:	20000072 	.word	0x20000072
 8002168:	2000006d 	.word	0x2000006d
 800216c:	2000004c 	.word	0x2000004c
 8002170:	20000040 	.word	0x20000040
 8002174:	20000041 	.word	0x20000041
 8002178:	2000003c 	.word	0x2000003c
 800217c:	080065dc 	.word	0x080065dc
 8002180:	2000006c 	.word	0x2000006c
 8002184:	cccccccd 	.word	0xcccccccd
 8002188:	080065c0 	.word	0x080065c0
		}else{
			lcd_ShowIntNum(70, 100, temp_time, 2, GREEN, BLACK, 24);
 800218c:	4b99      	ldr	r3, [pc, #612]	; (80023f4 <runSystem+0xc6c>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	b29a      	uxth	r2, r3
 8002192:	2318      	movs	r3, #24
 8002194:	9302      	str	r3, [sp, #8]
 8002196:	2300      	movs	r3, #0
 8002198:	9301      	str	r3, [sp, #4]
 800219a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	2302      	movs	r3, #2
 80021a2:	2164      	movs	r1, #100	; 0x64
 80021a4:	2046      	movs	r0, #70	; 0x46
 80021a6:	f7fe fefd 	bl	8000fa4 <lcd_ShowIntNum>
		}
		lcd_ShowIntNum(110, 100, ds3231_min, 2, GREEN, BLACK, 24);
 80021aa:	4b93      	ldr	r3, [pc, #588]	; (80023f8 <runSystem+0xc70>)
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	2318      	movs	r3, #24
 80021b2:	9302      	str	r3, [sp, #8]
 80021b4:	2300      	movs	r3, #0
 80021b6:	9301      	str	r3, [sp, #4]
 80021b8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80021bc:	9300      	str	r3, [sp, #0]
 80021be:	2302      	movs	r3, #2
 80021c0:	2164      	movs	r1, #100	; 0x64
 80021c2:	206e      	movs	r0, #110	; 0x6e
 80021c4:	f7fe feee 	bl	8000fa4 <lcd_ShowIntNum>
		lcd_ShowIntNum(150, 100, ds3231_sec, 2, GREEN, BLACK, 24);
 80021c8:	4b8c      	ldr	r3, [pc, #560]	; (80023fc <runSystem+0xc74>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	2318      	movs	r3, #24
 80021d0:	9302      	str	r3, [sp, #8]
 80021d2:	2300      	movs	r3, #0
 80021d4:	9301      	str	r3, [sp, #4]
 80021d6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80021da:	9300      	str	r3, [sp, #0]
 80021dc:	2302      	movs	r3, #2
 80021de:	2164      	movs	r1, #100	; 0x64
 80021e0:	2096      	movs	r0, #150	; 0x96
 80021e2:	f7fe fedf 	bl	8000fa4 <lcd_ShowIntNum>
		lcd_ShowIntNum(20, 130, ds3231_day, 2, YELLOW, BLACK, 24);
 80021e6:	4b86      	ldr	r3, [pc, #536]	; (8002400 <runSystem+0xc78>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	2318      	movs	r3, #24
 80021ee:	9302      	str	r3, [sp, #8]
 80021f0:	2300      	movs	r3, #0
 80021f2:	9301      	str	r3, [sp, #4]
 80021f4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	2302      	movs	r3, #2
 80021fc:	2182      	movs	r1, #130	; 0x82
 80021fe:	2014      	movs	r0, #20
 8002200:	f7fe fed0 	bl	8000fa4 <lcd_ShowIntNum>
		lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 8002204:	4b7f      	ldr	r3, [pc, #508]	; (8002404 <runSystem+0xc7c>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	b29a      	uxth	r2, r3
 800220a:	2318      	movs	r3, #24
 800220c:	9302      	str	r3, [sp, #8]
 800220e:	2300      	movs	r3, #0
 8002210:	9301      	str	r3, [sp, #4]
 8002212:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002216:	9300      	str	r3, [sp, #0]
 8002218:	2302      	movs	r3, #2
 800221a:	2182      	movs	r1, #130	; 0x82
 800221c:	2046      	movs	r0, #70	; 0x46
 800221e:	f7fe fec1 	bl	8000fa4 <lcd_ShowIntNum>
		lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 8002222:	4b79      	ldr	r3, [pc, #484]	; (8002408 <runSystem+0xc80>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	b29a      	uxth	r2, r3
 8002228:	2318      	movs	r3, #24
 800222a:	9302      	str	r3, [sp, #8]
 800222c:	2300      	movs	r3, #0
 800222e:	9301      	str	r3, [sp, #4]
 8002230:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002234:	9300      	str	r3, [sp, #0]
 8002236:	2302      	movs	r3, #2
 8002238:	2182      	movs	r1, #130	; 0x82
 800223a:	206e      	movs	r0, #110	; 0x6e
 800223c:	f7fe feb2 	bl	8000fa4 <lcd_ShowIntNum>
		lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 8002240:	4b72      	ldr	r3, [pc, #456]	; (800240c <runSystem+0xc84>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	b29a      	uxth	r2, r3
 8002246:	2318      	movs	r3, #24
 8002248:	9302      	str	r3, [sp, #8]
 800224a:	2300      	movs	r3, #0
 800224c:	9301      	str	r3, [sp, #4]
 800224e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	2302      	movs	r3, #2
 8002256:	2182      	movs	r1, #130	; 0x82
 8002258:	2096      	movs	r0, #150	; 0x96
 800225a:	f7fe fea3 	bl	8000fa4 <lcd_ShowIntNum>
		if(isButtonUp()){
 800225e:	f7ff fa73 	bl	8001748 <isButtonUp>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d00c      	beq.n	8002282 <runSystem+0xafa>
			temp_time++;
 8002268:	4b62      	ldr	r3, [pc, #392]	; (80023f4 <runSystem+0xc6c>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	3301      	adds	r3, #1
 800226e:	b2da      	uxtb	r2, r3
 8002270:	4b60      	ldr	r3, [pc, #384]	; (80023f4 <runSystem+0xc6c>)
 8002272:	701a      	strb	r2, [r3, #0]
			if(temp_time >= 24){
 8002274:	4b5f      	ldr	r3, [pc, #380]	; (80023f4 <runSystem+0xc6c>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	2b17      	cmp	r3, #23
 800227a:	d902      	bls.n	8002282 <runSystem+0xafa>
				temp_time = 0;
 800227c:	4b5d      	ldr	r3, [pc, #372]	; (80023f4 <runSystem+0xc6c>)
 800227e:	2200      	movs	r2, #0
 8002280:	701a      	strb	r2, [r3, #0]
			}
		}
		if(isButtonDown()){
 8002282:	f7ff fa71 	bl	8001768 <isButtonDown>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d00c      	beq.n	80022a6 <runSystem+0xb1e>
			temp_time--;
 800228c:	4b59      	ldr	r3, [pc, #356]	; (80023f4 <runSystem+0xc6c>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	3b01      	subs	r3, #1
 8002292:	b2da      	uxtb	r2, r3
 8002294:	4b57      	ldr	r3, [pc, #348]	; (80023f4 <runSystem+0xc6c>)
 8002296:	701a      	strb	r2, [r3, #0]
			if(temp_time <= 0){
 8002298:	4b56      	ldr	r3, [pc, #344]	; (80023f4 <runSystem+0xc6c>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d102      	bne.n	80022a6 <runSystem+0xb1e>
				temp_time = 0;
 80022a0:	4b54      	ldr	r3, [pc, #336]	; (80023f4 <runSystem+0xc6c>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	701a      	strb	r2, [r3, #0]
			}
		}
		if(button_count[3] >= 40 && count_blink % 4 == 0){
 80022a6:	4b5a      	ldr	r3, [pc, #360]	; (8002410 <runSystem+0xc88>)
 80022a8:	88db      	ldrh	r3, [r3, #6]
 80022aa:	2b27      	cmp	r3, #39	; 0x27
 80022ac:	d916      	bls.n	80022dc <runSystem+0xb54>
 80022ae:	4b59      	ldr	r3, [pc, #356]	; (8002414 <runSystem+0xc8c>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	f003 0303 	and.w	r3, r3, #3
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d10f      	bne.n	80022dc <runSystem+0xb54>
			temp_time++;
 80022bc:	4b4d      	ldr	r3, [pc, #308]	; (80023f4 <runSystem+0xc6c>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	3301      	adds	r3, #1
 80022c2:	b2da      	uxtb	r2, r3
 80022c4:	4b4b      	ldr	r3, [pc, #300]	; (80023f4 <runSystem+0xc6c>)
 80022c6:	701a      	strb	r2, [r3, #0]
			if(temp_time >= 24){
 80022c8:	4b4a      	ldr	r3, [pc, #296]	; (80023f4 <runSystem+0xc6c>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	2b17      	cmp	r3, #23
 80022ce:	d902      	bls.n	80022d6 <runSystem+0xb4e>
				temp_time = 0;
 80022d0:	4b48      	ldr	r3, [pc, #288]	; (80023f4 <runSystem+0xc6c>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	701a      	strb	r2, [r3, #0]
			}
			blink_state = 1;
 80022d6:	4b50      	ldr	r3, [pc, #320]	; (8002418 <runSystem+0xc90>)
 80022d8:	2201      	movs	r2, #1
 80022da:	701a      	strb	r2, [r3, #0]
		}
		if(button_count[7] >= 40 && count_blink % 4 == 0){
 80022dc:	4b4c      	ldr	r3, [pc, #304]	; (8002410 <runSystem+0xc88>)
 80022de:	89db      	ldrh	r3, [r3, #14]
 80022e0:	2b27      	cmp	r3, #39	; 0x27
 80022e2:	d916      	bls.n	8002312 <runSystem+0xb8a>
 80022e4:	4b4b      	ldr	r3, [pc, #300]	; (8002414 <runSystem+0xc8c>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	f003 0303 	and.w	r3, r3, #3
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d10f      	bne.n	8002312 <runSystem+0xb8a>
			temp_time--;
 80022f2:	4b40      	ldr	r3, [pc, #256]	; (80023f4 <runSystem+0xc6c>)
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	3b01      	subs	r3, #1
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	4b3e      	ldr	r3, [pc, #248]	; (80023f4 <runSystem+0xc6c>)
 80022fc:	701a      	strb	r2, [r3, #0]
			if(temp_time <= 0){
 80022fe:	4b3d      	ldr	r3, [pc, #244]	; (80023f4 <runSystem+0xc6c>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d102      	bne.n	800230c <runSystem+0xb84>
				temp_time = 0;
 8002306:	4b3b      	ldr	r3, [pc, #236]	; (80023f4 <runSystem+0xc6c>)
 8002308:	2200      	movs	r2, #0
 800230a:	701a      	strb	r2, [r3, #0]
			}
			blink_state = 1;
 800230c:	4b42      	ldr	r3, [pc, #264]	; (8002418 <runSystem+0xc90>)
 800230e:	2201      	movs	r2, #1
 8002310:	701a      	strb	r2, [r3, #0]
		}
		if(button_count[12] == 1){
 8002312:	4b3f      	ldr	r3, [pc, #252]	; (8002410 <runSystem+0xc88>)
 8002314:	8b1b      	ldrh	r3, [r3, #24]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d116      	bne.n	8002348 <runSystem+0xbc0>
			alarm_hour = temp_time;
 800231a:	4b36      	ldr	r3, [pc, #216]	; (80023f4 <runSystem+0xc6c>)
 800231c:	781a      	ldrb	r2, [r3, #0]
 800231e:	4b3f      	ldr	r3, [pc, #252]	; (800241c <runSystem+0xc94>)
 8002320:	701a      	strb	r2, [r3, #0]
			hour_alarm_flag = 1;
 8002322:	4b3f      	ldr	r3, [pc, #252]	; (8002420 <runSystem+0xc98>)
 8002324:	2201      	movs	r2, #1
 8002326:	701a      	strb	r2, [r3, #0]
			count_blink = 0;
 8002328:	4b3a      	ldr	r3, [pc, #232]	; (8002414 <runSystem+0xc8c>)
 800232a:	2200      	movs	r2, #0
 800232c:	701a      	strb	r2, [r3, #0]
			blink_state = 0;
 800232e:	4b3a      	ldr	r3, [pc, #232]	; (8002418 <runSystem+0xc90>)
 8002330:	2200      	movs	r2, #0
 8002332:	701a      	strb	r2, [r3, #0]
			temp_time = ds3231_min;
 8002334:	4b30      	ldr	r3, [pc, #192]	; (80023f8 <runSystem+0xc70>)
 8002336:	781a      	ldrb	r2, [r3, #0]
 8002338:	4b2e      	ldr	r3, [pc, #184]	; (80023f4 <runSystem+0xc6c>)
 800233a:	701a      	strb	r2, [r3, #0]
			systemState = ALARM_MIN;
 800233c:	4b39      	ldr	r3, [pc, #228]	; (8002424 <runSystem+0xc9c>)
 800233e:	2206      	movs	r2, #6
 8002340:	601a      	str	r2, [r3, #0]
			lcd_Clear(BLACK);
 8002342:	2000      	movs	r0, #0
 8002344:	f7fe fcba 	bl	8000cbc <lcd_Clear>
		}
		if(button_count[0] == 1){
 8002348:	4b31      	ldr	r3, [pc, #196]	; (8002410 <runSystem+0xc88>)
 800234a:	881b      	ldrh	r3, [r3, #0]
 800234c:	2b01      	cmp	r3, #1
 800234e:	f040 8257 	bne.w	8002800 <runSystem+0x1078>
			count_blink = 0;
 8002352:	4b30      	ldr	r3, [pc, #192]	; (8002414 <runSystem+0xc8c>)
 8002354:	2200      	movs	r2, #0
 8002356:	701a      	strb	r2, [r3, #0]
			blink_state = 0;
 8002358:	4b2f      	ldr	r3, [pc, #188]	; (8002418 <runSystem+0xc90>)
 800235a:	2200      	movs	r2, #0
 800235c:	701a      	strb	r2, [r3, #0]
			temp_time = ds3231_min;
 800235e:	4b26      	ldr	r3, [pc, #152]	; (80023f8 <runSystem+0xc70>)
 8002360:	781a      	ldrb	r2, [r3, #0]
 8002362:	4b24      	ldr	r3, [pc, #144]	; (80023f4 <runSystem+0xc6c>)
 8002364:	701a      	strb	r2, [r3, #0]
			systemState = ALARM_MIN;
 8002366:	4b2f      	ldr	r3, [pc, #188]	; (8002424 <runSystem+0xc9c>)
 8002368:	2206      	movs	r2, #6
 800236a:	601a      	str	r2, [r3, #0]
			lcd_Clear(BLACK);
 800236c:	2000      	movs	r0, #0
 800236e:	f7fe fca5 	bl	8000cbc <lcd_Clear>
		}
		break;
 8002372:	e245      	b.n	8002800 <runSystem+0x1078>
	case ALARM_MIN:
		lcd_ShowStr(20, 30, "set Alarm - MIN", WHITE, BLUE, 24, 0);
 8002374:	2300      	movs	r3, #0
 8002376:	9302      	str	r3, [sp, #8]
 8002378:	2318      	movs	r3, #24
 800237a:	9301      	str	r3, [sp, #4]
 800237c:	231f      	movs	r3, #31
 800237e:	9300      	str	r3, [sp, #0]
 8002380:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002384:	4a28      	ldr	r2, [pc, #160]	; (8002428 <runSystem+0xca0>)
 8002386:	211e      	movs	r1, #30
 8002388:	2014      	movs	r0, #20
 800238a:	f7ff f80d 	bl	80013a8 <lcd_ShowStr>
		ds3231_Write(ADDRESS_SEC, ds3231_sec);
 800238e:	4b1b      	ldr	r3, [pc, #108]	; (80023fc <runSystem+0xc74>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	4619      	mov	r1, r3
 8002394:	2000      	movs	r0, #0
 8002396:	f7fe f94f 	bl	8000638 <ds3231_Write>
		count_blink = count_blink + 1;
 800239a:	4b1e      	ldr	r3, [pc, #120]	; (8002414 <runSystem+0xc8c>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	3301      	adds	r3, #1
 80023a0:	b2da      	uxtb	r2, r3
 80023a2:	4b1c      	ldr	r3, [pc, #112]	; (8002414 <runSystem+0xc8c>)
 80023a4:	701a      	strb	r2, [r3, #0]
		if(count_blink % 10 == 0){
 80023a6:	4b1b      	ldr	r3, [pc, #108]	; (8002414 <runSystem+0xc8c>)
 80023a8:	781a      	ldrb	r2, [r3, #0]
 80023aa:	4b20      	ldr	r3, [pc, #128]	; (800242c <runSystem+0xca4>)
 80023ac:	fba3 1302 	umull	r1, r3, r3, r2
 80023b0:	08d9      	lsrs	r1, r3, #3
 80023b2:	460b      	mov	r3, r1
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	440b      	add	r3, r1
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d106      	bne.n	80023d0 <runSystem+0xc48>
			blink_state ^= 1;
 80023c2:	4b15      	ldr	r3, [pc, #84]	; (8002418 <runSystem+0xc90>)
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	f083 0301 	eor.w	r3, r3, #1
 80023ca:	b2da      	uxtb	r2, r3
 80023cc:	4b12      	ldr	r3, [pc, #72]	; (8002418 <runSystem+0xc90>)
 80023ce:	701a      	strb	r2, [r3, #0]
		}
		if(blink_state == 0){
 80023d0:	4b11      	ldr	r3, [pc, #68]	; (8002418 <runSystem+0xc90>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d12d      	bne.n	8002434 <runSystem+0xcac>
			lcd_ShowStr(110, 100, "  ", GREEN, BLACK, 24, 0);
 80023d8:	2300      	movs	r3, #0
 80023da:	9302      	str	r3, [sp, #8]
 80023dc:	2318      	movs	r3, #24
 80023de:	9301      	str	r3, [sp, #4]
 80023e0:	2300      	movs	r3, #0
 80023e2:	9300      	str	r3, [sp, #0]
 80023e4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80023e8:	4a11      	ldr	r2, [pc, #68]	; (8002430 <runSystem+0xca8>)
 80023ea:	2164      	movs	r1, #100	; 0x64
 80023ec:	206e      	movs	r0, #110	; 0x6e
 80023ee:	f7fe ffdb 	bl	80013a8 <lcd_ShowStr>
 80023f2:	e02e      	b.n	8002452 <runSystem+0xcca>
 80023f4:	2000015b 	.word	0x2000015b
 80023f8:	2000006e 	.word	0x2000006e
 80023fc:	2000006c 	.word	0x2000006c
 8002400:	20000070 	.word	0x20000070
 8002404:	2000006f 	.word	0x2000006f
 8002408:	20000072 	.word	0x20000072
 800240c:	2000006d 	.word	0x2000006d
 8002410:	2000004c 	.word	0x2000004c
 8002414:	20000040 	.word	0x20000040
 8002418:	20000041 	.word	0x20000041
 800241c:	2000015a 	.word	0x2000015a
 8002420:	20000043 	.word	0x20000043
 8002424:	2000003c 	.word	0x2000003c
 8002428:	080065f0 	.word	0x080065f0
 800242c:	cccccccd 	.word	0xcccccccd
 8002430:	080065c0 	.word	0x080065c0
		}else{
			lcd_ShowIntNum(110, 100, temp_time, 2, GREEN, BLACK, 24);
 8002434:	4ba1      	ldr	r3, [pc, #644]	; (80026bc <runSystem+0xf34>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	b29a      	uxth	r2, r3
 800243a:	2318      	movs	r3, #24
 800243c:	9302      	str	r3, [sp, #8]
 800243e:	2300      	movs	r3, #0
 8002440:	9301      	str	r3, [sp, #4]
 8002442:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002446:	9300      	str	r3, [sp, #0]
 8002448:	2302      	movs	r3, #2
 800244a:	2164      	movs	r1, #100	; 0x64
 800244c:	206e      	movs	r0, #110	; 0x6e
 800244e:	f7fe fda9 	bl	8000fa4 <lcd_ShowIntNum>
		}
		lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 24);
 8002452:	4b9b      	ldr	r3, [pc, #620]	; (80026c0 <runSystem+0xf38>)
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	b29a      	uxth	r2, r3
 8002458:	2318      	movs	r3, #24
 800245a:	9302      	str	r3, [sp, #8]
 800245c:	2300      	movs	r3, #0
 800245e:	9301      	str	r3, [sp, #4]
 8002460:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	2302      	movs	r3, #2
 8002468:	2164      	movs	r1, #100	; 0x64
 800246a:	2046      	movs	r0, #70	; 0x46
 800246c:	f7fe fd9a 	bl	8000fa4 <lcd_ShowIntNum>
		lcd_ShowIntNum(150, 100, ds3231_sec, 2, GREEN, BLACK, 24);
 8002470:	4b94      	ldr	r3, [pc, #592]	; (80026c4 <runSystem+0xf3c>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	b29a      	uxth	r2, r3
 8002476:	2318      	movs	r3, #24
 8002478:	9302      	str	r3, [sp, #8]
 800247a:	2300      	movs	r3, #0
 800247c:	9301      	str	r3, [sp, #4]
 800247e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002482:	9300      	str	r3, [sp, #0]
 8002484:	2302      	movs	r3, #2
 8002486:	2164      	movs	r1, #100	; 0x64
 8002488:	2096      	movs	r0, #150	; 0x96
 800248a:	f7fe fd8b 	bl	8000fa4 <lcd_ShowIntNum>
		lcd_ShowIntNum(20, 130, ds3231_day, 2, YELLOW, BLACK, 24);
 800248e:	4b8e      	ldr	r3, [pc, #568]	; (80026c8 <runSystem+0xf40>)
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	b29a      	uxth	r2, r3
 8002494:	2318      	movs	r3, #24
 8002496:	9302      	str	r3, [sp, #8]
 8002498:	2300      	movs	r3, #0
 800249a:	9301      	str	r3, [sp, #4]
 800249c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80024a0:	9300      	str	r3, [sp, #0]
 80024a2:	2302      	movs	r3, #2
 80024a4:	2182      	movs	r1, #130	; 0x82
 80024a6:	2014      	movs	r0, #20
 80024a8:	f7fe fd7c 	bl	8000fa4 <lcd_ShowIntNum>
		lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 80024ac:	4b87      	ldr	r3, [pc, #540]	; (80026cc <runSystem+0xf44>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	2318      	movs	r3, #24
 80024b4:	9302      	str	r3, [sp, #8]
 80024b6:	2300      	movs	r3, #0
 80024b8:	9301      	str	r3, [sp, #4]
 80024ba:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80024be:	9300      	str	r3, [sp, #0]
 80024c0:	2302      	movs	r3, #2
 80024c2:	2182      	movs	r1, #130	; 0x82
 80024c4:	2046      	movs	r0, #70	; 0x46
 80024c6:	f7fe fd6d 	bl	8000fa4 <lcd_ShowIntNum>
		lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 80024ca:	4b81      	ldr	r3, [pc, #516]	; (80026d0 <runSystem+0xf48>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	2318      	movs	r3, #24
 80024d2:	9302      	str	r3, [sp, #8]
 80024d4:	2300      	movs	r3, #0
 80024d6:	9301      	str	r3, [sp, #4]
 80024d8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80024dc:	9300      	str	r3, [sp, #0]
 80024de:	2302      	movs	r3, #2
 80024e0:	2182      	movs	r1, #130	; 0x82
 80024e2:	206e      	movs	r0, #110	; 0x6e
 80024e4:	f7fe fd5e 	bl	8000fa4 <lcd_ShowIntNum>
		lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 80024e8:	4b7a      	ldr	r3, [pc, #488]	; (80026d4 <runSystem+0xf4c>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	2318      	movs	r3, #24
 80024f0:	9302      	str	r3, [sp, #8]
 80024f2:	2300      	movs	r3, #0
 80024f4:	9301      	str	r3, [sp, #4]
 80024f6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80024fa:	9300      	str	r3, [sp, #0]
 80024fc:	2302      	movs	r3, #2
 80024fe:	2182      	movs	r1, #130	; 0x82
 8002500:	2096      	movs	r0, #150	; 0x96
 8002502:	f7fe fd4f 	bl	8000fa4 <lcd_ShowIntNum>
		if(isButtonUp()){
 8002506:	f7ff f91f 	bl	8001748 <isButtonUp>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d00c      	beq.n	800252a <runSystem+0xda2>
			temp_time++;
 8002510:	4b6a      	ldr	r3, [pc, #424]	; (80026bc <runSystem+0xf34>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	3301      	adds	r3, #1
 8002516:	b2da      	uxtb	r2, r3
 8002518:	4b68      	ldr	r3, [pc, #416]	; (80026bc <runSystem+0xf34>)
 800251a:	701a      	strb	r2, [r3, #0]
			if(temp_time >= 60){
 800251c:	4b67      	ldr	r3, [pc, #412]	; (80026bc <runSystem+0xf34>)
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	2b3b      	cmp	r3, #59	; 0x3b
 8002522:	d902      	bls.n	800252a <runSystem+0xda2>
				temp_time = 0;
 8002524:	4b65      	ldr	r3, [pc, #404]	; (80026bc <runSystem+0xf34>)
 8002526:	2200      	movs	r2, #0
 8002528:	701a      	strb	r2, [r3, #0]
			}
		}
		if(isButtonDown()){
 800252a:	f7ff f91d 	bl	8001768 <isButtonDown>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d00c      	beq.n	800254e <runSystem+0xdc6>
			temp_time--;
 8002534:	4b61      	ldr	r3, [pc, #388]	; (80026bc <runSystem+0xf34>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	3b01      	subs	r3, #1
 800253a:	b2da      	uxtb	r2, r3
 800253c:	4b5f      	ldr	r3, [pc, #380]	; (80026bc <runSystem+0xf34>)
 800253e:	701a      	strb	r2, [r3, #0]
			if(temp_time <= 0){
 8002540:	4b5e      	ldr	r3, [pc, #376]	; (80026bc <runSystem+0xf34>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d102      	bne.n	800254e <runSystem+0xdc6>
				temp_time = 0;
 8002548:	4b5c      	ldr	r3, [pc, #368]	; (80026bc <runSystem+0xf34>)
 800254a:	2200      	movs	r2, #0
 800254c:	701a      	strb	r2, [r3, #0]
			}
		}
		if(button_count[3] >= 40 && count_blink % 4 == 0){
 800254e:	4b62      	ldr	r3, [pc, #392]	; (80026d8 <runSystem+0xf50>)
 8002550:	88db      	ldrh	r3, [r3, #6]
 8002552:	2b27      	cmp	r3, #39	; 0x27
 8002554:	d916      	bls.n	8002584 <runSystem+0xdfc>
 8002556:	4b61      	ldr	r3, [pc, #388]	; (80026dc <runSystem+0xf54>)
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	f003 0303 	and.w	r3, r3, #3
 800255e:	b2db      	uxtb	r3, r3
 8002560:	2b00      	cmp	r3, #0
 8002562:	d10f      	bne.n	8002584 <runSystem+0xdfc>
			temp_time++;
 8002564:	4b55      	ldr	r3, [pc, #340]	; (80026bc <runSystem+0xf34>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	3301      	adds	r3, #1
 800256a:	b2da      	uxtb	r2, r3
 800256c:	4b53      	ldr	r3, [pc, #332]	; (80026bc <runSystem+0xf34>)
 800256e:	701a      	strb	r2, [r3, #0]
			if(temp_time >= 60){
 8002570:	4b52      	ldr	r3, [pc, #328]	; (80026bc <runSystem+0xf34>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	2b3b      	cmp	r3, #59	; 0x3b
 8002576:	d902      	bls.n	800257e <runSystem+0xdf6>
				temp_time = 0;
 8002578:	4b50      	ldr	r3, [pc, #320]	; (80026bc <runSystem+0xf34>)
 800257a:	2200      	movs	r2, #0
 800257c:	701a      	strb	r2, [r3, #0]
			}
			blink_state = 1;
 800257e:	4b58      	ldr	r3, [pc, #352]	; (80026e0 <runSystem+0xf58>)
 8002580:	2201      	movs	r2, #1
 8002582:	701a      	strb	r2, [r3, #0]
		}
		if(button_count[7] >= 40 && count_blink % 4 == 0){
 8002584:	4b54      	ldr	r3, [pc, #336]	; (80026d8 <runSystem+0xf50>)
 8002586:	89db      	ldrh	r3, [r3, #14]
 8002588:	2b27      	cmp	r3, #39	; 0x27
 800258a:	d916      	bls.n	80025ba <runSystem+0xe32>
 800258c:	4b53      	ldr	r3, [pc, #332]	; (80026dc <runSystem+0xf54>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	f003 0303 	and.w	r3, r3, #3
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d10f      	bne.n	80025ba <runSystem+0xe32>
			temp_time--;
 800259a:	4b48      	ldr	r3, [pc, #288]	; (80026bc <runSystem+0xf34>)
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	3b01      	subs	r3, #1
 80025a0:	b2da      	uxtb	r2, r3
 80025a2:	4b46      	ldr	r3, [pc, #280]	; (80026bc <runSystem+0xf34>)
 80025a4:	701a      	strb	r2, [r3, #0]
			if(temp_time <= 0){
 80025a6:	4b45      	ldr	r3, [pc, #276]	; (80026bc <runSystem+0xf34>)
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d102      	bne.n	80025b4 <runSystem+0xe2c>
				temp_time = 0;
 80025ae:	4b43      	ldr	r3, [pc, #268]	; (80026bc <runSystem+0xf34>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	701a      	strb	r2, [r3, #0]
			}
			blink_state = 1;
 80025b4:	4b4a      	ldr	r3, [pc, #296]	; (80026e0 <runSystem+0xf58>)
 80025b6:	2201      	movs	r2, #1
 80025b8:	701a      	strb	r2, [r3, #0]
		}
		if(button_count[12] == 1){
 80025ba:	4b47      	ldr	r3, [pc, #284]	; (80026d8 <runSystem+0xf50>)
 80025bc:	8b1b      	ldrh	r3, [r3, #24]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d112      	bne.n	80025e8 <runSystem+0xe60>
			alarm_min = temp_time;
 80025c2:	4b3e      	ldr	r3, [pc, #248]	; (80026bc <runSystem+0xf34>)
 80025c4:	781a      	ldrb	r2, [r3, #0]
 80025c6:	4b47      	ldr	r3, [pc, #284]	; (80026e4 <runSystem+0xf5c>)
 80025c8:	701a      	strb	r2, [r3, #0]
			min_alarm_flag = 1;
 80025ca:	4b47      	ldr	r3, [pc, #284]	; (80026e8 <runSystem+0xf60>)
 80025cc:	2201      	movs	r2, #1
 80025ce:	701a      	strb	r2, [r3, #0]
			count_blink = 0;
 80025d0:	4b42      	ldr	r3, [pc, #264]	; (80026dc <runSystem+0xf54>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	701a      	strb	r2, [r3, #0]
			blink_state = 0;
 80025d6:	4b42      	ldr	r3, [pc, #264]	; (80026e0 <runSystem+0xf58>)
 80025d8:	2200      	movs	r2, #0
 80025da:	701a      	strb	r2, [r3, #0]
			systemState = CHECK_ALARM;
 80025dc:	4b43      	ldr	r3, [pc, #268]	; (80026ec <runSystem+0xf64>)
 80025de:	2208      	movs	r2, #8
 80025e0:	601a      	str	r2, [r3, #0]
			lcd_Clear(BLACK);
 80025e2:	2000      	movs	r0, #0
 80025e4:	f7fe fb6a 	bl	8000cbc <lcd_Clear>
		}
		if(button_count[0] == 1){
 80025e8:	4b3b      	ldr	r3, [pc, #236]	; (80026d8 <runSystem+0xf50>)
 80025ea:	881b      	ldrh	r3, [r3, #0]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	f040 8109 	bne.w	8002804 <runSystem+0x107c>
			count_blink = 0;
 80025f2:	4b3a      	ldr	r3, [pc, #232]	; (80026dc <runSystem+0xf54>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	701a      	strb	r2, [r3, #0]
			blink_state = 0;
 80025f8:	4b39      	ldr	r3, [pc, #228]	; (80026e0 <runSystem+0xf58>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	701a      	strb	r2, [r3, #0]
			systemState = CHECK_ALARM;
 80025fe:	4b3b      	ldr	r3, [pc, #236]	; (80026ec <runSystem+0xf64>)
 8002600:	2208      	movs	r2, #8
 8002602:	601a      	str	r2, [r3, #0]
			lcd_Clear(BLACK);
 8002604:	2000      	movs	r0, #0
 8002606:	f7fe fb59 	bl	8000cbc <lcd_Clear>
		}
		break;
 800260a:	e0fb      	b.n	8002804 <runSystem+0x107c>
	case CHECK_ALARM:
		count_blink = count_blink + 1;
 800260c:	4b33      	ldr	r3, [pc, #204]	; (80026dc <runSystem+0xf54>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	3301      	adds	r3, #1
 8002612:	b2da      	uxtb	r2, r3
 8002614:	4b31      	ldr	r3, [pc, #196]	; (80026dc <runSystem+0xf54>)
 8002616:	701a      	strb	r2, [r3, #0]
		if(hour_alarm_flag == 1 && min_alarm_flag == 1){
 8002618:	4b35      	ldr	r3, [pc, #212]	; (80026f0 <runSystem+0xf68>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d173      	bne.n	8002708 <runSystem+0xf80>
 8002620:	4b31      	ldr	r3, [pc, #196]	; (80026e8 <runSystem+0xf60>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d16f      	bne.n	8002708 <runSystem+0xf80>
			lcd_ShowStr(20, 30, "set Alarm Success", WHITE, BLUE, 24, 0);
 8002628:	2300      	movs	r3, #0
 800262a:	9302      	str	r3, [sp, #8]
 800262c:	2318      	movs	r3, #24
 800262e:	9301      	str	r3, [sp, #4]
 8002630:	231f      	movs	r3, #31
 8002632:	9300      	str	r3, [sp, #0]
 8002634:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002638:	4a2e      	ldr	r2, [pc, #184]	; (80026f4 <runSystem+0xf6c>)
 800263a:	211e      	movs	r1, #30
 800263c:	2014      	movs	r0, #20
 800263e:	f7fe feb3 	bl	80013a8 <lcd_ShowStr>
			lcd_ShowStr(20, 60, "HOUR: ", WHITE, BLACK, 24, 0);
 8002642:	2300      	movs	r3, #0
 8002644:	9302      	str	r3, [sp, #8]
 8002646:	2318      	movs	r3, #24
 8002648:	9301      	str	r3, [sp, #4]
 800264a:	2300      	movs	r3, #0
 800264c:	9300      	str	r3, [sp, #0]
 800264e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002652:	4a29      	ldr	r2, [pc, #164]	; (80026f8 <runSystem+0xf70>)
 8002654:	213c      	movs	r1, #60	; 0x3c
 8002656:	2014      	movs	r0, #20
 8002658:	f7fe fea6 	bl	80013a8 <lcd_ShowStr>
			lcd_ShowIntNum(100, 60, alarm_hour, 2, GREEN, BLACK, 24);
 800265c:	4b27      	ldr	r3, [pc, #156]	; (80026fc <runSystem+0xf74>)
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	b29a      	uxth	r2, r3
 8002662:	2318      	movs	r3, #24
 8002664:	9302      	str	r3, [sp, #8]
 8002666:	2300      	movs	r3, #0
 8002668:	9301      	str	r3, [sp, #4]
 800266a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800266e:	9300      	str	r3, [sp, #0]
 8002670:	2302      	movs	r3, #2
 8002672:	213c      	movs	r1, #60	; 0x3c
 8002674:	2064      	movs	r0, #100	; 0x64
 8002676:	f7fe fc95 	bl	8000fa4 <lcd_ShowIntNum>
			lcd_ShowStr(20, 90, "MIN: ", WHITE, BLACK, 24, 0);
 800267a:	2300      	movs	r3, #0
 800267c:	9302      	str	r3, [sp, #8]
 800267e:	2318      	movs	r3, #24
 8002680:	9301      	str	r3, [sp, #4]
 8002682:	2300      	movs	r3, #0
 8002684:	9300      	str	r3, [sp, #0]
 8002686:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800268a:	4a1d      	ldr	r2, [pc, #116]	; (8002700 <runSystem+0xf78>)
 800268c:	215a      	movs	r1, #90	; 0x5a
 800268e:	2014      	movs	r0, #20
 8002690:	f7fe fe8a 	bl	80013a8 <lcd_ShowStr>
			lcd_ShowIntNum(100, 90, alarm_min, 2, GREEN, BLACK, 24);
 8002694:	4b13      	ldr	r3, [pc, #76]	; (80026e4 <runSystem+0xf5c>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	b29a      	uxth	r2, r3
 800269a:	2318      	movs	r3, #24
 800269c:	9302      	str	r3, [sp, #8]
 800269e:	2300      	movs	r3, #0
 80026a0:	9301      	str	r3, [sp, #4]
 80026a2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80026a6:	9300      	str	r3, [sp, #0]
 80026a8:	2302      	movs	r3, #2
 80026aa:	215a      	movs	r1, #90	; 0x5a
 80026ac:	2064      	movs	r0, #100	; 0x64
 80026ae:	f7fe fc79 	bl	8000fa4 <lcd_ShowIntNum>
			set_alarm_flag = 1;
 80026b2:	4b14      	ldr	r3, [pc, #80]	; (8002704 <runSystem+0xf7c>)
 80026b4:	2201      	movs	r2, #1
 80026b6:	701a      	strb	r2, [r3, #0]
 80026b8:	e079      	b.n	80027ae <runSystem+0x1026>
 80026ba:	bf00      	nop
 80026bc:	2000015b 	.word	0x2000015b
 80026c0:	20000071 	.word	0x20000071
 80026c4:	2000006c 	.word	0x2000006c
 80026c8:	20000070 	.word	0x20000070
 80026cc:	2000006f 	.word	0x2000006f
 80026d0:	20000072 	.word	0x20000072
 80026d4:	2000006d 	.word	0x2000006d
 80026d8:	2000004c 	.word	0x2000004c
 80026dc:	20000040 	.word	0x20000040
 80026e0:	20000041 	.word	0x20000041
 80026e4:	2000015c 	.word	0x2000015c
 80026e8:	20000044 	.word	0x20000044
 80026ec:	2000003c 	.word	0x2000003c
 80026f0:	20000043 	.word	0x20000043
 80026f4:	08006600 	.word	0x08006600
 80026f8:	08006614 	.word	0x08006614
 80026fc:	2000015a 	.word	0x2000015a
 8002700:	0800661c 	.word	0x0800661c
 8002704:	20000042 	.word	0x20000042
		}else if(hour_alarm_flag == 0 && min_alarm_flag == 1){
 8002708:	4b40      	ldr	r3, [pc, #256]	; (800280c <runSystem+0x1084>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d11e      	bne.n	800274e <runSystem+0xfc6>
 8002710:	4b3f      	ldr	r3, [pc, #252]	; (8002810 <runSystem+0x1088>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d11a      	bne.n	800274e <runSystem+0xfc6>
			lcd_ShowStr(20, 30, "Not set alarm", WHITE, BLUE, 24, 0);
 8002718:	2300      	movs	r3, #0
 800271a:	9302      	str	r3, [sp, #8]
 800271c:	2318      	movs	r3, #24
 800271e:	9301      	str	r3, [sp, #4]
 8002720:	231f      	movs	r3, #31
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002728:	4a3a      	ldr	r2, [pc, #232]	; (8002814 <runSystem+0x108c>)
 800272a:	211e      	movs	r1, #30
 800272c:	2014      	movs	r0, #20
 800272e:	f7fe fe3b 	bl	80013a8 <lcd_ShowStr>
			lcd_ShowStr(22, 60, "hour yet", WHITE, BLUE, 24, 0);
 8002732:	2300      	movs	r3, #0
 8002734:	9302      	str	r3, [sp, #8]
 8002736:	2318      	movs	r3, #24
 8002738:	9301      	str	r3, [sp, #4]
 800273a:	231f      	movs	r3, #31
 800273c:	9300      	str	r3, [sp, #0]
 800273e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002742:	4a35      	ldr	r2, [pc, #212]	; (8002818 <runSystem+0x1090>)
 8002744:	213c      	movs	r1, #60	; 0x3c
 8002746:	2016      	movs	r0, #22
 8002748:	f7fe fe2e 	bl	80013a8 <lcd_ShowStr>
 800274c:	e02f      	b.n	80027ae <runSystem+0x1026>
		}else if(hour_alarm_flag == 1 && min_alarm_flag == 0){
 800274e:	4b2f      	ldr	r3, [pc, #188]	; (800280c <runSystem+0x1084>)
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d11e      	bne.n	8002794 <runSystem+0x100c>
 8002756:	4b2e      	ldr	r3, [pc, #184]	; (8002810 <runSystem+0x1088>)
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d11a      	bne.n	8002794 <runSystem+0x100c>
			lcd_ShowStr(20, 30, "Not set alarm", WHITE, BLUE, 24, 0);
 800275e:	2300      	movs	r3, #0
 8002760:	9302      	str	r3, [sp, #8]
 8002762:	2318      	movs	r3, #24
 8002764:	9301      	str	r3, [sp, #4]
 8002766:	231f      	movs	r3, #31
 8002768:	9300      	str	r3, [sp, #0]
 800276a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800276e:	4a29      	ldr	r2, [pc, #164]	; (8002814 <runSystem+0x108c>)
 8002770:	211e      	movs	r1, #30
 8002772:	2014      	movs	r0, #20
 8002774:	f7fe fe18 	bl	80013a8 <lcd_ShowStr>
			lcd_ShowStr(22, 60, "min yet", WHITE, BLUE, 24, 0);
 8002778:	2300      	movs	r3, #0
 800277a:	9302      	str	r3, [sp, #8]
 800277c:	2318      	movs	r3, #24
 800277e:	9301      	str	r3, [sp, #4]
 8002780:	231f      	movs	r3, #31
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002788:	4a24      	ldr	r2, [pc, #144]	; (800281c <runSystem+0x1094>)
 800278a:	213c      	movs	r1, #60	; 0x3c
 800278c:	2016      	movs	r0, #22
 800278e:	f7fe fe0b 	bl	80013a8 <lcd_ShowStr>
 8002792:	e00c      	b.n	80027ae <runSystem+0x1026>
		}else{
			lcd_ShowStr(20, 30, "Not set alarm", WHITE, BLUE, 24, 0);
 8002794:	2300      	movs	r3, #0
 8002796:	9302      	str	r3, [sp, #8]
 8002798:	2318      	movs	r3, #24
 800279a:	9301      	str	r3, [sp, #4]
 800279c:	231f      	movs	r3, #31
 800279e:	9300      	str	r3, [sp, #0]
 80027a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027a4:	4a1b      	ldr	r2, [pc, #108]	; (8002814 <runSystem+0x108c>)
 80027a6:	211e      	movs	r1, #30
 80027a8:	2014      	movs	r0, #20
 80027aa:	f7fe fdfd 	bl	80013a8 <lcd_ShowStr>
		}
		if(count_blink%60 == 0){
 80027ae:	4b1c      	ldr	r3, [pc, #112]	; (8002820 <runSystem+0x1098>)
 80027b0:	781a      	ldrb	r2, [r3, #0]
 80027b2:	4b1c      	ldr	r3, [pc, #112]	; (8002824 <runSystem+0x109c>)
 80027b4:	fba3 1302 	umull	r1, r3, r3, r2
 80027b8:	0959      	lsrs	r1, r3, #5
 80027ba:	460b      	mov	r3, r1
 80027bc:	011b      	lsls	r3, r3, #4
 80027be:	1a5b      	subs	r3, r3, r1
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d11d      	bne.n	8002806 <runSystem+0x107e>
			hour_alarm_flag = 0;
 80027ca:	4b10      	ldr	r3, [pc, #64]	; (800280c <runSystem+0x1084>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	701a      	strb	r2, [r3, #0]
			min_alarm_flag = 0;
 80027d0:	4b0f      	ldr	r3, [pc, #60]	; (8002810 <runSystem+0x1088>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	701a      	strb	r2, [r3, #0]
			count_blink = 0;
 80027d6:	4b12      	ldr	r3, [pc, #72]	; (8002820 <runSystem+0x1098>)
 80027d8:	2200      	movs	r2, #0
 80027da:	701a      	strb	r2, [r3, #0]
			blink_state = 0;
 80027dc:	4b12      	ldr	r3, [pc, #72]	; (8002828 <runSystem+0x10a0>)
 80027de:	2200      	movs	r2, #0
 80027e0:	701a      	strb	r2, [r3, #0]
			systemState = NORMAL;
 80027e2:	4b12      	ldr	r3, [pc, #72]	; (800282c <runSystem+0x10a4>)
 80027e4:	2201      	movs	r2, #1
 80027e6:	601a      	str	r2, [r3, #0]
			lcd_Clear(BLACK);
 80027e8:	2000      	movs	r0, #0
 80027ea:	f7fe fa67 	bl	8000cbc <lcd_Clear>
		}
	}

}
 80027ee:	e00a      	b.n	8002806 <runSystem+0x107e>
		break;
 80027f0:	bf00      	nop
 80027f2:	e008      	b.n	8002806 <runSystem+0x107e>
		break;
 80027f4:	bf00      	nop
 80027f6:	e006      	b.n	8002806 <runSystem+0x107e>
		break;
 80027f8:	bf00      	nop
 80027fa:	e004      	b.n	8002806 <runSystem+0x107e>
		break;
 80027fc:	bf00      	nop
 80027fe:	e002      	b.n	8002806 <runSystem+0x107e>
		break;
 8002800:	bf00      	nop
 8002802:	e000      	b.n	8002806 <runSystem+0x107e>
		break;
 8002804:	bf00      	nop
}
 8002806:	bf00      	nop
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	20000043 	.word	0x20000043
 8002810:	20000044 	.word	0x20000044
 8002814:	08006624 	.word	0x08006624
 8002818:	08006634 	.word	0x08006634
 800281c:	08006640 	.word	0x08006640
 8002820:	20000040 	.word	0x20000040
 8002824:	88888889 	.word	0x88888889
 8002828:	20000041 	.word	0x20000041
 800282c:	2000003c 	.word	0x2000003c

08002830 <displayTime>:
void displayTime(){
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af04      	add	r7, sp, #16
	lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 24);
 8002836:	4b36      	ldr	r3, [pc, #216]	; (8002910 <displayTime+0xe0>)
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	b29a      	uxth	r2, r3
 800283c:	2318      	movs	r3, #24
 800283e:	9302      	str	r3, [sp, #8]
 8002840:	2300      	movs	r3, #0
 8002842:	9301      	str	r3, [sp, #4]
 8002844:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	2302      	movs	r3, #2
 800284c:	2164      	movs	r1, #100	; 0x64
 800284e:	2046      	movs	r0, #70	; 0x46
 8002850:	f7fe fba8 	bl	8000fa4 <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 100, ds3231_min, 2, GREEN, BLACK, 24);
 8002854:	4b2f      	ldr	r3, [pc, #188]	; (8002914 <displayTime+0xe4>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	b29a      	uxth	r2, r3
 800285a:	2318      	movs	r3, #24
 800285c:	9302      	str	r3, [sp, #8]
 800285e:	2300      	movs	r3, #0
 8002860:	9301      	str	r3, [sp, #4]
 8002862:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002866:	9300      	str	r3, [sp, #0]
 8002868:	2302      	movs	r3, #2
 800286a:	2164      	movs	r1, #100	; 0x64
 800286c:	206e      	movs	r0, #110	; 0x6e
 800286e:	f7fe fb99 	bl	8000fa4 <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 100, ds3231_sec, 2, GREEN, BLACK, 24);
 8002872:	4b29      	ldr	r3, [pc, #164]	; (8002918 <displayTime+0xe8>)
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	b29a      	uxth	r2, r3
 8002878:	2318      	movs	r3, #24
 800287a:	9302      	str	r3, [sp, #8]
 800287c:	2300      	movs	r3, #0
 800287e:	9301      	str	r3, [sp, #4]
 8002880:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002884:	9300      	str	r3, [sp, #0]
 8002886:	2302      	movs	r3, #2
 8002888:	2164      	movs	r1, #100	; 0x64
 800288a:	2096      	movs	r0, #150	; 0x96
 800288c:	f7fe fb8a 	bl	8000fa4 <lcd_ShowIntNum>
	lcd_ShowIntNum(20, 130, ds3231_day, 2, YELLOW, BLACK, 24);
 8002890:	4b22      	ldr	r3, [pc, #136]	; (800291c <displayTime+0xec>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	b29a      	uxth	r2, r3
 8002896:	2318      	movs	r3, #24
 8002898:	9302      	str	r3, [sp, #8]
 800289a:	2300      	movs	r3, #0
 800289c:	9301      	str	r3, [sp, #4]
 800289e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80028a2:	9300      	str	r3, [sp, #0]
 80028a4:	2302      	movs	r3, #2
 80028a6:	2182      	movs	r1, #130	; 0x82
 80028a8:	2014      	movs	r0, #20
 80028aa:	f7fe fb7b 	bl	8000fa4 <lcd_ShowIntNum>
	lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 80028ae:	4b1c      	ldr	r3, [pc, #112]	; (8002920 <displayTime+0xf0>)
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	2318      	movs	r3, #24
 80028b6:	9302      	str	r3, [sp, #8]
 80028b8:	2300      	movs	r3, #0
 80028ba:	9301      	str	r3, [sp, #4]
 80028bc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80028c0:	9300      	str	r3, [sp, #0]
 80028c2:	2302      	movs	r3, #2
 80028c4:	2182      	movs	r1, #130	; 0x82
 80028c6:	2046      	movs	r0, #70	; 0x46
 80028c8:	f7fe fb6c 	bl	8000fa4 <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 80028cc:	4b15      	ldr	r3, [pc, #84]	; (8002924 <displayTime+0xf4>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	2318      	movs	r3, #24
 80028d4:	9302      	str	r3, [sp, #8]
 80028d6:	2300      	movs	r3, #0
 80028d8:	9301      	str	r3, [sp, #4]
 80028da:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80028de:	9300      	str	r3, [sp, #0]
 80028e0:	2302      	movs	r3, #2
 80028e2:	2182      	movs	r1, #130	; 0x82
 80028e4:	206e      	movs	r0, #110	; 0x6e
 80028e6:	f7fe fb5d 	bl	8000fa4 <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 80028ea:	4b0f      	ldr	r3, [pc, #60]	; (8002928 <displayTime+0xf8>)
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	2318      	movs	r3, #24
 80028f2:	9302      	str	r3, [sp, #8]
 80028f4:	2300      	movs	r3, #0
 80028f6:	9301      	str	r3, [sp, #4]
 80028f8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80028fc:	9300      	str	r3, [sp, #0]
 80028fe:	2302      	movs	r3, #2
 8002900:	2182      	movs	r1, #130	; 0x82
 8002902:	2096      	movs	r0, #150	; 0x96
 8002904:	f7fe fb4e 	bl	8000fa4 <lcd_ShowIntNum>
}
 8002908:	bf00      	nop
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	20000071 	.word	0x20000071
 8002914:	2000006e 	.word	0x2000006e
 8002918:	2000006c 	.word	0x2000006c
 800291c:	20000070 	.word	0x20000070
 8002920:	2000006f 	.word	0x2000006f
 8002924:	20000072 	.word	0x20000072
 8002928:	2000006d 	.word	0x2000006d

0800292c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002930:	b672      	cpsid	i
}
 8002932:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002934:	e7fe      	b.n	8002934 <Error_Handler+0x8>
	...

08002938 <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 800293c:	4802      	ldr	r0, [pc, #8]	; (8002948 <timer_init+0x10>)
 800293e:	f003 f8f9 	bl	8005b34 <HAL_TIM_Base_Start_IT>
}
 8002942:	bf00      	nop
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	200001b8 	.word	0x200001b8

0800294c <setTimer2>:

void setTimer2(uint16_t duration){
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	4603      	mov	r3, r0
 8002954:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8002956:	4a08      	ldr	r2, [pc, #32]	; (8002978 <setTimer2+0x2c>)
 8002958:	88fb      	ldrh	r3, [r7, #6]
 800295a:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 800295c:	4b06      	ldr	r3, [pc, #24]	; (8002978 <setTimer2+0x2c>)
 800295e:	881a      	ldrh	r2, [r3, #0]
 8002960:	4b06      	ldr	r3, [pc, #24]	; (800297c <setTimer2+0x30>)
 8002962:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8002964:	4b06      	ldr	r3, [pc, #24]	; (8002980 <setTimer2+0x34>)
 8002966:	2200      	movs	r2, #0
 8002968:	801a      	strh	r2, [r3, #0]
}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	2000004a 	.word	0x2000004a
 800297c:	20000048 	.word	0x20000048
 8002980:	20000046 	.word	0x20000046

08002984 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002994:	d116      	bne.n	80029c4 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 8002996:	4b0d      	ldr	r3, [pc, #52]	; (80029cc <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002998:	881b      	ldrh	r3, [r3, #0]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d010      	beq.n	80029c0 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 800299e:	4b0b      	ldr	r3, [pc, #44]	; (80029cc <HAL_TIM_PeriodElapsedCallback+0x48>)
 80029a0:	881b      	ldrh	r3, [r3, #0]
 80029a2:	3b01      	subs	r3, #1
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	4b09      	ldr	r3, [pc, #36]	; (80029cc <HAL_TIM_PeriodElapsedCallback+0x48>)
 80029a8:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 80029aa:	4b08      	ldr	r3, [pc, #32]	; (80029cc <HAL_TIM_PeriodElapsedCallback+0x48>)
 80029ac:	881b      	ldrh	r3, [r3, #0]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d106      	bne.n	80029c0 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 80029b2:	4b07      	ldr	r3, [pc, #28]	; (80029d0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80029b4:	2201      	movs	r2, #1
 80029b6:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 80029b8:	4b06      	ldr	r3, [pc, #24]	; (80029d4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80029ba:	881a      	ldrh	r2, [r3, #0]
 80029bc:	4b03      	ldr	r3, [pc, #12]	; (80029cc <HAL_TIM_PeriodElapsedCallback+0x48>)
 80029be:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 80029c0:	f7fe fd62 	bl	8001488 <led7_Scan>
	}
}
 80029c4:	bf00      	nop
 80029c6:	3708      	adds	r7, #8
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	20000048 	.word	0x20000048
 80029d0:	20000046 	.word	0x20000046
 80029d4:	2000004a 	.word	0x2000004a

080029d8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80029dc:	4b17      	ldr	r3, [pc, #92]	; (8002a3c <MX_SPI1_Init+0x64>)
 80029de:	4a18      	ldr	r2, [pc, #96]	; (8002a40 <MX_SPI1_Init+0x68>)
 80029e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80029e2:	4b16      	ldr	r3, [pc, #88]	; (8002a3c <MX_SPI1_Init+0x64>)
 80029e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80029e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80029ea:	4b14      	ldr	r3, [pc, #80]	; (8002a3c <MX_SPI1_Init+0x64>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80029f0:	4b12      	ldr	r3, [pc, #72]	; (8002a3c <MX_SPI1_Init+0x64>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80029f6:	4b11      	ldr	r3, [pc, #68]	; (8002a3c <MX_SPI1_Init+0x64>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80029fc:	4b0f      	ldr	r3, [pc, #60]	; (8002a3c <MX_SPI1_Init+0x64>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a02:	4b0e      	ldr	r3, [pc, #56]	; (8002a3c <MX_SPI1_Init+0x64>)
 8002a04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a08:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a0a:	4b0c      	ldr	r3, [pc, #48]	; (8002a3c <MX_SPI1_Init+0x64>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a10:	4b0a      	ldr	r3, [pc, #40]	; (8002a3c <MX_SPI1_Init+0x64>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a16:	4b09      	ldr	r3, [pc, #36]	; (8002a3c <MX_SPI1_Init+0x64>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a1c:	4b07      	ldr	r3, [pc, #28]	; (8002a3c <MX_SPI1_Init+0x64>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002a22:	4b06      	ldr	r3, [pc, #24]	; (8002a3c <MX_SPI1_Init+0x64>)
 8002a24:	220a      	movs	r2, #10
 8002a26:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a28:	4804      	ldr	r0, [pc, #16]	; (8002a3c <MX_SPI1_Init+0x64>)
 8002a2a:	f002 fa47 	bl	8004ebc <HAL_SPI_Init>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002a34:	f7ff ff7a 	bl	800292c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002a38:	bf00      	nop
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	20000160 	.word	0x20000160
 8002a40:	40013000 	.word	0x40013000

08002a44 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b08a      	sub	sp, #40	; 0x28
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a4c:	f107 0314 	add.w	r3, r7, #20
 8002a50:	2200      	movs	r2, #0
 8002a52:	601a      	str	r2, [r3, #0]
 8002a54:	605a      	str	r2, [r3, #4]
 8002a56:	609a      	str	r2, [r3, #8]
 8002a58:	60da      	str	r2, [r3, #12]
 8002a5a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a19      	ldr	r2, [pc, #100]	; (8002ac8 <HAL_SPI_MspInit+0x84>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d12b      	bne.n	8002abe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a66:	2300      	movs	r3, #0
 8002a68:	613b      	str	r3, [r7, #16]
 8002a6a:	4b18      	ldr	r3, [pc, #96]	; (8002acc <HAL_SPI_MspInit+0x88>)
 8002a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6e:	4a17      	ldr	r2, [pc, #92]	; (8002acc <HAL_SPI_MspInit+0x88>)
 8002a70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a74:	6453      	str	r3, [r2, #68]	; 0x44
 8002a76:	4b15      	ldr	r3, [pc, #84]	; (8002acc <HAL_SPI_MspInit+0x88>)
 8002a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a7e:	613b      	str	r3, [r7, #16]
 8002a80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a82:	2300      	movs	r3, #0
 8002a84:	60fb      	str	r3, [r7, #12]
 8002a86:	4b11      	ldr	r3, [pc, #68]	; (8002acc <HAL_SPI_MspInit+0x88>)
 8002a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8a:	4a10      	ldr	r2, [pc, #64]	; (8002acc <HAL_SPI_MspInit+0x88>)
 8002a8c:	f043 0302 	orr.w	r3, r3, #2
 8002a90:	6313      	str	r3, [r2, #48]	; 0x30
 8002a92:	4b0e      	ldr	r3, [pc, #56]	; (8002acc <HAL_SPI_MspInit+0x88>)
 8002a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	60fb      	str	r3, [r7, #12]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002a9e:	2338      	movs	r3, #56	; 0x38
 8002aa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002aae:	2305      	movs	r3, #5
 8002ab0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ab2:	f107 0314 	add.w	r3, r7, #20
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	4805      	ldr	r0, [pc, #20]	; (8002ad0 <HAL_SPI_MspInit+0x8c>)
 8002aba:	f000 fafb 	bl	80030b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002abe:	bf00      	nop
 8002ac0:	3728      	adds	r7, #40	; 0x28
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	40013000 	.word	0x40013000
 8002acc:	40023800 	.word	0x40023800
 8002ad0:	40020400 	.word	0x40020400

08002ad4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ada:	2300      	movs	r3, #0
 8002adc:	607b      	str	r3, [r7, #4]
 8002ade:	4b10      	ldr	r3, [pc, #64]	; (8002b20 <HAL_MspInit+0x4c>)
 8002ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae2:	4a0f      	ldr	r2, [pc, #60]	; (8002b20 <HAL_MspInit+0x4c>)
 8002ae4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ae8:	6453      	str	r3, [r2, #68]	; 0x44
 8002aea:	4b0d      	ldr	r3, [pc, #52]	; (8002b20 <HAL_MspInit+0x4c>)
 8002aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002af2:	607b      	str	r3, [r7, #4]
 8002af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002af6:	2300      	movs	r3, #0
 8002af8:	603b      	str	r3, [r7, #0]
 8002afa:	4b09      	ldr	r3, [pc, #36]	; (8002b20 <HAL_MspInit+0x4c>)
 8002afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afe:	4a08      	ldr	r2, [pc, #32]	; (8002b20 <HAL_MspInit+0x4c>)
 8002b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b04:	6413      	str	r3, [r2, #64]	; 0x40
 8002b06:	4b06      	ldr	r3, [pc, #24]	; (8002b20 <HAL_MspInit+0x4c>)
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b0e:	603b      	str	r3, [r7, #0]
 8002b10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b12:	bf00      	nop
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	40023800 	.word	0x40023800

08002b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b28:	e7fe      	b.n	8002b28 <NMI_Handler+0x4>

08002b2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b2e:	e7fe      	b.n	8002b2e <HardFault_Handler+0x4>

08002b30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b34:	e7fe      	b.n	8002b34 <MemManage_Handler+0x4>

08002b36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b36:	b480      	push	{r7}
 8002b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b3a:	e7fe      	b.n	8002b3a <BusFault_Handler+0x4>

08002b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b40:	e7fe      	b.n	8002b40 <UsageFault_Handler+0x4>

08002b42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b42:	b480      	push	{r7}
 8002b44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b46:	bf00      	nop
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b54:	bf00      	nop
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b62:	bf00      	nop
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b70:	f000 f94a 	bl	8002e08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b74:	bf00      	nop
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b7c:	4802      	ldr	r0, [pc, #8]	; (8002b88 <TIM2_IRQHandler+0x10>)
 8002b7e:	f003 f849 	bl	8005c14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002b82:	bf00      	nop
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	200001b8 	.word	0x200001b8

08002b8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b90:	4b06      	ldr	r3, [pc, #24]	; (8002bac <SystemInit+0x20>)
 8002b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b96:	4a05      	ldr	r2, [pc, #20]	; (8002bac <SystemInit+0x20>)
 8002b98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ba0:	bf00      	nop
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	e000ed00 	.word	0xe000ed00

08002bb0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bb6:	f107 0308 	add.w	r3, r7, #8
 8002bba:	2200      	movs	r2, #0
 8002bbc:	601a      	str	r2, [r3, #0]
 8002bbe:	605a      	str	r2, [r3, #4]
 8002bc0:	609a      	str	r2, [r3, #8]
 8002bc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bc4:	463b      	mov	r3, r7
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002bcc:	4b1d      	ldr	r3, [pc, #116]	; (8002c44 <MX_TIM2_Init+0x94>)
 8002bce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002bd2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8002bd4:	4b1b      	ldr	r3, [pc, #108]	; (8002c44 <MX_TIM2_Init+0x94>)
 8002bd6:	f240 3247 	movw	r2, #839	; 0x347
 8002bda:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bdc:	4b19      	ldr	r3, [pc, #100]	; (8002c44 <MX_TIM2_Init+0x94>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002be2:	4b18      	ldr	r3, [pc, #96]	; (8002c44 <MX_TIM2_Init+0x94>)
 8002be4:	2263      	movs	r2, #99	; 0x63
 8002be6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002be8:	4b16      	ldr	r3, [pc, #88]	; (8002c44 <MX_TIM2_Init+0x94>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bee:	4b15      	ldr	r3, [pc, #84]	; (8002c44 <MX_TIM2_Init+0x94>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002bf4:	4813      	ldr	r0, [pc, #76]	; (8002c44 <MX_TIM2_Init+0x94>)
 8002bf6:	f002 ff4d 	bl	8005a94 <HAL_TIM_Base_Init>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002c00:	f7ff fe94 	bl	800292c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c08:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002c0a:	f107 0308 	add.w	r3, r7, #8
 8002c0e:	4619      	mov	r1, r3
 8002c10:	480c      	ldr	r0, [pc, #48]	; (8002c44 <MX_TIM2_Init+0x94>)
 8002c12:	f003 f907 	bl	8005e24 <HAL_TIM_ConfigClockSource>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002c1c:	f7ff fe86 	bl	800292c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c20:	2300      	movs	r3, #0
 8002c22:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c24:	2300      	movs	r3, #0
 8002c26:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c28:	463b      	mov	r3, r7
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	4805      	ldr	r0, [pc, #20]	; (8002c44 <MX_TIM2_Init+0x94>)
 8002c2e:	f003 fb23 	bl	8006278 <HAL_TIMEx_MasterConfigSynchronization>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002c38:	f7ff fe78 	bl	800292c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002c3c:	bf00      	nop
 8002c3e:	3718      	adds	r7, #24
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	200001b8 	.word	0x200001b8

08002c48 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c58:	d115      	bne.n	8002c86 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60fb      	str	r3, [r7, #12]
 8002c5e:	4b0c      	ldr	r3, [pc, #48]	; (8002c90 <HAL_TIM_Base_MspInit+0x48>)
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	4a0b      	ldr	r2, [pc, #44]	; (8002c90 <HAL_TIM_Base_MspInit+0x48>)
 8002c64:	f043 0301 	orr.w	r3, r3, #1
 8002c68:	6413      	str	r3, [r2, #64]	; 0x40
 8002c6a:	4b09      	ldr	r3, [pc, #36]	; (8002c90 <HAL_TIM_Base_MspInit+0x48>)
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	60fb      	str	r3, [r7, #12]
 8002c74:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002c76:	2200      	movs	r2, #0
 8002c78:	2100      	movs	r1, #0
 8002c7a:	201c      	movs	r0, #28
 8002c7c:	f000 f9e3 	bl	8003046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002c80:	201c      	movs	r0, #28
 8002c82:	f000 f9fc 	bl	800307e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002c86:	bf00      	nop
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	40023800 	.word	0x40023800

08002c94 <BCD2DEC>:
 *  Created on: Sep 26, 2023
 *      Author: HaHuyen
 */
#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 8002c9e:	79fb      	ldrb	r3, [r7, #7]
 8002ca0:	091b      	lsrs	r3, r3, #4
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	0092      	lsls	r2, r2, #2
 8002ca8:	4413      	add	r3, r2
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	b2da      	uxtb	r2, r3
 8002cae:	79fb      	ldrb	r3, [r7, #7]
 8002cb0:	f003 030f 	and.w	r3, r3, #15
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	4413      	add	r3, r2
 8002cb8:	b2db      	uxtb	r3, r3
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
	...

08002cc8 <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	4603      	mov	r3, r0
 8002cd0:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 8002cd2:	79fb      	ldrb	r3, [r7, #7]
 8002cd4:	4a0d      	ldr	r2, [pc, #52]	; (8002d0c <DEC2BCD+0x44>)
 8002cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cda:	08db      	lsrs	r3, r3, #3
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	011b      	lsls	r3, r3, #4
 8002ce0:	b258      	sxtb	r0, r3
 8002ce2:	79fa      	ldrb	r2, [r7, #7]
 8002ce4:	4b09      	ldr	r3, [pc, #36]	; (8002d0c <DEC2BCD+0x44>)
 8002ce6:	fba3 1302 	umull	r1, r3, r3, r2
 8002cea:	08d9      	lsrs	r1, r3, #3
 8002cec:	460b      	mov	r3, r1
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	b25b      	sxtb	r3, r3
 8002cfa:	4303      	orrs	r3, r0
 8002cfc:	b25b      	sxtb	r3, r3
 8002cfe:	b2db      	uxtb	r3, r3
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr
 8002d0c:	cccccccd 	.word	0xcccccccd

08002d10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002d10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d48 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d14:	480d      	ldr	r0, [pc, #52]	; (8002d4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d16:	490e      	ldr	r1, [pc, #56]	; (8002d50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d18:	4a0e      	ldr	r2, [pc, #56]	; (8002d54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d1c:	e002      	b.n	8002d24 <LoopCopyDataInit>

08002d1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d22:	3304      	adds	r3, #4

08002d24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d28:	d3f9      	bcc.n	8002d1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d2a:	4a0b      	ldr	r2, [pc, #44]	; (8002d58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d2c:	4c0b      	ldr	r4, [pc, #44]	; (8002d5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d30:	e001      	b.n	8002d36 <LoopFillZerobss>

08002d32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d34:	3204      	adds	r2, #4

08002d36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d38:	d3fb      	bcc.n	8002d32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002d3a:	f7ff ff27 	bl	8002b8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d3e:	f003 fbfb 	bl	8006538 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d42:	f7fe fc2d 	bl	80015a0 <main>
  bx  lr    
 8002d46:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002d48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d50:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8002d54:	080095f0 	.word	0x080095f0
  ldr r2, =_sbss
 8002d58:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8002d5c:	20000204 	.word	0x20000204

08002d60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d60:	e7fe      	b.n	8002d60 <ADC_IRQHandler>
	...

08002d64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d68:	4b0e      	ldr	r3, [pc, #56]	; (8002da4 <HAL_Init+0x40>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a0d      	ldr	r2, [pc, #52]	; (8002da4 <HAL_Init+0x40>)
 8002d6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d74:	4b0b      	ldr	r3, [pc, #44]	; (8002da4 <HAL_Init+0x40>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a0a      	ldr	r2, [pc, #40]	; (8002da4 <HAL_Init+0x40>)
 8002d7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d80:	4b08      	ldr	r3, [pc, #32]	; (8002da4 <HAL_Init+0x40>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a07      	ldr	r2, [pc, #28]	; (8002da4 <HAL_Init+0x40>)
 8002d86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d8c:	2003      	movs	r0, #3
 8002d8e:	f000 f94f 	bl	8003030 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d92:	200f      	movs	r0, #15
 8002d94:	f000 f808 	bl	8002da8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d98:	f7ff fe9c 	bl	8002ad4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	40023c00 	.word	0x40023c00

08002da8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002db0:	4b12      	ldr	r3, [pc, #72]	; (8002dfc <HAL_InitTick+0x54>)
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	4b12      	ldr	r3, [pc, #72]	; (8002e00 <HAL_InitTick+0x58>)
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	4619      	mov	r1, r3
 8002dba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f000 f967 	bl	800309a <HAL_SYSTICK_Config>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e00e      	b.n	8002df4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2b0f      	cmp	r3, #15
 8002dda:	d80a      	bhi.n	8002df2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ddc:	2200      	movs	r2, #0
 8002dde:	6879      	ldr	r1, [r7, #4]
 8002de0:	f04f 30ff 	mov.w	r0, #4294967295
 8002de4:	f000 f92f 	bl	8003046 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002de8:	4a06      	ldr	r2, [pc, #24]	; (8002e04 <HAL_InitTick+0x5c>)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
 8002df0:	e000      	b.n	8002df4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3708      	adds	r7, #8
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	20000008 	.word	0x20000008
 8002e00:	20000010 	.word	0x20000010
 8002e04:	2000000c 	.word	0x2000000c

08002e08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e0c:	4b06      	ldr	r3, [pc, #24]	; (8002e28 <HAL_IncTick+0x20>)
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	461a      	mov	r2, r3
 8002e12:	4b06      	ldr	r3, [pc, #24]	; (8002e2c <HAL_IncTick+0x24>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4413      	add	r3, r2
 8002e18:	4a04      	ldr	r2, [pc, #16]	; (8002e2c <HAL_IncTick+0x24>)
 8002e1a:	6013      	str	r3, [r2, #0]
}
 8002e1c:	bf00      	nop
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	20000010 	.word	0x20000010
 8002e2c:	20000200 	.word	0x20000200

08002e30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
  return uwTick;
 8002e34:	4b03      	ldr	r3, [pc, #12]	; (8002e44 <HAL_GetTick+0x14>)
 8002e36:	681b      	ldr	r3, [r3, #0]
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	20000200 	.word	0x20000200

08002e48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e50:	f7ff ffee 	bl	8002e30 <HAL_GetTick>
 8002e54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e60:	d005      	beq.n	8002e6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e62:	4b0a      	ldr	r3, [pc, #40]	; (8002e8c <HAL_Delay+0x44>)
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	461a      	mov	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e6e:	bf00      	nop
 8002e70:	f7ff ffde 	bl	8002e30 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d8f7      	bhi.n	8002e70 <HAL_Delay+0x28>
  {
  }
}
 8002e80:	bf00      	nop
 8002e82:	bf00      	nop
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	20000010 	.word	0x20000010

08002e90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f003 0307 	and.w	r3, r3, #7
 8002e9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ea0:	4b0c      	ldr	r3, [pc, #48]	; (8002ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ea6:	68ba      	ldr	r2, [r7, #8]
 8002ea8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002eac:	4013      	ands	r3, r2
 8002eae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002eb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ebc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ec0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ec2:	4a04      	ldr	r2, [pc, #16]	; (8002ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	60d3      	str	r3, [r2, #12]
}
 8002ec8:	bf00      	nop
 8002eca:	3714      	adds	r7, #20
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr
 8002ed4:	e000ed00 	.word	0xe000ed00

08002ed8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002edc:	4b04      	ldr	r3, [pc, #16]	; (8002ef0 <__NVIC_GetPriorityGrouping+0x18>)
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	0a1b      	lsrs	r3, r3, #8
 8002ee2:	f003 0307 	and.w	r3, r3, #7
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr
 8002ef0:	e000ed00 	.word	0xe000ed00

08002ef4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	4603      	mov	r3, r0
 8002efc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	db0b      	blt.n	8002f1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f06:	79fb      	ldrb	r3, [r7, #7]
 8002f08:	f003 021f 	and.w	r2, r3, #31
 8002f0c:	4907      	ldr	r1, [pc, #28]	; (8002f2c <__NVIC_EnableIRQ+0x38>)
 8002f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f12:	095b      	lsrs	r3, r3, #5
 8002f14:	2001      	movs	r0, #1
 8002f16:	fa00 f202 	lsl.w	r2, r0, r2
 8002f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f1e:	bf00      	nop
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	e000e100 	.word	0xe000e100

08002f30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	4603      	mov	r3, r0
 8002f38:	6039      	str	r1, [r7, #0]
 8002f3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	db0a      	blt.n	8002f5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	b2da      	uxtb	r2, r3
 8002f48:	490c      	ldr	r1, [pc, #48]	; (8002f7c <__NVIC_SetPriority+0x4c>)
 8002f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f4e:	0112      	lsls	r2, r2, #4
 8002f50:	b2d2      	uxtb	r2, r2
 8002f52:	440b      	add	r3, r1
 8002f54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f58:	e00a      	b.n	8002f70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	b2da      	uxtb	r2, r3
 8002f5e:	4908      	ldr	r1, [pc, #32]	; (8002f80 <__NVIC_SetPriority+0x50>)
 8002f60:	79fb      	ldrb	r3, [r7, #7]
 8002f62:	f003 030f 	and.w	r3, r3, #15
 8002f66:	3b04      	subs	r3, #4
 8002f68:	0112      	lsls	r2, r2, #4
 8002f6a:	b2d2      	uxtb	r2, r2
 8002f6c:	440b      	add	r3, r1
 8002f6e:	761a      	strb	r2, [r3, #24]
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr
 8002f7c:	e000e100 	.word	0xe000e100
 8002f80:	e000ed00 	.word	0xe000ed00

08002f84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b089      	sub	sp, #36	; 0x24
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f003 0307 	and.w	r3, r3, #7
 8002f96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	f1c3 0307 	rsb	r3, r3, #7
 8002f9e:	2b04      	cmp	r3, #4
 8002fa0:	bf28      	it	cs
 8002fa2:	2304      	movcs	r3, #4
 8002fa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	3304      	adds	r3, #4
 8002faa:	2b06      	cmp	r3, #6
 8002fac:	d902      	bls.n	8002fb4 <NVIC_EncodePriority+0x30>
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	3b03      	subs	r3, #3
 8002fb2:	e000      	b.n	8002fb6 <NVIC_EncodePriority+0x32>
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc2:	43da      	mvns	r2, r3
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	401a      	ands	r2, r3
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd6:	43d9      	mvns	r1, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fdc:	4313      	orrs	r3, r2
         );
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3724      	adds	r7, #36	; 0x24
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
	...

08002fec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ffc:	d301      	bcc.n	8003002 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ffe:	2301      	movs	r3, #1
 8003000:	e00f      	b.n	8003022 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003002:	4a0a      	ldr	r2, [pc, #40]	; (800302c <SysTick_Config+0x40>)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	3b01      	subs	r3, #1
 8003008:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800300a:	210f      	movs	r1, #15
 800300c:	f04f 30ff 	mov.w	r0, #4294967295
 8003010:	f7ff ff8e 	bl	8002f30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003014:	4b05      	ldr	r3, [pc, #20]	; (800302c <SysTick_Config+0x40>)
 8003016:	2200      	movs	r2, #0
 8003018:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800301a:	4b04      	ldr	r3, [pc, #16]	; (800302c <SysTick_Config+0x40>)
 800301c:	2207      	movs	r2, #7
 800301e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	e000e010 	.word	0xe000e010

08003030 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f7ff ff29 	bl	8002e90 <__NVIC_SetPriorityGrouping>
}
 800303e:	bf00      	nop
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003046:	b580      	push	{r7, lr}
 8003048:	b086      	sub	sp, #24
 800304a:	af00      	add	r7, sp, #0
 800304c:	4603      	mov	r3, r0
 800304e:	60b9      	str	r1, [r7, #8]
 8003050:	607a      	str	r2, [r7, #4]
 8003052:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003054:	2300      	movs	r3, #0
 8003056:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003058:	f7ff ff3e 	bl	8002ed8 <__NVIC_GetPriorityGrouping>
 800305c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	68b9      	ldr	r1, [r7, #8]
 8003062:	6978      	ldr	r0, [r7, #20]
 8003064:	f7ff ff8e 	bl	8002f84 <NVIC_EncodePriority>
 8003068:	4602      	mov	r2, r0
 800306a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800306e:	4611      	mov	r1, r2
 8003070:	4618      	mov	r0, r3
 8003072:	f7ff ff5d 	bl	8002f30 <__NVIC_SetPriority>
}
 8003076:	bf00      	nop
 8003078:	3718      	adds	r7, #24
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800307e:	b580      	push	{r7, lr}
 8003080:	b082      	sub	sp, #8
 8003082:	af00      	add	r7, sp, #0
 8003084:	4603      	mov	r3, r0
 8003086:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800308c:	4618      	mov	r0, r3
 800308e:	f7ff ff31 	bl	8002ef4 <__NVIC_EnableIRQ>
}
 8003092:	bf00      	nop
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800309a:	b580      	push	{r7, lr}
 800309c:	b082      	sub	sp, #8
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f7ff ffa2 	bl	8002fec <SysTick_Config>
 80030a8:	4603      	mov	r3, r0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
	...

080030b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b089      	sub	sp, #36	; 0x24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030be:	2300      	movs	r3, #0
 80030c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030c2:	2300      	movs	r3, #0
 80030c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030c6:	2300      	movs	r3, #0
 80030c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030ca:	2300      	movs	r3, #0
 80030cc:	61fb      	str	r3, [r7, #28]
 80030ce:	e16b      	b.n	80033a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030d0:	2201      	movs	r2, #1
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	4013      	ands	r3, r2
 80030e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	f040 815a 	bne.w	80033a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f003 0303 	and.w	r3, r3, #3
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d005      	beq.n	8003106 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003102:	2b02      	cmp	r3, #2
 8003104:	d130      	bne.n	8003168 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	2203      	movs	r2, #3
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	43db      	mvns	r3, r3
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	4013      	ands	r3, r2
 800311c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	68da      	ldr	r2, [r3, #12]
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	fa02 f303 	lsl.w	r3, r2, r3
 800312a:	69ba      	ldr	r2, [r7, #24]
 800312c:	4313      	orrs	r3, r2
 800312e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	69ba      	ldr	r2, [r7, #24]
 8003134:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800313c:	2201      	movs	r2, #1
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	fa02 f303 	lsl.w	r3, r2, r3
 8003144:	43db      	mvns	r3, r3
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	4013      	ands	r3, r2
 800314a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	091b      	lsrs	r3, r3, #4
 8003152:	f003 0201 	and.w	r2, r3, #1
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	4313      	orrs	r3, r2
 8003160:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f003 0303 	and.w	r3, r3, #3
 8003170:	2b03      	cmp	r3, #3
 8003172:	d017      	beq.n	80031a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	2203      	movs	r2, #3
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	43db      	mvns	r3, r3
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	4013      	ands	r3, r2
 800318a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	689a      	ldr	r2, [r3, #8]
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	4313      	orrs	r3, r2
 800319c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f003 0303 	and.w	r3, r3, #3
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d123      	bne.n	80031f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	08da      	lsrs	r2, r3, #3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	3208      	adds	r2, #8
 80031b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	f003 0307 	and.w	r3, r3, #7
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	220f      	movs	r2, #15
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	43db      	mvns	r3, r3
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	4013      	ands	r3, r2
 80031d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	691a      	ldr	r2, [r3, #16]
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	f003 0307 	and.w	r3, r3, #7
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	08da      	lsrs	r2, r3, #3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	3208      	adds	r2, #8
 80031f2:	69b9      	ldr	r1, [r7, #24]
 80031f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	2203      	movs	r2, #3
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	43db      	mvns	r3, r3
 800320a:	69ba      	ldr	r2, [r7, #24]
 800320c:	4013      	ands	r3, r2
 800320e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f003 0203 	and.w	r2, r3, #3
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	4313      	orrs	r3, r2
 8003224:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003234:	2b00      	cmp	r3, #0
 8003236:	f000 80b4 	beq.w	80033a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800323a:	2300      	movs	r3, #0
 800323c:	60fb      	str	r3, [r7, #12]
 800323e:	4b60      	ldr	r3, [pc, #384]	; (80033c0 <HAL_GPIO_Init+0x30c>)
 8003240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003242:	4a5f      	ldr	r2, [pc, #380]	; (80033c0 <HAL_GPIO_Init+0x30c>)
 8003244:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003248:	6453      	str	r3, [r2, #68]	; 0x44
 800324a:	4b5d      	ldr	r3, [pc, #372]	; (80033c0 <HAL_GPIO_Init+0x30c>)
 800324c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003252:	60fb      	str	r3, [r7, #12]
 8003254:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003256:	4a5b      	ldr	r2, [pc, #364]	; (80033c4 <HAL_GPIO_Init+0x310>)
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	089b      	lsrs	r3, r3, #2
 800325c:	3302      	adds	r3, #2
 800325e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003262:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	f003 0303 	and.w	r3, r3, #3
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	220f      	movs	r2, #15
 800326e:	fa02 f303 	lsl.w	r3, r2, r3
 8003272:	43db      	mvns	r3, r3
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	4013      	ands	r3, r2
 8003278:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a52      	ldr	r2, [pc, #328]	; (80033c8 <HAL_GPIO_Init+0x314>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d02b      	beq.n	80032da <HAL_GPIO_Init+0x226>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a51      	ldr	r2, [pc, #324]	; (80033cc <HAL_GPIO_Init+0x318>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d025      	beq.n	80032d6 <HAL_GPIO_Init+0x222>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a50      	ldr	r2, [pc, #320]	; (80033d0 <HAL_GPIO_Init+0x31c>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d01f      	beq.n	80032d2 <HAL_GPIO_Init+0x21e>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a4f      	ldr	r2, [pc, #316]	; (80033d4 <HAL_GPIO_Init+0x320>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d019      	beq.n	80032ce <HAL_GPIO_Init+0x21a>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a4e      	ldr	r2, [pc, #312]	; (80033d8 <HAL_GPIO_Init+0x324>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d013      	beq.n	80032ca <HAL_GPIO_Init+0x216>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a4d      	ldr	r2, [pc, #308]	; (80033dc <HAL_GPIO_Init+0x328>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d00d      	beq.n	80032c6 <HAL_GPIO_Init+0x212>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a4c      	ldr	r2, [pc, #304]	; (80033e0 <HAL_GPIO_Init+0x32c>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d007      	beq.n	80032c2 <HAL_GPIO_Init+0x20e>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a4b      	ldr	r2, [pc, #300]	; (80033e4 <HAL_GPIO_Init+0x330>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d101      	bne.n	80032be <HAL_GPIO_Init+0x20a>
 80032ba:	2307      	movs	r3, #7
 80032bc:	e00e      	b.n	80032dc <HAL_GPIO_Init+0x228>
 80032be:	2308      	movs	r3, #8
 80032c0:	e00c      	b.n	80032dc <HAL_GPIO_Init+0x228>
 80032c2:	2306      	movs	r3, #6
 80032c4:	e00a      	b.n	80032dc <HAL_GPIO_Init+0x228>
 80032c6:	2305      	movs	r3, #5
 80032c8:	e008      	b.n	80032dc <HAL_GPIO_Init+0x228>
 80032ca:	2304      	movs	r3, #4
 80032cc:	e006      	b.n	80032dc <HAL_GPIO_Init+0x228>
 80032ce:	2303      	movs	r3, #3
 80032d0:	e004      	b.n	80032dc <HAL_GPIO_Init+0x228>
 80032d2:	2302      	movs	r3, #2
 80032d4:	e002      	b.n	80032dc <HAL_GPIO_Init+0x228>
 80032d6:	2301      	movs	r3, #1
 80032d8:	e000      	b.n	80032dc <HAL_GPIO_Init+0x228>
 80032da:	2300      	movs	r3, #0
 80032dc:	69fa      	ldr	r2, [r7, #28]
 80032de:	f002 0203 	and.w	r2, r2, #3
 80032e2:	0092      	lsls	r2, r2, #2
 80032e4:	4093      	lsls	r3, r2
 80032e6:	69ba      	ldr	r2, [r7, #24]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032ec:	4935      	ldr	r1, [pc, #212]	; (80033c4 <HAL_GPIO_Init+0x310>)
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	089b      	lsrs	r3, r3, #2
 80032f2:	3302      	adds	r3, #2
 80032f4:	69ba      	ldr	r2, [r7, #24]
 80032f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032fa:	4b3b      	ldr	r3, [pc, #236]	; (80033e8 <HAL_GPIO_Init+0x334>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	43db      	mvns	r3, r3
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	4013      	ands	r3, r2
 8003308:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d003      	beq.n	800331e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003316:	69ba      	ldr	r2, [r7, #24]
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	4313      	orrs	r3, r2
 800331c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800331e:	4a32      	ldr	r2, [pc, #200]	; (80033e8 <HAL_GPIO_Init+0x334>)
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003324:	4b30      	ldr	r3, [pc, #192]	; (80033e8 <HAL_GPIO_Init+0x334>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	43db      	mvns	r3, r3
 800332e:	69ba      	ldr	r2, [r7, #24]
 8003330:	4013      	ands	r3, r2
 8003332:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d003      	beq.n	8003348 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	4313      	orrs	r3, r2
 8003346:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003348:	4a27      	ldr	r2, [pc, #156]	; (80033e8 <HAL_GPIO_Init+0x334>)
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800334e:	4b26      	ldr	r3, [pc, #152]	; (80033e8 <HAL_GPIO_Init+0x334>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	43db      	mvns	r3, r3
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	4013      	ands	r3, r2
 800335c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d003      	beq.n	8003372 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800336a:	69ba      	ldr	r2, [r7, #24]
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	4313      	orrs	r3, r2
 8003370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003372:	4a1d      	ldr	r2, [pc, #116]	; (80033e8 <HAL_GPIO_Init+0x334>)
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003378:	4b1b      	ldr	r3, [pc, #108]	; (80033e8 <HAL_GPIO_Init+0x334>)
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	43db      	mvns	r3, r3
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	4013      	ands	r3, r2
 8003386:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d003      	beq.n	800339c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	4313      	orrs	r3, r2
 800339a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800339c:	4a12      	ldr	r2, [pc, #72]	; (80033e8 <HAL_GPIO_Init+0x334>)
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	3301      	adds	r3, #1
 80033a6:	61fb      	str	r3, [r7, #28]
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	2b0f      	cmp	r3, #15
 80033ac:	f67f ae90 	bls.w	80030d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033b0:	bf00      	nop
 80033b2:	bf00      	nop
 80033b4:	3724      	adds	r7, #36	; 0x24
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	40023800 	.word	0x40023800
 80033c4:	40013800 	.word	0x40013800
 80033c8:	40020000 	.word	0x40020000
 80033cc:	40020400 	.word	0x40020400
 80033d0:	40020800 	.word	0x40020800
 80033d4:	40020c00 	.word	0x40020c00
 80033d8:	40021000 	.word	0x40021000
 80033dc:	40021400 	.word	0x40021400
 80033e0:	40021800 	.word	0x40021800
 80033e4:	40021c00 	.word	0x40021c00
 80033e8:	40013c00 	.word	0x40013c00

080033ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	460b      	mov	r3, r1
 80033f6:	807b      	strh	r3, [r7, #2]
 80033f8:	4613      	mov	r3, r2
 80033fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033fc:	787b      	ldrb	r3, [r7, #1]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003402:	887a      	ldrh	r2, [r7, #2]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003408:	e003      	b.n	8003412 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800340a:	887b      	ldrh	r3, [r7, #2]
 800340c:	041a      	lsls	r2, r3, #16
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	619a      	str	r2, [r3, #24]
}
 8003412:	bf00      	nop
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
	...

08003420 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e12b      	b.n	800368a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d106      	bne.n	800344c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f7fd fb72 	bl	8000b30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2224      	movs	r2, #36	; 0x24
 8003450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 0201 	bic.w	r2, r2, #1
 8003462:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003472:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003482:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003484:	f001 fd06 	bl	8004e94 <HAL_RCC_GetPCLK1Freq>
 8003488:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	4a81      	ldr	r2, [pc, #516]	; (8003694 <HAL_I2C_Init+0x274>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d807      	bhi.n	80034a4 <HAL_I2C_Init+0x84>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	4a80      	ldr	r2, [pc, #512]	; (8003698 <HAL_I2C_Init+0x278>)
 8003498:	4293      	cmp	r3, r2
 800349a:	bf94      	ite	ls
 800349c:	2301      	movls	r3, #1
 800349e:	2300      	movhi	r3, #0
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	e006      	b.n	80034b2 <HAL_I2C_Init+0x92>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	4a7d      	ldr	r2, [pc, #500]	; (800369c <HAL_I2C_Init+0x27c>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	bf94      	ite	ls
 80034ac:	2301      	movls	r3, #1
 80034ae:	2300      	movhi	r3, #0
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d001      	beq.n	80034ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e0e7      	b.n	800368a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	4a78      	ldr	r2, [pc, #480]	; (80036a0 <HAL_I2C_Init+0x280>)
 80034be:	fba2 2303 	umull	r2, r3, r2, r3
 80034c2:	0c9b      	lsrs	r3, r3, #18
 80034c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68ba      	ldr	r2, [r7, #8]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6a1b      	ldr	r3, [r3, #32]
 80034e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	4a6a      	ldr	r2, [pc, #424]	; (8003694 <HAL_I2C_Init+0x274>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d802      	bhi.n	80034f4 <HAL_I2C_Init+0xd4>
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	3301      	adds	r3, #1
 80034f2:	e009      	b.n	8003508 <HAL_I2C_Init+0xe8>
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80034fa:	fb02 f303 	mul.w	r3, r2, r3
 80034fe:	4a69      	ldr	r2, [pc, #420]	; (80036a4 <HAL_I2C_Init+0x284>)
 8003500:	fba2 2303 	umull	r2, r3, r2, r3
 8003504:	099b      	lsrs	r3, r3, #6
 8003506:	3301      	adds	r3, #1
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	6812      	ldr	r2, [r2, #0]
 800350c:	430b      	orrs	r3, r1
 800350e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	69db      	ldr	r3, [r3, #28]
 8003516:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800351a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	495c      	ldr	r1, [pc, #368]	; (8003694 <HAL_I2C_Init+0x274>)
 8003524:	428b      	cmp	r3, r1
 8003526:	d819      	bhi.n	800355c <HAL_I2C_Init+0x13c>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	1e59      	subs	r1, r3, #1
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	fbb1 f3f3 	udiv	r3, r1, r3
 8003536:	1c59      	adds	r1, r3, #1
 8003538:	f640 73fc 	movw	r3, #4092	; 0xffc
 800353c:	400b      	ands	r3, r1
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00a      	beq.n	8003558 <HAL_I2C_Init+0x138>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	1e59      	subs	r1, r3, #1
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003550:	3301      	adds	r3, #1
 8003552:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003556:	e051      	b.n	80035fc <HAL_I2C_Init+0x1dc>
 8003558:	2304      	movs	r3, #4
 800355a:	e04f      	b.n	80035fc <HAL_I2C_Init+0x1dc>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d111      	bne.n	8003588 <HAL_I2C_Init+0x168>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	1e58      	subs	r0, r3, #1
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6859      	ldr	r1, [r3, #4]
 800356c:	460b      	mov	r3, r1
 800356e:	005b      	lsls	r3, r3, #1
 8003570:	440b      	add	r3, r1
 8003572:	fbb0 f3f3 	udiv	r3, r0, r3
 8003576:	3301      	adds	r3, #1
 8003578:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800357c:	2b00      	cmp	r3, #0
 800357e:	bf0c      	ite	eq
 8003580:	2301      	moveq	r3, #1
 8003582:	2300      	movne	r3, #0
 8003584:	b2db      	uxtb	r3, r3
 8003586:	e012      	b.n	80035ae <HAL_I2C_Init+0x18e>
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	1e58      	subs	r0, r3, #1
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6859      	ldr	r1, [r3, #4]
 8003590:	460b      	mov	r3, r1
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	440b      	add	r3, r1
 8003596:	0099      	lsls	r1, r3, #2
 8003598:	440b      	add	r3, r1
 800359a:	fbb0 f3f3 	udiv	r3, r0, r3
 800359e:	3301      	adds	r3, #1
 80035a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	bf0c      	ite	eq
 80035a8:	2301      	moveq	r3, #1
 80035aa:	2300      	movne	r3, #0
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <HAL_I2C_Init+0x196>
 80035b2:	2301      	movs	r3, #1
 80035b4:	e022      	b.n	80035fc <HAL_I2C_Init+0x1dc>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10e      	bne.n	80035dc <HAL_I2C_Init+0x1bc>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	1e58      	subs	r0, r3, #1
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6859      	ldr	r1, [r3, #4]
 80035c6:	460b      	mov	r3, r1
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	440b      	add	r3, r1
 80035cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80035d0:	3301      	adds	r3, #1
 80035d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035da:	e00f      	b.n	80035fc <HAL_I2C_Init+0x1dc>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	1e58      	subs	r0, r3, #1
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6859      	ldr	r1, [r3, #4]
 80035e4:	460b      	mov	r3, r1
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	440b      	add	r3, r1
 80035ea:	0099      	lsls	r1, r3, #2
 80035ec:	440b      	add	r3, r1
 80035ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80035f2:	3301      	adds	r3, #1
 80035f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035fc:	6879      	ldr	r1, [r7, #4]
 80035fe:	6809      	ldr	r1, [r1, #0]
 8003600:	4313      	orrs	r3, r2
 8003602:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	69da      	ldr	r2, [r3, #28]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	431a      	orrs	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	430a      	orrs	r2, r1
 800361e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800362a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	6911      	ldr	r1, [r2, #16]
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	68d2      	ldr	r2, [r2, #12]
 8003636:	4311      	orrs	r1, r2
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	6812      	ldr	r2, [r2, #0]
 800363c:	430b      	orrs	r3, r1
 800363e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	695a      	ldr	r2, [r3, #20]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	431a      	orrs	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	430a      	orrs	r2, r1
 800365a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f042 0201 	orr.w	r2, r2, #1
 800366a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2220      	movs	r2, #32
 8003676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	000186a0 	.word	0x000186a0
 8003698:	001e847f 	.word	0x001e847f
 800369c:	003d08ff 	.word	0x003d08ff
 80036a0:	431bde83 	.word	0x431bde83
 80036a4:	10624dd3 	.word	0x10624dd3

080036a8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b088      	sub	sp, #32
 80036ac:	af02      	add	r7, sp, #8
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	4608      	mov	r0, r1
 80036b2:	4611      	mov	r1, r2
 80036b4:	461a      	mov	r2, r3
 80036b6:	4603      	mov	r3, r0
 80036b8:	817b      	strh	r3, [r7, #10]
 80036ba:	460b      	mov	r3, r1
 80036bc:	813b      	strh	r3, [r7, #8]
 80036be:	4613      	mov	r3, r2
 80036c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80036c2:	f7ff fbb5 	bl	8002e30 <HAL_GetTick>
 80036c6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2b20      	cmp	r3, #32
 80036d2:	f040 80d9 	bne.w	8003888 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	9300      	str	r3, [sp, #0]
 80036da:	2319      	movs	r3, #25
 80036dc:	2201      	movs	r2, #1
 80036de:	496d      	ldr	r1, [pc, #436]	; (8003894 <HAL_I2C_Mem_Write+0x1ec>)
 80036e0:	68f8      	ldr	r0, [r7, #12]
 80036e2:	f000 fdad 	bl	8004240 <I2C_WaitOnFlagUntilTimeout>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d001      	beq.n	80036f0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80036ec:	2302      	movs	r3, #2
 80036ee:	e0cc      	b.n	800388a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d101      	bne.n	80036fe <HAL_I2C_Mem_Write+0x56>
 80036fa:	2302      	movs	r3, #2
 80036fc:	e0c5      	b.n	800388a <HAL_I2C_Mem_Write+0x1e2>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0301 	and.w	r3, r3, #1
 8003710:	2b01      	cmp	r3, #1
 8003712:	d007      	beq.n	8003724 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f042 0201 	orr.w	r2, r2, #1
 8003722:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003732:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2221      	movs	r2, #33	; 0x21
 8003738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2240      	movs	r2, #64	; 0x40
 8003740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6a3a      	ldr	r2, [r7, #32]
 800374e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003754:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800375a:	b29a      	uxth	r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	4a4d      	ldr	r2, [pc, #308]	; (8003898 <HAL_I2C_Mem_Write+0x1f0>)
 8003764:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003766:	88f8      	ldrh	r0, [r7, #6]
 8003768:	893a      	ldrh	r2, [r7, #8]
 800376a:	8979      	ldrh	r1, [r7, #10]
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	9301      	str	r3, [sp, #4]
 8003770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003772:	9300      	str	r3, [sp, #0]
 8003774:	4603      	mov	r3, r0
 8003776:	68f8      	ldr	r0, [r7, #12]
 8003778:	f000 fbe4 	bl	8003f44 <I2C_RequestMemoryWrite>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d052      	beq.n	8003828 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e081      	b.n	800388a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800378a:	68f8      	ldr	r0, [r7, #12]
 800378c:	f000 fe2e 	bl	80043ec <I2C_WaitOnTXEFlagUntilTimeout>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00d      	beq.n	80037b2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	2b04      	cmp	r3, #4
 800379c:	d107      	bne.n	80037ae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e06b      	b.n	800388a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b6:	781a      	ldrb	r2, [r3, #0]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c2:	1c5a      	adds	r2, r3, #1
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037cc:	3b01      	subs	r3, #1
 80037ce:	b29a      	uxth	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d8:	b29b      	uxth	r3, r3
 80037da:	3b01      	subs	r3, #1
 80037dc:	b29a      	uxth	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	695b      	ldr	r3, [r3, #20]
 80037e8:	f003 0304 	and.w	r3, r3, #4
 80037ec:	2b04      	cmp	r3, #4
 80037ee:	d11b      	bne.n	8003828 <HAL_I2C_Mem_Write+0x180>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d017      	beq.n	8003828 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fc:	781a      	ldrb	r2, [r3, #0]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003808:	1c5a      	adds	r2, r3, #1
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003812:	3b01      	subs	r3, #1
 8003814:	b29a      	uxth	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800381e:	b29b      	uxth	r3, r3
 8003820:	3b01      	subs	r3, #1
 8003822:	b29a      	uxth	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1aa      	bne.n	8003786 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003830:	697a      	ldr	r2, [r7, #20]
 8003832:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003834:	68f8      	ldr	r0, [r7, #12]
 8003836:	f000 fe1a 	bl	800446e <I2C_WaitOnBTFFlagUntilTimeout>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00d      	beq.n	800385c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003844:	2b04      	cmp	r3, #4
 8003846:	d107      	bne.n	8003858 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003856:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e016      	b.n	800388a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800386a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2220      	movs	r2, #32
 8003870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003884:	2300      	movs	r3, #0
 8003886:	e000      	b.n	800388a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003888:	2302      	movs	r3, #2
  }
}
 800388a:	4618      	mov	r0, r3
 800388c:	3718      	adds	r7, #24
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	00100002 	.word	0x00100002
 8003898:	ffff0000 	.word	0xffff0000

0800389c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b08c      	sub	sp, #48	; 0x30
 80038a0:	af02      	add	r7, sp, #8
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	4608      	mov	r0, r1
 80038a6:	4611      	mov	r1, r2
 80038a8:	461a      	mov	r2, r3
 80038aa:	4603      	mov	r3, r0
 80038ac:	817b      	strh	r3, [r7, #10]
 80038ae:	460b      	mov	r3, r1
 80038b0:	813b      	strh	r3, [r7, #8]
 80038b2:	4613      	mov	r3, r2
 80038b4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038b6:	f7ff fabb 	bl	8002e30 <HAL_GetTick>
 80038ba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	2b20      	cmp	r3, #32
 80038c6:	f040 8208 	bne.w	8003cda <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038cc:	9300      	str	r3, [sp, #0]
 80038ce:	2319      	movs	r3, #25
 80038d0:	2201      	movs	r2, #1
 80038d2:	497b      	ldr	r1, [pc, #492]	; (8003ac0 <HAL_I2C_Mem_Read+0x224>)
 80038d4:	68f8      	ldr	r0, [r7, #12]
 80038d6:	f000 fcb3 	bl	8004240 <I2C_WaitOnFlagUntilTimeout>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d001      	beq.n	80038e4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80038e0:	2302      	movs	r3, #2
 80038e2:	e1fb      	b.n	8003cdc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d101      	bne.n	80038f2 <HAL_I2C_Mem_Read+0x56>
 80038ee:	2302      	movs	r3, #2
 80038f0:	e1f4      	b.n	8003cdc <HAL_I2C_Mem_Read+0x440>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	2b01      	cmp	r3, #1
 8003906:	d007      	beq.n	8003918 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f042 0201 	orr.w	r2, r2, #1
 8003916:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003926:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2222      	movs	r2, #34	; 0x22
 800392c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2240      	movs	r2, #64	; 0x40
 8003934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003942:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003948:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800394e:	b29a      	uxth	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	4a5b      	ldr	r2, [pc, #364]	; (8003ac4 <HAL_I2C_Mem_Read+0x228>)
 8003958:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800395a:	88f8      	ldrh	r0, [r7, #6]
 800395c:	893a      	ldrh	r2, [r7, #8]
 800395e:	8979      	ldrh	r1, [r7, #10]
 8003960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003962:	9301      	str	r3, [sp, #4]
 8003964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003966:	9300      	str	r3, [sp, #0]
 8003968:	4603      	mov	r3, r0
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	f000 fb80 	bl	8004070 <I2C_RequestMemoryRead>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d001      	beq.n	800397a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e1b0      	b.n	8003cdc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800397e:	2b00      	cmp	r3, #0
 8003980:	d113      	bne.n	80039aa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003982:	2300      	movs	r3, #0
 8003984:	623b      	str	r3, [r7, #32]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	695b      	ldr	r3, [r3, #20]
 800398c:	623b      	str	r3, [r7, #32]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	623b      	str	r3, [r7, #32]
 8003996:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039a6:	601a      	str	r2, [r3, #0]
 80039a8:	e184      	b.n	8003cb4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d11b      	bne.n	80039ea <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039c2:	2300      	movs	r3, #0
 80039c4:	61fb      	str	r3, [r7, #28]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	695b      	ldr	r3, [r3, #20]
 80039cc:	61fb      	str	r3, [r7, #28]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	699b      	ldr	r3, [r3, #24]
 80039d4:	61fb      	str	r3, [r7, #28]
 80039d6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039e6:	601a      	str	r2, [r3, #0]
 80039e8:	e164      	b.n	8003cb4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d11b      	bne.n	8003a2a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a00:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a12:	2300      	movs	r3, #0
 8003a14:	61bb      	str	r3, [r7, #24]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	695b      	ldr	r3, [r3, #20]
 8003a1c:	61bb      	str	r3, [r7, #24]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	699b      	ldr	r3, [r3, #24]
 8003a24:	61bb      	str	r3, [r7, #24]
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	e144      	b.n	8003cb4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	617b      	str	r3, [r7, #20]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	695b      	ldr	r3, [r3, #20]
 8003a34:	617b      	str	r3, [r7, #20]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	617b      	str	r3, [r7, #20]
 8003a3e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003a40:	e138      	b.n	8003cb4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a46:	2b03      	cmp	r3, #3
 8003a48:	f200 80f1 	bhi.w	8003c2e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d123      	bne.n	8003a9c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a56:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a58:	68f8      	ldr	r0, [r7, #12]
 8003a5a:	f000 fd49 	bl	80044f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d001      	beq.n	8003a68 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e139      	b.n	8003cdc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	691a      	ldr	r2, [r3, #16]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a72:	b2d2      	uxtb	r2, r2
 8003a74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7a:	1c5a      	adds	r2, r3, #1
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a84:	3b01      	subs	r3, #1
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	3b01      	subs	r3, #1
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a9a:	e10b      	b.n	8003cb4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d14e      	bne.n	8003b42 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa6:	9300      	str	r3, [sp, #0]
 8003aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aaa:	2200      	movs	r2, #0
 8003aac:	4906      	ldr	r1, [pc, #24]	; (8003ac8 <HAL_I2C_Mem_Read+0x22c>)
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	f000 fbc6 	bl	8004240 <I2C_WaitOnFlagUntilTimeout>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d008      	beq.n	8003acc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e10e      	b.n	8003cdc <HAL_I2C_Mem_Read+0x440>
 8003abe:	bf00      	nop
 8003ac0:	00100002 	.word	0x00100002
 8003ac4:	ffff0000 	.word	0xffff0000
 8003ac8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ada:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	691a      	ldr	r2, [r3, #16]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae6:	b2d2      	uxtb	r2, r2
 8003ae8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aee:	1c5a      	adds	r2, r3, #1
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af8:	3b01      	subs	r3, #1
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	3b01      	subs	r3, #1
 8003b08:	b29a      	uxth	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	691a      	ldr	r2, [r3, #16]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b18:	b2d2      	uxtb	r2, r2
 8003b1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b20:	1c5a      	adds	r2, r3, #1
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	b29a      	uxth	r2, r3
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b40:	e0b8      	b.n	8003cb4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b44:	9300      	str	r3, [sp, #0]
 8003b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b48:	2200      	movs	r2, #0
 8003b4a:	4966      	ldr	r1, [pc, #408]	; (8003ce4 <HAL_I2C_Mem_Read+0x448>)
 8003b4c:	68f8      	ldr	r0, [r7, #12]
 8003b4e:	f000 fb77 	bl	8004240 <I2C_WaitOnFlagUntilTimeout>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d001      	beq.n	8003b5c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e0bf      	b.n	8003cdc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	691a      	ldr	r2, [r3, #16]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b76:	b2d2      	uxtb	r2, r2
 8003b78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7e:	1c5a      	adds	r2, r3, #1
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	3b01      	subs	r3, #1
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba0:	9300      	str	r3, [sp, #0]
 8003ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	494f      	ldr	r1, [pc, #316]	; (8003ce4 <HAL_I2C_Mem_Read+0x448>)
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f000 fb49 	bl	8004240 <I2C_WaitOnFlagUntilTimeout>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d001      	beq.n	8003bb8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e091      	b.n	8003cdc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bc6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	691a      	ldr	r2, [r3, #16]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd2:	b2d2      	uxtb	r2, r2
 8003bd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bda:	1c5a      	adds	r2, r3, #1
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003be4:	3b01      	subs	r3, #1
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	691a      	ldr	r2, [r3, #16]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c04:	b2d2      	uxtb	r2, r2
 8003c06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0c:	1c5a      	adds	r2, r3, #1
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c16:	3b01      	subs	r3, #1
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	3b01      	subs	r3, #1
 8003c26:	b29a      	uxth	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c2c:	e042      	b.n	8003cb4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c30:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c32:	68f8      	ldr	r0, [r7, #12]
 8003c34:	f000 fc5c 	bl	80044f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d001      	beq.n	8003c42 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e04c      	b.n	8003cdc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	691a      	ldr	r2, [r3, #16]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4c:	b2d2      	uxtb	r2, r2
 8003c4e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c54:	1c5a      	adds	r2, r3, #1
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	f003 0304 	and.w	r3, r3, #4
 8003c7e:	2b04      	cmp	r3, #4
 8003c80:	d118      	bne.n	8003cb4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	691a      	ldr	r2, [r3, #16]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8c:	b2d2      	uxtb	r2, r2
 8003c8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c94:	1c5a      	adds	r2, r3, #1
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	b29a      	uxth	r2, r3
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	3b01      	subs	r3, #1
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f47f aec2 	bne.w	8003a42 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2220      	movs	r2, #32
 8003cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	e000      	b.n	8003cdc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003cda:	2302      	movs	r3, #2
  }
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3728      	adds	r7, #40	; 0x28
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	00010004 	.word	0x00010004

08003ce8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b08a      	sub	sp, #40	; 0x28
 8003cec:	af02      	add	r7, sp, #8
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	607a      	str	r2, [r7, #4]
 8003cf2:	603b      	str	r3, [r7, #0]
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003cf8:	f7ff f89a 	bl	8002e30 <HAL_GetTick>
 8003cfc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2b20      	cmp	r3, #32
 8003d0c:	f040 8111 	bne.w	8003f32 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	9300      	str	r3, [sp, #0]
 8003d14:	2319      	movs	r3, #25
 8003d16:	2201      	movs	r2, #1
 8003d18:	4988      	ldr	r1, [pc, #544]	; (8003f3c <HAL_I2C_IsDeviceReady+0x254>)
 8003d1a:	68f8      	ldr	r0, [r7, #12]
 8003d1c:	f000 fa90 	bl	8004240 <I2C_WaitOnFlagUntilTimeout>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d001      	beq.n	8003d2a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003d26:	2302      	movs	r3, #2
 8003d28:	e104      	b.n	8003f34 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d101      	bne.n	8003d38 <HAL_I2C_IsDeviceReady+0x50>
 8003d34:	2302      	movs	r3, #2
 8003d36:	e0fd      	b.n	8003f34 <HAL_I2C_IsDeviceReady+0x24c>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d007      	beq.n	8003d5e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f042 0201 	orr.w	r2, r2, #1
 8003d5c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d6c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2224      	movs	r2, #36	; 0x24
 8003d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	4a70      	ldr	r2, [pc, #448]	; (8003f40 <HAL_I2C_IsDeviceReady+0x258>)
 8003d80:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d90:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	9300      	str	r3, [sp, #0]
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	f000 fa4e 	bl	8004240 <I2C_WaitOnFlagUntilTimeout>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00d      	beq.n	8003dc6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003db8:	d103      	bne.n	8003dc2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dc0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e0b6      	b.n	8003f34 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003dc6:	897b      	ldrh	r3, [r7, #10]
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	461a      	mov	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003dd4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003dd6:	f7ff f82b 	bl	8002e30 <HAL_GetTick>
 8003dda:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	bf0c      	ite	eq
 8003dea:	2301      	moveq	r3, #1
 8003dec:	2300      	movne	r3, #0
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	695b      	ldr	r3, [r3, #20]
 8003df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e00:	bf0c      	ite	eq
 8003e02:	2301      	moveq	r3, #1
 8003e04:	2300      	movne	r3, #0
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003e0a:	e025      	b.n	8003e58 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003e0c:	f7ff f810 	bl	8002e30 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	683a      	ldr	r2, [r7, #0]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d302      	bcc.n	8003e22 <HAL_I2C_IsDeviceReady+0x13a>
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d103      	bne.n	8003e2a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	22a0      	movs	r2, #160	; 0xa0
 8003e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	695b      	ldr	r3, [r3, #20]
 8003e30:	f003 0302 	and.w	r3, r3, #2
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	bf0c      	ite	eq
 8003e38:	2301      	moveq	r3, #1
 8003e3a:	2300      	movne	r3, #0
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e4e:	bf0c      	ite	eq
 8003e50:	2301      	moveq	r3, #1
 8003e52:	2300      	movne	r3, #0
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2ba0      	cmp	r3, #160	; 0xa0
 8003e62:	d005      	beq.n	8003e70 <HAL_I2C_IsDeviceReady+0x188>
 8003e64:	7dfb      	ldrb	r3, [r7, #23]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d102      	bne.n	8003e70 <HAL_I2C_IsDeviceReady+0x188>
 8003e6a:	7dbb      	ldrb	r3, [r7, #22]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d0cd      	beq.n	8003e0c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2220      	movs	r2, #32
 8003e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d129      	bne.n	8003eda <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e94:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e96:	2300      	movs	r3, #0
 8003e98:	613b      	str	r3, [r7, #16]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	695b      	ldr	r3, [r3, #20]
 8003ea0:	613b      	str	r3, [r7, #16]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	613b      	str	r3, [r7, #16]
 8003eaa:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	9300      	str	r3, [sp, #0]
 8003eb0:	2319      	movs	r3, #25
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	4921      	ldr	r1, [pc, #132]	; (8003f3c <HAL_I2C_IsDeviceReady+0x254>)
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	f000 f9c2 	bl	8004240 <I2C_WaitOnFlagUntilTimeout>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e036      	b.n	8003f34 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2220      	movs	r2, #32
 8003eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	e02c      	b.n	8003f34 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ee8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ef2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	9300      	str	r3, [sp, #0]
 8003ef8:	2319      	movs	r3, #25
 8003efa:	2201      	movs	r2, #1
 8003efc:	490f      	ldr	r1, [pc, #60]	; (8003f3c <HAL_I2C_IsDeviceReady+0x254>)
 8003efe:	68f8      	ldr	r0, [r7, #12]
 8003f00:	f000 f99e 	bl	8004240 <I2C_WaitOnFlagUntilTimeout>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e012      	b.n	8003f34 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	3301      	adds	r3, #1
 8003f12:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003f14:	69ba      	ldr	r2, [r7, #24]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	f4ff af32 	bcc.w	8003d82 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2220      	movs	r2, #32
 8003f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e000      	b.n	8003f34 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003f32:	2302      	movs	r3, #2
  }
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3720      	adds	r7, #32
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	00100002 	.word	0x00100002
 8003f40:	ffff0000 	.word	0xffff0000

08003f44 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b088      	sub	sp, #32
 8003f48:	af02      	add	r7, sp, #8
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	4608      	mov	r0, r1
 8003f4e:	4611      	mov	r1, r2
 8003f50:	461a      	mov	r2, r3
 8003f52:	4603      	mov	r3, r0
 8003f54:	817b      	strh	r3, [r7, #10]
 8003f56:	460b      	mov	r3, r1
 8003f58:	813b      	strh	r3, [r7, #8]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f6c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f70:	9300      	str	r3, [sp, #0]
 8003f72:	6a3b      	ldr	r3, [r7, #32]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f000 f960 	bl	8004240 <I2C_WaitOnFlagUntilTimeout>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00d      	beq.n	8003fa2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f94:	d103      	bne.n	8003f9e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f9c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e05f      	b.n	8004062 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003fa2:	897b      	ldrh	r3, [r7, #10]
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003fb0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb4:	6a3a      	ldr	r2, [r7, #32]
 8003fb6:	492d      	ldr	r1, [pc, #180]	; (800406c <I2C_RequestMemoryWrite+0x128>)
 8003fb8:	68f8      	ldr	r0, [r7, #12]
 8003fba:	f000 f998 	bl	80042ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d001      	beq.n	8003fc8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e04c      	b.n	8004062 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fc8:	2300      	movs	r3, #0
 8003fca:	617b      	str	r3, [r7, #20]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	617b      	str	r3, [r7, #20]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	617b      	str	r3, [r7, #20]
 8003fdc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fe0:	6a39      	ldr	r1, [r7, #32]
 8003fe2:	68f8      	ldr	r0, [r7, #12]
 8003fe4:	f000 fa02 	bl	80043ec <I2C_WaitOnTXEFlagUntilTimeout>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00d      	beq.n	800400a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff2:	2b04      	cmp	r3, #4
 8003ff4:	d107      	bne.n	8004006 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004004:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e02b      	b.n	8004062 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800400a:	88fb      	ldrh	r3, [r7, #6]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d105      	bne.n	800401c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004010:	893b      	ldrh	r3, [r7, #8]
 8004012:	b2da      	uxtb	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	611a      	str	r2, [r3, #16]
 800401a:	e021      	b.n	8004060 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800401c:	893b      	ldrh	r3, [r7, #8]
 800401e:	0a1b      	lsrs	r3, r3, #8
 8004020:	b29b      	uxth	r3, r3
 8004022:	b2da      	uxtb	r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800402a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800402c:	6a39      	ldr	r1, [r7, #32]
 800402e:	68f8      	ldr	r0, [r7, #12]
 8004030:	f000 f9dc 	bl	80043ec <I2C_WaitOnTXEFlagUntilTimeout>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00d      	beq.n	8004056 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403e:	2b04      	cmp	r3, #4
 8004040:	d107      	bne.n	8004052 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004050:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e005      	b.n	8004062 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004056:	893b      	ldrh	r3, [r7, #8]
 8004058:	b2da      	uxtb	r2, r3
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3718      	adds	r7, #24
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	00010002 	.word	0x00010002

08004070 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b088      	sub	sp, #32
 8004074:	af02      	add	r7, sp, #8
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	4608      	mov	r0, r1
 800407a:	4611      	mov	r1, r2
 800407c:	461a      	mov	r2, r3
 800407e:	4603      	mov	r3, r0
 8004080:	817b      	strh	r3, [r7, #10]
 8004082:	460b      	mov	r3, r1
 8004084:	813b      	strh	r3, [r7, #8]
 8004086:	4613      	mov	r3, r2
 8004088:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004098:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ac:	9300      	str	r3, [sp, #0]
 80040ae:	6a3b      	ldr	r3, [r7, #32]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	f000 f8c2 	bl	8004240 <I2C_WaitOnFlagUntilTimeout>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00d      	beq.n	80040de <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040d0:	d103      	bne.n	80040da <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e0aa      	b.n	8004234 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040de:	897b      	ldrh	r3, [r7, #10]
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	461a      	mov	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f0:	6a3a      	ldr	r2, [r7, #32]
 80040f2:	4952      	ldr	r1, [pc, #328]	; (800423c <I2C_RequestMemoryRead+0x1cc>)
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	f000 f8fa 	bl	80042ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d001      	beq.n	8004104 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e097      	b.n	8004234 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004104:	2300      	movs	r3, #0
 8004106:	617b      	str	r3, [r7, #20]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	617b      	str	r3, [r7, #20]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	617b      	str	r3, [r7, #20]
 8004118:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800411a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800411c:	6a39      	ldr	r1, [r7, #32]
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f000 f964 	bl	80043ec <I2C_WaitOnTXEFlagUntilTimeout>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00d      	beq.n	8004146 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412e:	2b04      	cmp	r3, #4
 8004130:	d107      	bne.n	8004142 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004140:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e076      	b.n	8004234 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004146:	88fb      	ldrh	r3, [r7, #6]
 8004148:	2b01      	cmp	r3, #1
 800414a:	d105      	bne.n	8004158 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800414c:	893b      	ldrh	r3, [r7, #8]
 800414e:	b2da      	uxtb	r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	611a      	str	r2, [r3, #16]
 8004156:	e021      	b.n	800419c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004158:	893b      	ldrh	r3, [r7, #8]
 800415a:	0a1b      	lsrs	r3, r3, #8
 800415c:	b29b      	uxth	r3, r3
 800415e:	b2da      	uxtb	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004168:	6a39      	ldr	r1, [r7, #32]
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	f000 f93e 	bl	80043ec <I2C_WaitOnTXEFlagUntilTimeout>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00d      	beq.n	8004192 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417a:	2b04      	cmp	r3, #4
 800417c:	d107      	bne.n	800418e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800418c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e050      	b.n	8004234 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004192:	893b      	ldrh	r3, [r7, #8]
 8004194:	b2da      	uxtb	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800419c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800419e:	6a39      	ldr	r1, [r7, #32]
 80041a0:	68f8      	ldr	r0, [r7, #12]
 80041a2:	f000 f923 	bl	80043ec <I2C_WaitOnTXEFlagUntilTimeout>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d00d      	beq.n	80041c8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b0:	2b04      	cmp	r3, #4
 80041b2:	d107      	bne.n	80041c4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041c2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e035      	b.n	8004234 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041d6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041da:	9300      	str	r3, [sp, #0]
 80041dc:	6a3b      	ldr	r3, [r7, #32]
 80041de:	2200      	movs	r2, #0
 80041e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f000 f82b 	bl	8004240 <I2C_WaitOnFlagUntilTimeout>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00d      	beq.n	800420c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041fe:	d103      	bne.n	8004208 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004206:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e013      	b.n	8004234 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800420c:	897b      	ldrh	r3, [r7, #10]
 800420e:	b2db      	uxtb	r3, r3
 8004210:	f043 0301 	orr.w	r3, r3, #1
 8004214:	b2da      	uxtb	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800421c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421e:	6a3a      	ldr	r2, [r7, #32]
 8004220:	4906      	ldr	r1, [pc, #24]	; (800423c <I2C_RequestMemoryRead+0x1cc>)
 8004222:	68f8      	ldr	r0, [r7, #12]
 8004224:	f000 f863 	bl	80042ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e000      	b.n	8004234 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	3718      	adds	r7, #24
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}
 800423c:	00010002 	.word	0x00010002

08004240 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	603b      	str	r3, [r7, #0]
 800424c:	4613      	mov	r3, r2
 800424e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004250:	e025      	b.n	800429e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004258:	d021      	beq.n	800429e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800425a:	f7fe fde9 	bl	8002e30 <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	683a      	ldr	r2, [r7, #0]
 8004266:	429a      	cmp	r2, r3
 8004268:	d302      	bcc.n	8004270 <I2C_WaitOnFlagUntilTimeout+0x30>
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d116      	bne.n	800429e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2220      	movs	r2, #32
 800427a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2200      	movs	r2, #0
 8004282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428a:	f043 0220 	orr.w	r2, r3, #32
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e023      	b.n	80042e6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	0c1b      	lsrs	r3, r3, #16
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d10d      	bne.n	80042c4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	43da      	mvns	r2, r3
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	4013      	ands	r3, r2
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	bf0c      	ite	eq
 80042ba:	2301      	moveq	r3, #1
 80042bc:	2300      	movne	r3, #0
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	461a      	mov	r2, r3
 80042c2:	e00c      	b.n	80042de <I2C_WaitOnFlagUntilTimeout+0x9e>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	43da      	mvns	r2, r3
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	4013      	ands	r3, r2
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	bf0c      	ite	eq
 80042d6:	2301      	moveq	r3, #1
 80042d8:	2300      	movne	r3, #0
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	461a      	mov	r2, r3
 80042de:	79fb      	ldrb	r3, [r7, #7]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d0b6      	beq.n	8004252 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3710      	adds	r7, #16
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b084      	sub	sp, #16
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	60f8      	str	r0, [r7, #12]
 80042f6:	60b9      	str	r1, [r7, #8]
 80042f8:	607a      	str	r2, [r7, #4]
 80042fa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042fc:	e051      	b.n	80043a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004308:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800430c:	d123      	bne.n	8004356 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800431c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004326:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2200      	movs	r2, #0
 800432c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2220      	movs	r2, #32
 8004332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	f043 0204 	orr.w	r2, r3, #4
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e046      	b.n	80043e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800435c:	d021      	beq.n	80043a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800435e:	f7fe fd67 	bl	8002e30 <HAL_GetTick>
 8004362:	4602      	mov	r2, r0
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	429a      	cmp	r2, r3
 800436c:	d302      	bcc.n	8004374 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d116      	bne.n	80043a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2220      	movs	r2, #32
 800437e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438e:	f043 0220 	orr.w	r2, r3, #32
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e020      	b.n	80043e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	0c1b      	lsrs	r3, r3, #16
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d10c      	bne.n	80043c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	43da      	mvns	r2, r3
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	4013      	ands	r3, r2
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	bf14      	ite	ne
 80043be:	2301      	movne	r3, #1
 80043c0:	2300      	moveq	r3, #0
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	e00b      	b.n	80043de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	43da      	mvns	r2, r3
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	4013      	ands	r3, r2
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	bf14      	ite	ne
 80043d8:	2301      	movne	r3, #1
 80043da:	2300      	moveq	r3, #0
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d18d      	bne.n	80042fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80043e2:	2300      	movs	r3, #0
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3710      	adds	r7, #16
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043f8:	e02d      	b.n	8004456 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043fa:	68f8      	ldr	r0, [r7, #12]
 80043fc:	f000 f8ce 	bl	800459c <I2C_IsAcknowledgeFailed>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d001      	beq.n	800440a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e02d      	b.n	8004466 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004410:	d021      	beq.n	8004456 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004412:	f7fe fd0d 	bl	8002e30 <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	68ba      	ldr	r2, [r7, #8]
 800441e:	429a      	cmp	r2, r3
 8004420:	d302      	bcc.n	8004428 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d116      	bne.n	8004456 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2200      	movs	r2, #0
 800442c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2220      	movs	r2, #32
 8004432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004442:	f043 0220 	orr.w	r2, r3, #32
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e007      	b.n	8004466 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	695b      	ldr	r3, [r3, #20]
 800445c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004460:	2b80      	cmp	r3, #128	; 0x80
 8004462:	d1ca      	bne.n	80043fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3710      	adds	r7, #16
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800446e:	b580      	push	{r7, lr}
 8004470:	b084      	sub	sp, #16
 8004472:	af00      	add	r7, sp, #0
 8004474:	60f8      	str	r0, [r7, #12]
 8004476:	60b9      	str	r1, [r7, #8]
 8004478:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800447a:	e02d      	b.n	80044d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800447c:	68f8      	ldr	r0, [r7, #12]
 800447e:	f000 f88d 	bl	800459c <I2C_IsAcknowledgeFailed>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d001      	beq.n	800448c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e02d      	b.n	80044e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004492:	d021      	beq.n	80044d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004494:	f7fe fccc 	bl	8002e30 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	68ba      	ldr	r2, [r7, #8]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d302      	bcc.n	80044aa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d116      	bne.n	80044d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2220      	movs	r2, #32
 80044b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c4:	f043 0220 	orr.w	r2, r3, #32
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e007      	b.n	80044e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	f003 0304 	and.w	r3, r3, #4
 80044e2:	2b04      	cmp	r3, #4
 80044e4:	d1ca      	bne.n	800447c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3710      	adds	r7, #16
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044fc:	e042      	b.n	8004584 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	695b      	ldr	r3, [r3, #20]
 8004504:	f003 0310 	and.w	r3, r3, #16
 8004508:	2b10      	cmp	r3, #16
 800450a:	d119      	bne.n	8004540 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f06f 0210 	mvn.w	r2, #16
 8004514:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2220      	movs	r2, #32
 8004520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e029      	b.n	8004594 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004540:	f7fe fc76 	bl	8002e30 <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	68ba      	ldr	r2, [r7, #8]
 800454c:	429a      	cmp	r2, r3
 800454e:	d302      	bcc.n	8004556 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d116      	bne.n	8004584 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2220      	movs	r2, #32
 8004560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004570:	f043 0220 	orr.w	r2, r3, #32
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e007      	b.n	8004594 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800458e:	2b40      	cmp	r3, #64	; 0x40
 8004590:	d1b5      	bne.n	80044fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	3710      	adds	r7, #16
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045b2:	d11b      	bne.n	80045ec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80045bc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2220      	movs	r2, #32
 80045c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d8:	f043 0204 	orr.w	r2, r3, #4
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e000      	b.n	80045ee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	370c      	adds	r7, #12
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
	...

080045fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b086      	sub	sp, #24
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d101      	bne.n	800460e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e264      	b.n	8004ad8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	2b00      	cmp	r3, #0
 8004618:	d075      	beq.n	8004706 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800461a:	4ba3      	ldr	r3, [pc, #652]	; (80048a8 <HAL_RCC_OscConfig+0x2ac>)
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f003 030c 	and.w	r3, r3, #12
 8004622:	2b04      	cmp	r3, #4
 8004624:	d00c      	beq.n	8004640 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004626:	4ba0      	ldr	r3, [pc, #640]	; (80048a8 <HAL_RCC_OscConfig+0x2ac>)
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800462e:	2b08      	cmp	r3, #8
 8004630:	d112      	bne.n	8004658 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004632:	4b9d      	ldr	r3, [pc, #628]	; (80048a8 <HAL_RCC_OscConfig+0x2ac>)
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800463a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800463e:	d10b      	bne.n	8004658 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004640:	4b99      	ldr	r3, [pc, #612]	; (80048a8 <HAL_RCC_OscConfig+0x2ac>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d05b      	beq.n	8004704 <HAL_RCC_OscConfig+0x108>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d157      	bne.n	8004704 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e23f      	b.n	8004ad8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004660:	d106      	bne.n	8004670 <HAL_RCC_OscConfig+0x74>
 8004662:	4b91      	ldr	r3, [pc, #580]	; (80048a8 <HAL_RCC_OscConfig+0x2ac>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a90      	ldr	r2, [pc, #576]	; (80048a8 <HAL_RCC_OscConfig+0x2ac>)
 8004668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800466c:	6013      	str	r3, [r2, #0]
 800466e:	e01d      	b.n	80046ac <HAL_RCC_OscConfig+0xb0>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004678:	d10c      	bne.n	8004694 <HAL_RCC_OscConfig+0x98>
 800467a:	4b8b      	ldr	r3, [pc, #556]	; (80048a8 <HAL_RCC_OscConfig+0x2ac>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a8a      	ldr	r2, [pc, #552]	; (80048a8 <HAL_RCC_OscConfig+0x2ac>)
 8004680:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004684:	6013      	str	r3, [r2, #0]
 8004686:	4b88      	ldr	r3, [pc, #544]	; (80048a8 <HAL_RCC_OscConfig+0x2ac>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a87      	ldr	r2, [pc, #540]	; (80048a8 <HAL_RCC_OscConfig+0x2ac>)
 800468c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004690:	6013      	str	r3, [r2, #0]
 8004692:	e00b      	b.n	80046ac <HAL_RCC_OscConfig+0xb0>
 8004694:	4b84      	ldr	r3, [pc, #528]	; (80048a8 <HAL_RCC_OscConfig+0x2ac>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a83      	ldr	r2, [pc, #524]	; (80048a8 <HAL_RCC_OscConfig+0x2ac>)
 800469a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800469e:	6013      	str	r3, [r2, #0]
 80046a0:	4b81      	ldr	r3, [pc, #516]	; (80048a8 <HAL_RCC_OscConfig+0x2ac>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a80      	ldr	r2, [pc, #512]	; (80048a8 <HAL_RCC_OscConfig+0x2ac>)
 80046a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d013      	beq.n	80046dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b4:	f7fe fbbc 	bl	8002e30 <HAL_GetTick>
 80046b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ba:	e008      	b.n	80046ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046bc:	f7fe fbb8 	bl	8002e30 <HAL_GetTick>
 80046c0:	4602      	mov	r2, r0
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	2b64      	cmp	r3, #100	; 0x64
 80046c8:	d901      	bls.n	80046ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e204      	b.n	8004ad8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ce:	4b76      	ldr	r3, [pc, #472]	; (80048a8 <HAL_RCC_OscConfig+0x2ac>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d0f0      	beq.n	80046bc <HAL_RCC_OscConfig+0xc0>
 80046da:	e014      	b.n	8004706 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046dc:	f7fe fba8 	bl	8002e30 <HAL_GetTick>
 80046e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046e2:	e008      	b.n	80046f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046e4:	f7fe fba4 	bl	8002e30 <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	2b64      	cmp	r3, #100	; 0x64
 80046f0:	d901      	bls.n	80046f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e1f0      	b.n	8004ad8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046f6:	4b6c      	ldr	r3, [pc, #432]	; (80048a8 <HAL_RCC_OscConfig+0x2ac>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1f0      	bne.n	80046e4 <HAL_RCC_OscConfig+0xe8>
 8004702:	e000      	b.n	8004706 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004704:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d063      	beq.n	80047da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004712:	4b65      	ldr	r3, [pc, #404]	; (80048a8 <HAL_RCC_OscConfig+0x2ac>)
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f003 030c 	and.w	r3, r3, #12
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00b      	beq.n	8004736 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800471e:	4b62      	ldr	r3, [pc, #392]	; (80048a8 <HAL_RCC_OscConfig+0x2ac>)
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004726:	2b08      	cmp	r3, #8
 8004728:	d11c      	bne.n	8004764 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800472a:	4b5f      	ldr	r3, [pc, #380]	; (80048a8 <HAL_RCC_OscConfig+0x2ac>)
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d116      	bne.n	8004764 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004736:	4b5c      	ldr	r3, [pc, #368]	; (80048a8 <HAL_RCC_OscConfig+0x2ac>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d005      	beq.n	800474e <HAL_RCC_OscConfig+0x152>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	2b01      	cmp	r3, #1
 8004748:	d001      	beq.n	800474e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e1c4      	b.n	8004ad8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800474e:	4b56      	ldr	r3, [pc, #344]	; (80048a8 <HAL_RCC_OscConfig+0x2ac>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	00db      	lsls	r3, r3, #3
 800475c:	4952      	ldr	r1, [pc, #328]	; (80048a8 <HAL_RCC_OscConfig+0x2ac>)
 800475e:	4313      	orrs	r3, r2
 8004760:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004762:	e03a      	b.n	80047da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d020      	beq.n	80047ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800476c:	4b4f      	ldr	r3, [pc, #316]	; (80048ac <HAL_RCC_OscConfig+0x2b0>)
 800476e:	2201      	movs	r2, #1
 8004770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004772:	f7fe fb5d 	bl	8002e30 <HAL_GetTick>
 8004776:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004778:	e008      	b.n	800478c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800477a:	f7fe fb59 	bl	8002e30 <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	2b02      	cmp	r3, #2
 8004786:	d901      	bls.n	800478c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e1a5      	b.n	8004ad8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800478c:	4b46      	ldr	r3, [pc, #280]	; (80048a8 <HAL_RCC_OscConfig+0x2ac>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0302 	and.w	r3, r3, #2
 8004794:	2b00      	cmp	r3, #0
 8004796:	d0f0      	beq.n	800477a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004798:	4b43      	ldr	r3, [pc, #268]	; (80048a8 <HAL_RCC_OscConfig+0x2ac>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	00db      	lsls	r3, r3, #3
 80047a6:	4940      	ldr	r1, [pc, #256]	; (80048a8 <HAL_RCC_OscConfig+0x2ac>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	600b      	str	r3, [r1, #0]
 80047ac:	e015      	b.n	80047da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047ae:	4b3f      	ldr	r3, [pc, #252]	; (80048ac <HAL_RCC_OscConfig+0x2b0>)
 80047b0:	2200      	movs	r2, #0
 80047b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b4:	f7fe fb3c 	bl	8002e30 <HAL_GetTick>
 80047b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047ba:	e008      	b.n	80047ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047bc:	f7fe fb38 	bl	8002e30 <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d901      	bls.n	80047ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e184      	b.n	8004ad8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047ce:	4b36      	ldr	r3, [pc, #216]	; (80048a8 <HAL_RCC_OscConfig+0x2ac>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1f0      	bne.n	80047bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0308 	and.w	r3, r3, #8
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d030      	beq.n	8004848 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d016      	beq.n	800481c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047ee:	4b30      	ldr	r3, [pc, #192]	; (80048b0 <HAL_RCC_OscConfig+0x2b4>)
 80047f0:	2201      	movs	r2, #1
 80047f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047f4:	f7fe fb1c 	bl	8002e30 <HAL_GetTick>
 80047f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047fa:	e008      	b.n	800480e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047fc:	f7fe fb18 	bl	8002e30 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	2b02      	cmp	r3, #2
 8004808:	d901      	bls.n	800480e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e164      	b.n	8004ad8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800480e:	4b26      	ldr	r3, [pc, #152]	; (80048a8 <HAL_RCC_OscConfig+0x2ac>)
 8004810:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004812:	f003 0302 	and.w	r3, r3, #2
 8004816:	2b00      	cmp	r3, #0
 8004818:	d0f0      	beq.n	80047fc <HAL_RCC_OscConfig+0x200>
 800481a:	e015      	b.n	8004848 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800481c:	4b24      	ldr	r3, [pc, #144]	; (80048b0 <HAL_RCC_OscConfig+0x2b4>)
 800481e:	2200      	movs	r2, #0
 8004820:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004822:	f7fe fb05 	bl	8002e30 <HAL_GetTick>
 8004826:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004828:	e008      	b.n	800483c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800482a:	f7fe fb01 	bl	8002e30 <HAL_GetTick>
 800482e:	4602      	mov	r2, r0
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	2b02      	cmp	r3, #2
 8004836:	d901      	bls.n	800483c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	e14d      	b.n	8004ad8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800483c:	4b1a      	ldr	r3, [pc, #104]	; (80048a8 <HAL_RCC_OscConfig+0x2ac>)
 800483e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004840:	f003 0302 	and.w	r3, r3, #2
 8004844:	2b00      	cmp	r3, #0
 8004846:	d1f0      	bne.n	800482a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0304 	and.w	r3, r3, #4
 8004850:	2b00      	cmp	r3, #0
 8004852:	f000 80a0 	beq.w	8004996 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004856:	2300      	movs	r3, #0
 8004858:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800485a:	4b13      	ldr	r3, [pc, #76]	; (80048a8 <HAL_RCC_OscConfig+0x2ac>)
 800485c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d10f      	bne.n	8004886 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004866:	2300      	movs	r3, #0
 8004868:	60bb      	str	r3, [r7, #8]
 800486a:	4b0f      	ldr	r3, [pc, #60]	; (80048a8 <HAL_RCC_OscConfig+0x2ac>)
 800486c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486e:	4a0e      	ldr	r2, [pc, #56]	; (80048a8 <HAL_RCC_OscConfig+0x2ac>)
 8004870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004874:	6413      	str	r3, [r2, #64]	; 0x40
 8004876:	4b0c      	ldr	r3, [pc, #48]	; (80048a8 <HAL_RCC_OscConfig+0x2ac>)
 8004878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800487e:	60bb      	str	r3, [r7, #8]
 8004880:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004882:	2301      	movs	r3, #1
 8004884:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004886:	4b0b      	ldr	r3, [pc, #44]	; (80048b4 <HAL_RCC_OscConfig+0x2b8>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800488e:	2b00      	cmp	r3, #0
 8004890:	d121      	bne.n	80048d6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004892:	4b08      	ldr	r3, [pc, #32]	; (80048b4 <HAL_RCC_OscConfig+0x2b8>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a07      	ldr	r2, [pc, #28]	; (80048b4 <HAL_RCC_OscConfig+0x2b8>)
 8004898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800489c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800489e:	f7fe fac7 	bl	8002e30 <HAL_GetTick>
 80048a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048a4:	e011      	b.n	80048ca <HAL_RCC_OscConfig+0x2ce>
 80048a6:	bf00      	nop
 80048a8:	40023800 	.word	0x40023800
 80048ac:	42470000 	.word	0x42470000
 80048b0:	42470e80 	.word	0x42470e80
 80048b4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048b8:	f7fe faba 	bl	8002e30 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d901      	bls.n	80048ca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e106      	b.n	8004ad8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ca:	4b85      	ldr	r3, [pc, #532]	; (8004ae0 <HAL_RCC_OscConfig+0x4e4>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d0f0      	beq.n	80048b8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d106      	bne.n	80048ec <HAL_RCC_OscConfig+0x2f0>
 80048de:	4b81      	ldr	r3, [pc, #516]	; (8004ae4 <HAL_RCC_OscConfig+0x4e8>)
 80048e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048e2:	4a80      	ldr	r2, [pc, #512]	; (8004ae4 <HAL_RCC_OscConfig+0x4e8>)
 80048e4:	f043 0301 	orr.w	r3, r3, #1
 80048e8:	6713      	str	r3, [r2, #112]	; 0x70
 80048ea:	e01c      	b.n	8004926 <HAL_RCC_OscConfig+0x32a>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	2b05      	cmp	r3, #5
 80048f2:	d10c      	bne.n	800490e <HAL_RCC_OscConfig+0x312>
 80048f4:	4b7b      	ldr	r3, [pc, #492]	; (8004ae4 <HAL_RCC_OscConfig+0x4e8>)
 80048f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f8:	4a7a      	ldr	r2, [pc, #488]	; (8004ae4 <HAL_RCC_OscConfig+0x4e8>)
 80048fa:	f043 0304 	orr.w	r3, r3, #4
 80048fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004900:	4b78      	ldr	r3, [pc, #480]	; (8004ae4 <HAL_RCC_OscConfig+0x4e8>)
 8004902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004904:	4a77      	ldr	r2, [pc, #476]	; (8004ae4 <HAL_RCC_OscConfig+0x4e8>)
 8004906:	f043 0301 	orr.w	r3, r3, #1
 800490a:	6713      	str	r3, [r2, #112]	; 0x70
 800490c:	e00b      	b.n	8004926 <HAL_RCC_OscConfig+0x32a>
 800490e:	4b75      	ldr	r3, [pc, #468]	; (8004ae4 <HAL_RCC_OscConfig+0x4e8>)
 8004910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004912:	4a74      	ldr	r2, [pc, #464]	; (8004ae4 <HAL_RCC_OscConfig+0x4e8>)
 8004914:	f023 0301 	bic.w	r3, r3, #1
 8004918:	6713      	str	r3, [r2, #112]	; 0x70
 800491a:	4b72      	ldr	r3, [pc, #456]	; (8004ae4 <HAL_RCC_OscConfig+0x4e8>)
 800491c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800491e:	4a71      	ldr	r2, [pc, #452]	; (8004ae4 <HAL_RCC_OscConfig+0x4e8>)
 8004920:	f023 0304 	bic.w	r3, r3, #4
 8004924:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d015      	beq.n	800495a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800492e:	f7fe fa7f 	bl	8002e30 <HAL_GetTick>
 8004932:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004934:	e00a      	b.n	800494c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004936:	f7fe fa7b 	bl	8002e30 <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	f241 3288 	movw	r2, #5000	; 0x1388
 8004944:	4293      	cmp	r3, r2
 8004946:	d901      	bls.n	800494c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e0c5      	b.n	8004ad8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800494c:	4b65      	ldr	r3, [pc, #404]	; (8004ae4 <HAL_RCC_OscConfig+0x4e8>)
 800494e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004950:	f003 0302 	and.w	r3, r3, #2
 8004954:	2b00      	cmp	r3, #0
 8004956:	d0ee      	beq.n	8004936 <HAL_RCC_OscConfig+0x33a>
 8004958:	e014      	b.n	8004984 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800495a:	f7fe fa69 	bl	8002e30 <HAL_GetTick>
 800495e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004960:	e00a      	b.n	8004978 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004962:	f7fe fa65 	bl	8002e30 <HAL_GetTick>
 8004966:	4602      	mov	r2, r0
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004970:	4293      	cmp	r3, r2
 8004972:	d901      	bls.n	8004978 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004974:	2303      	movs	r3, #3
 8004976:	e0af      	b.n	8004ad8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004978:	4b5a      	ldr	r3, [pc, #360]	; (8004ae4 <HAL_RCC_OscConfig+0x4e8>)
 800497a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800497c:	f003 0302 	and.w	r3, r3, #2
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1ee      	bne.n	8004962 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004984:	7dfb      	ldrb	r3, [r7, #23]
 8004986:	2b01      	cmp	r3, #1
 8004988:	d105      	bne.n	8004996 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800498a:	4b56      	ldr	r3, [pc, #344]	; (8004ae4 <HAL_RCC_OscConfig+0x4e8>)
 800498c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498e:	4a55      	ldr	r2, [pc, #340]	; (8004ae4 <HAL_RCC_OscConfig+0x4e8>)
 8004990:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004994:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	2b00      	cmp	r3, #0
 800499c:	f000 809b 	beq.w	8004ad6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049a0:	4b50      	ldr	r3, [pc, #320]	; (8004ae4 <HAL_RCC_OscConfig+0x4e8>)
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f003 030c 	and.w	r3, r3, #12
 80049a8:	2b08      	cmp	r3, #8
 80049aa:	d05c      	beq.n	8004a66 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	699b      	ldr	r3, [r3, #24]
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d141      	bne.n	8004a38 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049b4:	4b4c      	ldr	r3, [pc, #304]	; (8004ae8 <HAL_RCC_OscConfig+0x4ec>)
 80049b6:	2200      	movs	r2, #0
 80049b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ba:	f7fe fa39 	bl	8002e30 <HAL_GetTick>
 80049be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049c0:	e008      	b.n	80049d4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049c2:	f7fe fa35 	bl	8002e30 <HAL_GetTick>
 80049c6:	4602      	mov	r2, r0
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d901      	bls.n	80049d4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e081      	b.n	8004ad8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049d4:	4b43      	ldr	r3, [pc, #268]	; (8004ae4 <HAL_RCC_OscConfig+0x4e8>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d1f0      	bne.n	80049c2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	69da      	ldr	r2, [r3, #28]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a1b      	ldr	r3, [r3, #32]
 80049e8:	431a      	orrs	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ee:	019b      	lsls	r3, r3, #6
 80049f0:	431a      	orrs	r2, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f6:	085b      	lsrs	r3, r3, #1
 80049f8:	3b01      	subs	r3, #1
 80049fa:	041b      	lsls	r3, r3, #16
 80049fc:	431a      	orrs	r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a02:	061b      	lsls	r3, r3, #24
 8004a04:	4937      	ldr	r1, [pc, #220]	; (8004ae4 <HAL_RCC_OscConfig+0x4e8>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a0a:	4b37      	ldr	r3, [pc, #220]	; (8004ae8 <HAL_RCC_OscConfig+0x4ec>)
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a10:	f7fe fa0e 	bl	8002e30 <HAL_GetTick>
 8004a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a16:	e008      	b.n	8004a2a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a18:	f7fe fa0a 	bl	8002e30 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d901      	bls.n	8004a2a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e056      	b.n	8004ad8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a2a:	4b2e      	ldr	r3, [pc, #184]	; (8004ae4 <HAL_RCC_OscConfig+0x4e8>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d0f0      	beq.n	8004a18 <HAL_RCC_OscConfig+0x41c>
 8004a36:	e04e      	b.n	8004ad6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a38:	4b2b      	ldr	r3, [pc, #172]	; (8004ae8 <HAL_RCC_OscConfig+0x4ec>)
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a3e:	f7fe f9f7 	bl	8002e30 <HAL_GetTick>
 8004a42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a44:	e008      	b.n	8004a58 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a46:	f7fe f9f3 	bl	8002e30 <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d901      	bls.n	8004a58 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e03f      	b.n	8004ad8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a58:	4b22      	ldr	r3, [pc, #136]	; (8004ae4 <HAL_RCC_OscConfig+0x4e8>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1f0      	bne.n	8004a46 <HAL_RCC_OscConfig+0x44a>
 8004a64:	e037      	b.n	8004ad6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d101      	bne.n	8004a72 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e032      	b.n	8004ad8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a72:	4b1c      	ldr	r3, [pc, #112]	; (8004ae4 <HAL_RCC_OscConfig+0x4e8>)
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	699b      	ldr	r3, [r3, #24]
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d028      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d121      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d11a      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a9c:	68fa      	ldr	r2, [r7, #12]
 8004a9e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004aa8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d111      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab8:	085b      	lsrs	r3, r3, #1
 8004aba:	3b01      	subs	r3, #1
 8004abc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d107      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004acc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d001      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e000      	b.n	8004ad8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004ad6:	2300      	movs	r3, #0
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3718      	adds	r7, #24
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	40007000 	.word	0x40007000
 8004ae4:	40023800 	.word	0x40023800
 8004ae8:	42470060 	.word	0x42470060

08004aec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d101      	bne.n	8004b00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e0cc      	b.n	8004c9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b00:	4b68      	ldr	r3, [pc, #416]	; (8004ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0307 	and.w	r3, r3, #7
 8004b08:	683a      	ldr	r2, [r7, #0]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d90c      	bls.n	8004b28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b0e:	4b65      	ldr	r3, [pc, #404]	; (8004ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b10:	683a      	ldr	r2, [r7, #0]
 8004b12:	b2d2      	uxtb	r2, r2
 8004b14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b16:	4b63      	ldr	r3, [pc, #396]	; (8004ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0307 	and.w	r3, r3, #7
 8004b1e:	683a      	ldr	r2, [r7, #0]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d001      	beq.n	8004b28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e0b8      	b.n	8004c9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0302 	and.w	r3, r3, #2
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d020      	beq.n	8004b76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0304 	and.w	r3, r3, #4
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d005      	beq.n	8004b4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b40:	4b59      	ldr	r3, [pc, #356]	; (8004ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	4a58      	ldr	r2, [pc, #352]	; (8004ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0308 	and.w	r3, r3, #8
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d005      	beq.n	8004b64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b58:	4b53      	ldr	r3, [pc, #332]	; (8004ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	4a52      	ldr	r2, [pc, #328]	; (8004ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b64:	4b50      	ldr	r3, [pc, #320]	; (8004ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	494d      	ldr	r1, [pc, #308]	; (8004ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0301 	and.w	r3, r3, #1
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d044      	beq.n	8004c0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d107      	bne.n	8004b9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b8a:	4b47      	ldr	r3, [pc, #284]	; (8004ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d119      	bne.n	8004bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e07f      	b.n	8004c9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d003      	beq.n	8004baa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ba6:	2b03      	cmp	r3, #3
 8004ba8:	d107      	bne.n	8004bba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004baa:	4b3f      	ldr	r3, [pc, #252]	; (8004ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d109      	bne.n	8004bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e06f      	b.n	8004c9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bba:	4b3b      	ldr	r3, [pc, #236]	; (8004ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0302 	and.w	r3, r3, #2
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d101      	bne.n	8004bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e067      	b.n	8004c9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bca:	4b37      	ldr	r3, [pc, #220]	; (8004ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f023 0203 	bic.w	r2, r3, #3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	4934      	ldr	r1, [pc, #208]	; (8004ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bdc:	f7fe f928 	bl	8002e30 <HAL_GetTick>
 8004be0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004be2:	e00a      	b.n	8004bfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004be4:	f7fe f924 	bl	8002e30 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d901      	bls.n	8004bfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e04f      	b.n	8004c9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bfa:	4b2b      	ldr	r3, [pc, #172]	; (8004ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	f003 020c 	and.w	r2, r3, #12
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d1eb      	bne.n	8004be4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c0c:	4b25      	ldr	r3, [pc, #148]	; (8004ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0307 	and.w	r3, r3, #7
 8004c14:	683a      	ldr	r2, [r7, #0]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d20c      	bcs.n	8004c34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c1a:	4b22      	ldr	r3, [pc, #136]	; (8004ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c1c:	683a      	ldr	r2, [r7, #0]
 8004c1e:	b2d2      	uxtb	r2, r2
 8004c20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c22:	4b20      	ldr	r3, [pc, #128]	; (8004ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0307 	and.w	r3, r3, #7
 8004c2a:	683a      	ldr	r2, [r7, #0]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d001      	beq.n	8004c34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e032      	b.n	8004c9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0304 	and.w	r3, r3, #4
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d008      	beq.n	8004c52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c40:	4b19      	ldr	r3, [pc, #100]	; (8004ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	4916      	ldr	r1, [pc, #88]	; (8004ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0308 	and.w	r3, r3, #8
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d009      	beq.n	8004c72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c5e:	4b12      	ldr	r3, [pc, #72]	; (8004ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	00db      	lsls	r3, r3, #3
 8004c6c:	490e      	ldr	r1, [pc, #56]	; (8004ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c72:	f000 f821 	bl	8004cb8 <HAL_RCC_GetSysClockFreq>
 8004c76:	4602      	mov	r2, r0
 8004c78:	4b0b      	ldr	r3, [pc, #44]	; (8004ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	091b      	lsrs	r3, r3, #4
 8004c7e:	f003 030f 	and.w	r3, r3, #15
 8004c82:	490a      	ldr	r1, [pc, #40]	; (8004cac <HAL_RCC_ClockConfig+0x1c0>)
 8004c84:	5ccb      	ldrb	r3, [r1, r3]
 8004c86:	fa22 f303 	lsr.w	r3, r2, r3
 8004c8a:	4a09      	ldr	r2, [pc, #36]	; (8004cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c8e:	4b09      	ldr	r3, [pc, #36]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c8>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7fe f888 	bl	8002da8 <HAL_InitTick>

  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3710      	adds	r7, #16
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	40023c00 	.word	0x40023c00
 8004ca8:	40023800 	.word	0x40023800
 8004cac:	080095c8 	.word	0x080095c8
 8004cb0:	20000008 	.word	0x20000008
 8004cb4:	2000000c 	.word	0x2000000c

08004cb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cb8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004cbc:	b084      	sub	sp, #16
 8004cbe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	607b      	str	r3, [r7, #4]
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	60fb      	str	r3, [r7, #12]
 8004cc8:	2300      	movs	r3, #0
 8004cca:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cd0:	4b67      	ldr	r3, [pc, #412]	; (8004e70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f003 030c 	and.w	r3, r3, #12
 8004cd8:	2b08      	cmp	r3, #8
 8004cda:	d00d      	beq.n	8004cf8 <HAL_RCC_GetSysClockFreq+0x40>
 8004cdc:	2b08      	cmp	r3, #8
 8004cde:	f200 80bd 	bhi.w	8004e5c <HAL_RCC_GetSysClockFreq+0x1a4>
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d002      	beq.n	8004cec <HAL_RCC_GetSysClockFreq+0x34>
 8004ce6:	2b04      	cmp	r3, #4
 8004ce8:	d003      	beq.n	8004cf2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004cea:	e0b7      	b.n	8004e5c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004cec:	4b61      	ldr	r3, [pc, #388]	; (8004e74 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004cee:	60bb      	str	r3, [r7, #8]
       break;
 8004cf0:	e0b7      	b.n	8004e62 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004cf2:	4b61      	ldr	r3, [pc, #388]	; (8004e78 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004cf4:	60bb      	str	r3, [r7, #8]
      break;
 8004cf6:	e0b4      	b.n	8004e62 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004cf8:	4b5d      	ldr	r3, [pc, #372]	; (8004e70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d00:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d02:	4b5b      	ldr	r3, [pc, #364]	; (8004e70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d04d      	beq.n	8004daa <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d0e:	4b58      	ldr	r3, [pc, #352]	; (8004e70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	099b      	lsrs	r3, r3, #6
 8004d14:	461a      	mov	r2, r3
 8004d16:	f04f 0300 	mov.w	r3, #0
 8004d1a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004d1e:	f04f 0100 	mov.w	r1, #0
 8004d22:	ea02 0800 	and.w	r8, r2, r0
 8004d26:	ea03 0901 	and.w	r9, r3, r1
 8004d2a:	4640      	mov	r0, r8
 8004d2c:	4649      	mov	r1, r9
 8004d2e:	f04f 0200 	mov.w	r2, #0
 8004d32:	f04f 0300 	mov.w	r3, #0
 8004d36:	014b      	lsls	r3, r1, #5
 8004d38:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004d3c:	0142      	lsls	r2, r0, #5
 8004d3e:	4610      	mov	r0, r2
 8004d40:	4619      	mov	r1, r3
 8004d42:	ebb0 0008 	subs.w	r0, r0, r8
 8004d46:	eb61 0109 	sbc.w	r1, r1, r9
 8004d4a:	f04f 0200 	mov.w	r2, #0
 8004d4e:	f04f 0300 	mov.w	r3, #0
 8004d52:	018b      	lsls	r3, r1, #6
 8004d54:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004d58:	0182      	lsls	r2, r0, #6
 8004d5a:	1a12      	subs	r2, r2, r0
 8004d5c:	eb63 0301 	sbc.w	r3, r3, r1
 8004d60:	f04f 0000 	mov.w	r0, #0
 8004d64:	f04f 0100 	mov.w	r1, #0
 8004d68:	00d9      	lsls	r1, r3, #3
 8004d6a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d6e:	00d0      	lsls	r0, r2, #3
 8004d70:	4602      	mov	r2, r0
 8004d72:	460b      	mov	r3, r1
 8004d74:	eb12 0208 	adds.w	r2, r2, r8
 8004d78:	eb43 0309 	adc.w	r3, r3, r9
 8004d7c:	f04f 0000 	mov.w	r0, #0
 8004d80:	f04f 0100 	mov.w	r1, #0
 8004d84:	0259      	lsls	r1, r3, #9
 8004d86:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004d8a:	0250      	lsls	r0, r2, #9
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	460b      	mov	r3, r1
 8004d90:	4610      	mov	r0, r2
 8004d92:	4619      	mov	r1, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	461a      	mov	r2, r3
 8004d98:	f04f 0300 	mov.w	r3, #0
 8004d9c:	f7fb fa14 	bl	80001c8 <__aeabi_uldivmod>
 8004da0:	4602      	mov	r2, r0
 8004da2:	460b      	mov	r3, r1
 8004da4:	4613      	mov	r3, r2
 8004da6:	60fb      	str	r3, [r7, #12]
 8004da8:	e04a      	b.n	8004e40 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004daa:	4b31      	ldr	r3, [pc, #196]	; (8004e70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	099b      	lsrs	r3, r3, #6
 8004db0:	461a      	mov	r2, r3
 8004db2:	f04f 0300 	mov.w	r3, #0
 8004db6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004dba:	f04f 0100 	mov.w	r1, #0
 8004dbe:	ea02 0400 	and.w	r4, r2, r0
 8004dc2:	ea03 0501 	and.w	r5, r3, r1
 8004dc6:	4620      	mov	r0, r4
 8004dc8:	4629      	mov	r1, r5
 8004dca:	f04f 0200 	mov.w	r2, #0
 8004dce:	f04f 0300 	mov.w	r3, #0
 8004dd2:	014b      	lsls	r3, r1, #5
 8004dd4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004dd8:	0142      	lsls	r2, r0, #5
 8004dda:	4610      	mov	r0, r2
 8004ddc:	4619      	mov	r1, r3
 8004dde:	1b00      	subs	r0, r0, r4
 8004de0:	eb61 0105 	sbc.w	r1, r1, r5
 8004de4:	f04f 0200 	mov.w	r2, #0
 8004de8:	f04f 0300 	mov.w	r3, #0
 8004dec:	018b      	lsls	r3, r1, #6
 8004dee:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004df2:	0182      	lsls	r2, r0, #6
 8004df4:	1a12      	subs	r2, r2, r0
 8004df6:	eb63 0301 	sbc.w	r3, r3, r1
 8004dfa:	f04f 0000 	mov.w	r0, #0
 8004dfe:	f04f 0100 	mov.w	r1, #0
 8004e02:	00d9      	lsls	r1, r3, #3
 8004e04:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e08:	00d0      	lsls	r0, r2, #3
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	460b      	mov	r3, r1
 8004e0e:	1912      	adds	r2, r2, r4
 8004e10:	eb45 0303 	adc.w	r3, r5, r3
 8004e14:	f04f 0000 	mov.w	r0, #0
 8004e18:	f04f 0100 	mov.w	r1, #0
 8004e1c:	0299      	lsls	r1, r3, #10
 8004e1e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004e22:	0290      	lsls	r0, r2, #10
 8004e24:	4602      	mov	r2, r0
 8004e26:	460b      	mov	r3, r1
 8004e28:	4610      	mov	r0, r2
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	461a      	mov	r2, r3
 8004e30:	f04f 0300 	mov.w	r3, #0
 8004e34:	f7fb f9c8 	bl	80001c8 <__aeabi_uldivmod>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	460b      	mov	r3, r1
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e40:	4b0b      	ldr	r3, [pc, #44]	; (8004e70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	0c1b      	lsrs	r3, r3, #16
 8004e46:	f003 0303 	and.w	r3, r3, #3
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	005b      	lsls	r3, r3, #1
 8004e4e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e58:	60bb      	str	r3, [r7, #8]
      break;
 8004e5a:	e002      	b.n	8004e62 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e5c:	4b05      	ldr	r3, [pc, #20]	; (8004e74 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004e5e:	60bb      	str	r3, [r7, #8]
      break;
 8004e60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e62:	68bb      	ldr	r3, [r7, #8]
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3710      	adds	r7, #16
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004e6e:	bf00      	nop
 8004e70:	40023800 	.word	0x40023800
 8004e74:	00f42400 	.word	0x00f42400
 8004e78:	007a1200 	.word	0x007a1200

08004e7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e80:	4b03      	ldr	r3, [pc, #12]	; (8004e90 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e82:	681b      	ldr	r3, [r3, #0]
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	20000008 	.word	0x20000008

08004e94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e98:	f7ff fff0 	bl	8004e7c <HAL_RCC_GetHCLKFreq>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	4b05      	ldr	r3, [pc, #20]	; (8004eb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	0a9b      	lsrs	r3, r3, #10
 8004ea4:	f003 0307 	and.w	r3, r3, #7
 8004ea8:	4903      	ldr	r1, [pc, #12]	; (8004eb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004eaa:	5ccb      	ldrb	r3, [r1, r3]
 8004eac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	40023800 	.word	0x40023800
 8004eb8:	080095d8 	.word	0x080095d8

08004ebc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d101      	bne.n	8004ece <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e07b      	b.n	8004fc6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d108      	bne.n	8004ee8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ede:	d009      	beq.n	8004ef4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	61da      	str	r2, [r3, #28]
 8004ee6:	e005      	b.n	8004ef4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d106      	bne.n	8004f14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f7fd fd98 	bl	8002a44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2202      	movs	r2, #2
 8004f18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f2a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004f3c:	431a      	orrs	r2, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f46:	431a      	orrs	r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	f003 0302 	and.w	r3, r3, #2
 8004f50:	431a      	orrs	r2, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	f003 0301 	and.w	r3, r3, #1
 8004f5a:	431a      	orrs	r2, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f64:	431a      	orrs	r2, r3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	69db      	ldr	r3, [r3, #28]
 8004f6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f6e:	431a      	orrs	r2, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a1b      	ldr	r3, [r3, #32]
 8004f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f78:	ea42 0103 	orr.w	r1, r2, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f80:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	430a      	orrs	r2, r1
 8004f8a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	699b      	ldr	r3, [r3, #24]
 8004f90:	0c1b      	lsrs	r3, r3, #16
 8004f92:	f003 0104 	and.w	r1, r3, #4
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9a:	f003 0210 	and.w	r2, r3, #16
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	69da      	ldr	r2, [r3, #28]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fb4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3708      	adds	r7, #8
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}

08004fce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fce:	b580      	push	{r7, lr}
 8004fd0:	b088      	sub	sp, #32
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	60f8      	str	r0, [r7, #12]
 8004fd6:	60b9      	str	r1, [r7, #8]
 8004fd8:	603b      	str	r3, [r7, #0]
 8004fda:	4613      	mov	r3, r2
 8004fdc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d101      	bne.n	8004ff0 <HAL_SPI_Transmit+0x22>
 8004fec:	2302      	movs	r3, #2
 8004fee:	e126      	b.n	800523e <HAL_SPI_Transmit+0x270>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ff8:	f7fd ff1a 	bl	8002e30 <HAL_GetTick>
 8004ffc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004ffe:	88fb      	ldrh	r3, [r7, #6]
 8005000:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005008:	b2db      	uxtb	r3, r3
 800500a:	2b01      	cmp	r3, #1
 800500c:	d002      	beq.n	8005014 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800500e:	2302      	movs	r3, #2
 8005010:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005012:	e10b      	b.n	800522c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d002      	beq.n	8005020 <HAL_SPI_Transmit+0x52>
 800501a:	88fb      	ldrh	r3, [r7, #6]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d102      	bne.n	8005026 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005024:	e102      	b.n	800522c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2203      	movs	r2, #3
 800502a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2200      	movs	r2, #0
 8005032:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	68ba      	ldr	r2, [r7, #8]
 8005038:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	88fa      	ldrh	r2, [r7, #6]
 800503e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	88fa      	ldrh	r2, [r7, #6]
 8005044:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2200      	movs	r2, #0
 800504a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2200      	movs	r2, #0
 8005050:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2200      	movs	r2, #0
 8005056:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2200      	movs	r2, #0
 800505c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2200      	movs	r2, #0
 8005062:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800506c:	d10f      	bne.n	800508e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800507c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800508c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005098:	2b40      	cmp	r3, #64	; 0x40
 800509a:	d007      	beq.n	80050ac <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050b4:	d14b      	bne.n	800514e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d002      	beq.n	80050c4 <HAL_SPI_Transmit+0xf6>
 80050be:	8afb      	ldrh	r3, [r7, #22]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d13e      	bne.n	8005142 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c8:	881a      	ldrh	r2, [r3, #0]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d4:	1c9a      	adds	r2, r3, #2
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050de:	b29b      	uxth	r3, r3
 80050e0:	3b01      	subs	r3, #1
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80050e8:	e02b      	b.n	8005142 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	f003 0302 	and.w	r3, r3, #2
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d112      	bne.n	800511e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050fc:	881a      	ldrh	r2, [r3, #0]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005108:	1c9a      	adds	r2, r3, #2
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005112:	b29b      	uxth	r3, r3
 8005114:	3b01      	subs	r3, #1
 8005116:	b29a      	uxth	r2, r3
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	86da      	strh	r2, [r3, #54]	; 0x36
 800511c:	e011      	b.n	8005142 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800511e:	f7fd fe87 	bl	8002e30 <HAL_GetTick>
 8005122:	4602      	mov	r2, r0
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	683a      	ldr	r2, [r7, #0]
 800512a:	429a      	cmp	r2, r3
 800512c:	d803      	bhi.n	8005136 <HAL_SPI_Transmit+0x168>
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005134:	d102      	bne.n	800513c <HAL_SPI_Transmit+0x16e>
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d102      	bne.n	8005142 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800513c:	2303      	movs	r3, #3
 800513e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005140:	e074      	b.n	800522c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005146:	b29b      	uxth	r3, r3
 8005148:	2b00      	cmp	r3, #0
 800514a:	d1ce      	bne.n	80050ea <HAL_SPI_Transmit+0x11c>
 800514c:	e04c      	b.n	80051e8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d002      	beq.n	800515c <HAL_SPI_Transmit+0x18e>
 8005156:	8afb      	ldrh	r3, [r7, #22]
 8005158:	2b01      	cmp	r3, #1
 800515a:	d140      	bne.n	80051de <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	330c      	adds	r3, #12
 8005166:	7812      	ldrb	r2, [r2, #0]
 8005168:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800516e:	1c5a      	adds	r2, r3, #1
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005178:	b29b      	uxth	r3, r3
 800517a:	3b01      	subs	r3, #1
 800517c:	b29a      	uxth	r2, r3
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005182:	e02c      	b.n	80051de <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	f003 0302 	and.w	r3, r3, #2
 800518e:	2b02      	cmp	r3, #2
 8005190:	d113      	bne.n	80051ba <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	330c      	adds	r3, #12
 800519c:	7812      	ldrb	r2, [r2, #0]
 800519e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a4:	1c5a      	adds	r2, r3, #1
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	3b01      	subs	r3, #1
 80051b2:	b29a      	uxth	r2, r3
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	86da      	strh	r2, [r3, #54]	; 0x36
 80051b8:	e011      	b.n	80051de <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051ba:	f7fd fe39 	bl	8002e30 <HAL_GetTick>
 80051be:	4602      	mov	r2, r0
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	683a      	ldr	r2, [r7, #0]
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d803      	bhi.n	80051d2 <HAL_SPI_Transmit+0x204>
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d0:	d102      	bne.n	80051d8 <HAL_SPI_Transmit+0x20a>
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d102      	bne.n	80051de <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80051d8:	2303      	movs	r3, #3
 80051da:	77fb      	strb	r3, [r7, #31]
          goto error;
 80051dc:	e026      	b.n	800522c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d1cd      	bne.n	8005184 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80051e8:	69ba      	ldr	r2, [r7, #24]
 80051ea:	6839      	ldr	r1, [r7, #0]
 80051ec:	68f8      	ldr	r0, [r7, #12]
 80051ee:	f000 fbcb 	bl	8005988 <SPI_EndRxTxTransaction>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d002      	beq.n	80051fe <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2220      	movs	r2, #32
 80051fc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d10a      	bne.n	800521c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005206:	2300      	movs	r3, #0
 8005208:	613b      	str	r3, [r7, #16]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	613b      	str	r3, [r7, #16]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	613b      	str	r3, [r7, #16]
 800521a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005220:	2b00      	cmp	r3, #0
 8005222:	d002      	beq.n	800522a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	77fb      	strb	r3, [r7, #31]
 8005228:	e000      	b.n	800522c <HAL_SPI_Transmit+0x25e>
  }

error:
 800522a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800523c:	7ffb      	ldrb	r3, [r7, #31]
}
 800523e:	4618      	mov	r0, r3
 8005240:	3720      	adds	r7, #32
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}

08005246 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005246:	b580      	push	{r7, lr}
 8005248:	b088      	sub	sp, #32
 800524a:	af02      	add	r7, sp, #8
 800524c:	60f8      	str	r0, [r7, #12]
 800524e:	60b9      	str	r1, [r7, #8]
 8005250:	603b      	str	r3, [r7, #0]
 8005252:	4613      	mov	r3, r2
 8005254:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005256:	2300      	movs	r3, #0
 8005258:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005262:	d112      	bne.n	800528a <HAL_SPI_Receive+0x44>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d10e      	bne.n	800528a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2204      	movs	r2, #4
 8005270:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005274:	88fa      	ldrh	r2, [r7, #6]
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	9300      	str	r3, [sp, #0]
 800527a:	4613      	mov	r3, r2
 800527c:	68ba      	ldr	r2, [r7, #8]
 800527e:	68b9      	ldr	r1, [r7, #8]
 8005280:	68f8      	ldr	r0, [r7, #12]
 8005282:	f000 f8f1 	bl	8005468 <HAL_SPI_TransmitReceive>
 8005286:	4603      	mov	r3, r0
 8005288:	e0ea      	b.n	8005460 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005290:	2b01      	cmp	r3, #1
 8005292:	d101      	bne.n	8005298 <HAL_SPI_Receive+0x52>
 8005294:	2302      	movs	r3, #2
 8005296:	e0e3      	b.n	8005460 <HAL_SPI_Receive+0x21a>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80052a0:	f7fd fdc6 	bl	8002e30 <HAL_GetTick>
 80052a4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d002      	beq.n	80052b8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80052b2:	2302      	movs	r3, #2
 80052b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80052b6:	e0ca      	b.n	800544e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d002      	beq.n	80052c4 <HAL_SPI_Receive+0x7e>
 80052be:	88fb      	ldrh	r3, [r7, #6]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d102      	bne.n	80052ca <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80052c8:	e0c1      	b.n	800544e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2204      	movs	r2, #4
 80052ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2200      	movs	r2, #0
 80052d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	68ba      	ldr	r2, [r7, #8]
 80052dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	88fa      	ldrh	r2, [r7, #6]
 80052e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	88fa      	ldrh	r2, [r7, #6]
 80052e8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2200      	movs	r2, #0
 80052ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2200      	movs	r2, #0
 80052fa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2200      	movs	r2, #0
 8005300:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2200      	movs	r2, #0
 8005306:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005310:	d10f      	bne.n	8005332 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005320:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005330:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800533c:	2b40      	cmp	r3, #64	; 0x40
 800533e:	d007      	beq.n	8005350 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800534e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d162      	bne.n	800541e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005358:	e02e      	b.n	80053b8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	f003 0301 	and.w	r3, r3, #1
 8005364:	2b01      	cmp	r3, #1
 8005366:	d115      	bne.n	8005394 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f103 020c 	add.w	r2, r3, #12
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005374:	7812      	ldrb	r2, [r2, #0]
 8005376:	b2d2      	uxtb	r2, r2
 8005378:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800537e:	1c5a      	adds	r2, r3, #1
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005388:	b29b      	uxth	r3, r3
 800538a:	3b01      	subs	r3, #1
 800538c:	b29a      	uxth	r2, r3
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005392:	e011      	b.n	80053b8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005394:	f7fd fd4c 	bl	8002e30 <HAL_GetTick>
 8005398:	4602      	mov	r2, r0
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	683a      	ldr	r2, [r7, #0]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d803      	bhi.n	80053ac <HAL_SPI_Receive+0x166>
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053aa:	d102      	bne.n	80053b2 <HAL_SPI_Receive+0x16c>
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d102      	bne.n	80053b8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80053b6:	e04a      	b.n	800544e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053bc:	b29b      	uxth	r3, r3
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d1cb      	bne.n	800535a <HAL_SPI_Receive+0x114>
 80053c2:	e031      	b.n	8005428 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	f003 0301 	and.w	r3, r3, #1
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d113      	bne.n	80053fa <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68da      	ldr	r2, [r3, #12]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053dc:	b292      	uxth	r2, r2
 80053de:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e4:	1c9a      	adds	r2, r3, #2
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	3b01      	subs	r3, #1
 80053f2:	b29a      	uxth	r2, r3
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80053f8:	e011      	b.n	800541e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053fa:	f7fd fd19 	bl	8002e30 <HAL_GetTick>
 80053fe:	4602      	mov	r2, r0
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	683a      	ldr	r2, [r7, #0]
 8005406:	429a      	cmp	r2, r3
 8005408:	d803      	bhi.n	8005412 <HAL_SPI_Receive+0x1cc>
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005410:	d102      	bne.n	8005418 <HAL_SPI_Receive+0x1d2>
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d102      	bne.n	800541e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800541c:	e017      	b.n	800544e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005422:	b29b      	uxth	r3, r3
 8005424:	2b00      	cmp	r3, #0
 8005426:	d1cd      	bne.n	80053c4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005428:	693a      	ldr	r2, [r7, #16]
 800542a:	6839      	ldr	r1, [r7, #0]
 800542c:	68f8      	ldr	r0, [r7, #12]
 800542e:	f000 fa45 	bl	80058bc <SPI_EndRxTransaction>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d002      	beq.n	800543e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2220      	movs	r2, #32
 800543c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005442:	2b00      	cmp	r3, #0
 8005444:	d002      	beq.n	800544c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	75fb      	strb	r3, [r7, #23]
 800544a:	e000      	b.n	800544e <HAL_SPI_Receive+0x208>
  }

error :
 800544c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2201      	movs	r2, #1
 8005452:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2200      	movs	r2, #0
 800545a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800545e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005460:	4618      	mov	r0, r3
 8005462:	3718      	adds	r7, #24
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b08c      	sub	sp, #48	; 0x30
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	607a      	str	r2, [r7, #4]
 8005474:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005476:	2301      	movs	r3, #1
 8005478:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800547a:	2300      	movs	r3, #0
 800547c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005486:	2b01      	cmp	r3, #1
 8005488:	d101      	bne.n	800548e <HAL_SPI_TransmitReceive+0x26>
 800548a:	2302      	movs	r3, #2
 800548c:	e18a      	b.n	80057a4 <HAL_SPI_TransmitReceive+0x33c>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2201      	movs	r2, #1
 8005492:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005496:	f7fd fccb 	bl	8002e30 <HAL_GetTick>
 800549a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80054ac:	887b      	ldrh	r3, [r7, #2]
 80054ae:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80054b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d00f      	beq.n	80054d8 <HAL_SPI_TransmitReceive+0x70>
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054be:	d107      	bne.n	80054d0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d103      	bne.n	80054d0 <HAL_SPI_TransmitReceive+0x68>
 80054c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80054cc:	2b04      	cmp	r3, #4
 80054ce:	d003      	beq.n	80054d8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80054d0:	2302      	movs	r3, #2
 80054d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80054d6:	e15b      	b.n	8005790 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d005      	beq.n	80054ea <HAL_SPI_TransmitReceive+0x82>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d002      	beq.n	80054ea <HAL_SPI_TransmitReceive+0x82>
 80054e4:	887b      	ldrh	r3, [r7, #2]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d103      	bne.n	80054f2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80054f0:	e14e      	b.n	8005790 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	2b04      	cmp	r3, #4
 80054fc:	d003      	beq.n	8005506 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2205      	movs	r2, #5
 8005502:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2200      	movs	r2, #0
 800550a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	887a      	ldrh	r2, [r7, #2]
 8005516:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	887a      	ldrh	r2, [r7, #2]
 800551c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	68ba      	ldr	r2, [r7, #8]
 8005522:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	887a      	ldrh	r2, [r7, #2]
 8005528:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	887a      	ldrh	r2, [r7, #2]
 800552e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2200      	movs	r2, #0
 8005534:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005546:	2b40      	cmp	r3, #64	; 0x40
 8005548:	d007      	beq.n	800555a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005558:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005562:	d178      	bne.n	8005656 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d002      	beq.n	8005572 <HAL_SPI_TransmitReceive+0x10a>
 800556c:	8b7b      	ldrh	r3, [r7, #26]
 800556e:	2b01      	cmp	r3, #1
 8005570:	d166      	bne.n	8005640 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005576:	881a      	ldrh	r2, [r3, #0]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005582:	1c9a      	adds	r2, r3, #2
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800558c:	b29b      	uxth	r3, r3
 800558e:	3b01      	subs	r3, #1
 8005590:	b29a      	uxth	r2, r3
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005596:	e053      	b.n	8005640 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	f003 0302 	and.w	r3, r3, #2
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d11b      	bne.n	80055de <HAL_SPI_TransmitReceive+0x176>
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d016      	beq.n	80055de <HAL_SPI_TransmitReceive+0x176>
 80055b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d113      	bne.n	80055de <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ba:	881a      	ldrh	r2, [r3, #0]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c6:	1c9a      	adds	r2, r3, #2
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	3b01      	subs	r3, #1
 80055d4:	b29a      	uxth	r2, r3
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80055da:	2300      	movs	r3, #0
 80055dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f003 0301 	and.w	r3, r3, #1
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d119      	bne.n	8005620 <HAL_SPI_TransmitReceive+0x1b8>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d014      	beq.n	8005620 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68da      	ldr	r2, [r3, #12]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005600:	b292      	uxth	r2, r2
 8005602:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005608:	1c9a      	adds	r2, r3, #2
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005612:	b29b      	uxth	r3, r3
 8005614:	3b01      	subs	r3, #1
 8005616:	b29a      	uxth	r2, r3
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800561c:	2301      	movs	r3, #1
 800561e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005620:	f7fd fc06 	bl	8002e30 <HAL_GetTick>
 8005624:	4602      	mov	r2, r0
 8005626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800562c:	429a      	cmp	r2, r3
 800562e:	d807      	bhi.n	8005640 <HAL_SPI_TransmitReceive+0x1d8>
 8005630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005636:	d003      	beq.n	8005640 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005638:	2303      	movs	r3, #3
 800563a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800563e:	e0a7      	b.n	8005790 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005644:	b29b      	uxth	r3, r3
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1a6      	bne.n	8005598 <HAL_SPI_TransmitReceive+0x130>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800564e:	b29b      	uxth	r3, r3
 8005650:	2b00      	cmp	r3, #0
 8005652:	d1a1      	bne.n	8005598 <HAL_SPI_TransmitReceive+0x130>
 8005654:	e07c      	b.n	8005750 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d002      	beq.n	8005664 <HAL_SPI_TransmitReceive+0x1fc>
 800565e:	8b7b      	ldrh	r3, [r7, #26]
 8005660:	2b01      	cmp	r3, #1
 8005662:	d16b      	bne.n	800573c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	330c      	adds	r3, #12
 800566e:	7812      	ldrb	r2, [r2, #0]
 8005670:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005676:	1c5a      	adds	r2, r3, #1
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005680:	b29b      	uxth	r3, r3
 8005682:	3b01      	subs	r3, #1
 8005684:	b29a      	uxth	r2, r3
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800568a:	e057      	b.n	800573c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	f003 0302 	and.w	r3, r3, #2
 8005696:	2b02      	cmp	r3, #2
 8005698:	d11c      	bne.n	80056d4 <HAL_SPI_TransmitReceive+0x26c>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800569e:	b29b      	uxth	r3, r3
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d017      	beq.n	80056d4 <HAL_SPI_TransmitReceive+0x26c>
 80056a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d114      	bne.n	80056d4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	330c      	adds	r3, #12
 80056b4:	7812      	ldrb	r2, [r2, #0]
 80056b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056bc:	1c5a      	adds	r2, r3, #1
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	3b01      	subs	r3, #1
 80056ca:	b29a      	uxth	r2, r3
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80056d0:	2300      	movs	r3, #0
 80056d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	f003 0301 	and.w	r3, r3, #1
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d119      	bne.n	8005716 <HAL_SPI_TransmitReceive+0x2ae>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d014      	beq.n	8005716 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68da      	ldr	r2, [r3, #12]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f6:	b2d2      	uxtb	r2, r2
 80056f8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056fe:	1c5a      	adds	r2, r3, #1
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005708:	b29b      	uxth	r3, r3
 800570a:	3b01      	subs	r3, #1
 800570c:	b29a      	uxth	r2, r3
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005712:	2301      	movs	r3, #1
 8005714:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005716:	f7fd fb8b 	bl	8002e30 <HAL_GetTick>
 800571a:	4602      	mov	r2, r0
 800571c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571e:	1ad3      	subs	r3, r2, r3
 8005720:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005722:	429a      	cmp	r2, r3
 8005724:	d803      	bhi.n	800572e <HAL_SPI_TransmitReceive+0x2c6>
 8005726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800572c:	d102      	bne.n	8005734 <HAL_SPI_TransmitReceive+0x2cc>
 800572e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005730:	2b00      	cmp	r3, #0
 8005732:	d103      	bne.n	800573c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005734:	2303      	movs	r3, #3
 8005736:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800573a:	e029      	b.n	8005790 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005740:	b29b      	uxth	r3, r3
 8005742:	2b00      	cmp	r3, #0
 8005744:	d1a2      	bne.n	800568c <HAL_SPI_TransmitReceive+0x224>
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800574a:	b29b      	uxth	r3, r3
 800574c:	2b00      	cmp	r3, #0
 800574e:	d19d      	bne.n	800568c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005752:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005754:	68f8      	ldr	r0, [r7, #12]
 8005756:	f000 f917 	bl	8005988 <SPI_EndRxTxTransaction>
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d006      	beq.n	800576e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2220      	movs	r2, #32
 800576a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800576c:	e010      	b.n	8005790 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d10b      	bne.n	800578e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005776:	2300      	movs	r3, #0
 8005778:	617b      	str	r3, [r7, #20]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	617b      	str	r3, [r7, #20]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	617b      	str	r3, [r7, #20]
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	e000      	b.n	8005790 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800578e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2200      	movs	r2, #0
 800579c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80057a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3730      	adds	r7, #48	; 0x30
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b088      	sub	sp, #32
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	603b      	str	r3, [r7, #0]
 80057b8:	4613      	mov	r3, r2
 80057ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80057bc:	f7fd fb38 	bl	8002e30 <HAL_GetTick>
 80057c0:	4602      	mov	r2, r0
 80057c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c4:	1a9b      	subs	r3, r3, r2
 80057c6:	683a      	ldr	r2, [r7, #0]
 80057c8:	4413      	add	r3, r2
 80057ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80057cc:	f7fd fb30 	bl	8002e30 <HAL_GetTick>
 80057d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80057d2:	4b39      	ldr	r3, [pc, #228]	; (80058b8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	015b      	lsls	r3, r3, #5
 80057d8:	0d1b      	lsrs	r3, r3, #20
 80057da:	69fa      	ldr	r2, [r7, #28]
 80057dc:	fb02 f303 	mul.w	r3, r2, r3
 80057e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057e2:	e054      	b.n	800588e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ea:	d050      	beq.n	800588e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80057ec:	f7fd fb20 	bl	8002e30 <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	69fa      	ldr	r2, [r7, #28]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d902      	bls.n	8005802 <SPI_WaitFlagStateUntilTimeout+0x56>
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d13d      	bne.n	800587e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	685a      	ldr	r2, [r3, #4]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005810:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800581a:	d111      	bne.n	8005840 <SPI_WaitFlagStateUntilTimeout+0x94>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005824:	d004      	beq.n	8005830 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800582e:	d107      	bne.n	8005840 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800583e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005844:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005848:	d10f      	bne.n	800586a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005858:	601a      	str	r2, [r3, #0]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005868:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2201      	movs	r2, #1
 800586e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2200      	movs	r2, #0
 8005876:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800587a:	2303      	movs	r3, #3
 800587c:	e017      	b.n	80058ae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d101      	bne.n	8005888 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005884:	2300      	movs	r3, #0
 8005886:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	3b01      	subs	r3, #1
 800588c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	689a      	ldr	r2, [r3, #8]
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	4013      	ands	r3, r2
 8005898:	68ba      	ldr	r2, [r7, #8]
 800589a:	429a      	cmp	r2, r3
 800589c:	bf0c      	ite	eq
 800589e:	2301      	moveq	r3, #1
 80058a0:	2300      	movne	r3, #0
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	461a      	mov	r2, r3
 80058a6:	79fb      	ldrb	r3, [r7, #7]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d19b      	bne.n	80057e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3720      	adds	r7, #32
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop
 80058b8:	20000008 	.word	0x20000008

080058bc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b086      	sub	sp, #24
 80058c0:	af02      	add	r7, sp, #8
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058d0:	d111      	bne.n	80058f6 <SPI_EndRxTransaction+0x3a>
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058da:	d004      	beq.n	80058e6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058e4:	d107      	bne.n	80058f6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058f4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058fe:	d12a      	bne.n	8005956 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005908:	d012      	beq.n	8005930 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	9300      	str	r3, [sp, #0]
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	2200      	movs	r2, #0
 8005912:	2180      	movs	r1, #128	; 0x80
 8005914:	68f8      	ldr	r0, [r7, #12]
 8005916:	f7ff ff49 	bl	80057ac <SPI_WaitFlagStateUntilTimeout>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d02d      	beq.n	800597c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005924:	f043 0220 	orr.w	r2, r3, #32
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800592c:	2303      	movs	r3, #3
 800592e:	e026      	b.n	800597e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	9300      	str	r3, [sp, #0]
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	2200      	movs	r2, #0
 8005938:	2101      	movs	r1, #1
 800593a:	68f8      	ldr	r0, [r7, #12]
 800593c:	f7ff ff36 	bl	80057ac <SPI_WaitFlagStateUntilTimeout>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d01a      	beq.n	800597c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800594a:	f043 0220 	orr.w	r2, r3, #32
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005952:	2303      	movs	r3, #3
 8005954:	e013      	b.n	800597e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	9300      	str	r3, [sp, #0]
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	2200      	movs	r2, #0
 800595e:	2101      	movs	r1, #1
 8005960:	68f8      	ldr	r0, [r7, #12]
 8005962:	f7ff ff23 	bl	80057ac <SPI_WaitFlagStateUntilTimeout>
 8005966:	4603      	mov	r3, r0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d007      	beq.n	800597c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005970:	f043 0220 	orr.w	r2, r3, #32
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005978:	2303      	movs	r3, #3
 800597a:	e000      	b.n	800597e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3710      	adds	r7, #16
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
	...

08005988 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b088      	sub	sp, #32
 800598c:	af02      	add	r7, sp, #8
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005994:	4b1b      	ldr	r3, [pc, #108]	; (8005a04 <SPI_EndRxTxTransaction+0x7c>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a1b      	ldr	r2, [pc, #108]	; (8005a08 <SPI_EndRxTxTransaction+0x80>)
 800599a:	fba2 2303 	umull	r2, r3, r2, r3
 800599e:	0d5b      	lsrs	r3, r3, #21
 80059a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80059a4:	fb02 f303 	mul.w	r3, r2, r3
 80059a8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059b2:	d112      	bne.n	80059da <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	9300      	str	r3, [sp, #0]
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	2200      	movs	r2, #0
 80059bc:	2180      	movs	r1, #128	; 0x80
 80059be:	68f8      	ldr	r0, [r7, #12]
 80059c0:	f7ff fef4 	bl	80057ac <SPI_WaitFlagStateUntilTimeout>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d016      	beq.n	80059f8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ce:	f043 0220 	orr.w	r2, r3, #32
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e00f      	b.n	80059fa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d00a      	beq.n	80059f6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	3b01      	subs	r3, #1
 80059e4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059f0:	2b80      	cmp	r3, #128	; 0x80
 80059f2:	d0f2      	beq.n	80059da <SPI_EndRxTxTransaction+0x52>
 80059f4:	e000      	b.n	80059f8 <SPI_EndRxTxTransaction+0x70>
        break;
 80059f6:	bf00      	nop
  }

  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3718      	adds	r7, #24
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	20000008 	.word	0x20000008
 8005a08:	165e9f81 	.word	0x165e9f81

08005a0c <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d101      	bne.n	8005a22 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e034      	b.n	8005a8c <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d106      	bne.n	8005a3c <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005a36:	68f8      	ldr	r0, [r7, #12]
 8005a38:	f7fa ff4a 	bl	80008d0 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	3308      	adds	r3, #8
 8005a44:	4619      	mov	r1, r3
 8005a46:	4610      	mov	r0, r2
 8005a48:	f000 fca6 	bl	8006398 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6818      	ldr	r0, [r3, #0]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	461a      	mov	r2, r3
 8005a56:	68b9      	ldr	r1, [r7, #8]
 8005a58:	f000 fcf0 	bl	800643c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6858      	ldr	r0, [r3, #4]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	689a      	ldr	r2, [r3, #8]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a68:	6879      	ldr	r1, [r7, #4]
 8005a6a:	f000 fd25 	bl	80064b8 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	6892      	ldr	r2, [r2, #8]
 8005a76:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	6892      	ldr	r2, [r2, #8]
 8005a82:	f041 0101 	orr.w	r1, r1, #1
 8005a86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3710      	adds	r7, #16
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d101      	bne.n	8005aa6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e041      	b.n	8005b2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d106      	bne.n	8005ac0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f7fd f8c4 	bl	8002c48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2202      	movs	r2, #2
 8005ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	3304      	adds	r3, #4
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	4610      	mov	r0, r2
 8005ad4:	f000 fa96 	bl	8006004 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3708      	adds	r7, #8
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
	...

08005b34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b085      	sub	sp, #20
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d001      	beq.n	8005b4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e04e      	b.n	8005bea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2202      	movs	r2, #2
 8005b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68da      	ldr	r2, [r3, #12]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f042 0201 	orr.w	r2, r2, #1
 8005b62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a23      	ldr	r2, [pc, #140]	; (8005bf8 <HAL_TIM_Base_Start_IT+0xc4>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d022      	beq.n	8005bb4 <HAL_TIM_Base_Start_IT+0x80>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b76:	d01d      	beq.n	8005bb4 <HAL_TIM_Base_Start_IT+0x80>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a1f      	ldr	r2, [pc, #124]	; (8005bfc <HAL_TIM_Base_Start_IT+0xc8>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d018      	beq.n	8005bb4 <HAL_TIM_Base_Start_IT+0x80>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a1e      	ldr	r2, [pc, #120]	; (8005c00 <HAL_TIM_Base_Start_IT+0xcc>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d013      	beq.n	8005bb4 <HAL_TIM_Base_Start_IT+0x80>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a1c      	ldr	r2, [pc, #112]	; (8005c04 <HAL_TIM_Base_Start_IT+0xd0>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d00e      	beq.n	8005bb4 <HAL_TIM_Base_Start_IT+0x80>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a1b      	ldr	r2, [pc, #108]	; (8005c08 <HAL_TIM_Base_Start_IT+0xd4>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d009      	beq.n	8005bb4 <HAL_TIM_Base_Start_IT+0x80>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a19      	ldr	r2, [pc, #100]	; (8005c0c <HAL_TIM_Base_Start_IT+0xd8>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d004      	beq.n	8005bb4 <HAL_TIM_Base_Start_IT+0x80>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a18      	ldr	r2, [pc, #96]	; (8005c10 <HAL_TIM_Base_Start_IT+0xdc>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d111      	bne.n	8005bd8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	f003 0307 	and.w	r3, r3, #7
 8005bbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2b06      	cmp	r3, #6
 8005bc4:	d010      	beq.n	8005be8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f042 0201 	orr.w	r2, r2, #1
 8005bd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bd6:	e007      	b.n	8005be8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f042 0201 	orr.w	r2, r2, #1
 8005be6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3714      	adds	r7, #20
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop
 8005bf8:	40010000 	.word	0x40010000
 8005bfc:	40000400 	.word	0x40000400
 8005c00:	40000800 	.word	0x40000800
 8005c04:	40000c00 	.word	0x40000c00
 8005c08:	40010400 	.word	0x40010400
 8005c0c:	40014000 	.word	0x40014000
 8005c10:	40001800 	.word	0x40001800

08005c14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b082      	sub	sp, #8
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	f003 0302 	and.w	r3, r3, #2
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	d122      	bne.n	8005c70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	f003 0302 	and.w	r3, r3, #2
 8005c34:	2b02      	cmp	r3, #2
 8005c36:	d11b      	bne.n	8005c70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f06f 0202 	mvn.w	r2, #2
 8005c40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2201      	movs	r2, #1
 8005c46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	f003 0303 	and.w	r3, r3, #3
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d003      	beq.n	8005c5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 f9b5 	bl	8005fc6 <HAL_TIM_IC_CaptureCallback>
 8005c5c:	e005      	b.n	8005c6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 f9a7 	bl	8005fb2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 f9b8 	bl	8005fda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	f003 0304 	and.w	r3, r3, #4
 8005c7a:	2b04      	cmp	r3, #4
 8005c7c:	d122      	bne.n	8005cc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	f003 0304 	and.w	r3, r3, #4
 8005c88:	2b04      	cmp	r3, #4
 8005c8a:	d11b      	bne.n	8005cc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f06f 0204 	mvn.w	r2, #4
 8005c94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2202      	movs	r2, #2
 8005c9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	699b      	ldr	r3, [r3, #24]
 8005ca2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d003      	beq.n	8005cb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 f98b 	bl	8005fc6 <HAL_TIM_IC_CaptureCallback>
 8005cb0:	e005      	b.n	8005cbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 f97d 	bl	8005fb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 f98e 	bl	8005fda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	f003 0308 	and.w	r3, r3, #8
 8005cce:	2b08      	cmp	r3, #8
 8005cd0:	d122      	bne.n	8005d18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	f003 0308 	and.w	r3, r3, #8
 8005cdc:	2b08      	cmp	r3, #8
 8005cde:	d11b      	bne.n	8005d18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f06f 0208 	mvn.w	r2, #8
 8005ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2204      	movs	r2, #4
 8005cee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	69db      	ldr	r3, [r3, #28]
 8005cf6:	f003 0303 	and.w	r3, r3, #3
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d003      	beq.n	8005d06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 f961 	bl	8005fc6 <HAL_TIM_IC_CaptureCallback>
 8005d04:	e005      	b.n	8005d12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 f953 	bl	8005fb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 f964 	bl	8005fda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	f003 0310 	and.w	r3, r3, #16
 8005d22:	2b10      	cmp	r3, #16
 8005d24:	d122      	bne.n	8005d6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	f003 0310 	and.w	r3, r3, #16
 8005d30:	2b10      	cmp	r3, #16
 8005d32:	d11b      	bne.n	8005d6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f06f 0210 	mvn.w	r2, #16
 8005d3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2208      	movs	r2, #8
 8005d42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	69db      	ldr	r3, [r3, #28]
 8005d4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d003      	beq.n	8005d5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 f937 	bl	8005fc6 <HAL_TIM_IC_CaptureCallback>
 8005d58:	e005      	b.n	8005d66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 f929 	bl	8005fb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f000 f93a 	bl	8005fda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	f003 0301 	and.w	r3, r3, #1
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d10e      	bne.n	8005d98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	f003 0301 	and.w	r3, r3, #1
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d107      	bne.n	8005d98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f06f 0201 	mvn.w	r2, #1
 8005d90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f7fc fdf6 	bl	8002984 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005da2:	2b80      	cmp	r3, #128	; 0x80
 8005da4:	d10e      	bne.n	8005dc4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005db0:	2b80      	cmp	r3, #128	; 0x80
 8005db2:	d107      	bne.n	8005dc4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 fae0 	bl	8006384 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dce:	2b40      	cmp	r3, #64	; 0x40
 8005dd0:	d10e      	bne.n	8005df0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ddc:	2b40      	cmp	r3, #64	; 0x40
 8005dde:	d107      	bne.n	8005df0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005de8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 f8ff 	bl	8005fee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	f003 0320 	and.w	r3, r3, #32
 8005dfa:	2b20      	cmp	r3, #32
 8005dfc:	d10e      	bne.n	8005e1c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	f003 0320 	and.w	r3, r3, #32
 8005e08:	2b20      	cmp	r3, #32
 8005e0a:	d107      	bne.n	8005e1c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f06f 0220 	mvn.w	r2, #32
 8005e14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 faaa 	bl	8006370 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e1c:	bf00      	nop
 8005e1e:	3708      	adds	r7, #8
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d101      	bne.n	8005e40 <HAL_TIM_ConfigClockSource+0x1c>
 8005e3c:	2302      	movs	r3, #2
 8005e3e:	e0b4      	b.n	8005faa <HAL_TIM_ConfigClockSource+0x186>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2202      	movs	r2, #2
 8005e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	68ba      	ldr	r2, [r7, #8]
 8005e6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e78:	d03e      	beq.n	8005ef8 <HAL_TIM_ConfigClockSource+0xd4>
 8005e7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e7e:	f200 8087 	bhi.w	8005f90 <HAL_TIM_ConfigClockSource+0x16c>
 8005e82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e86:	f000 8086 	beq.w	8005f96 <HAL_TIM_ConfigClockSource+0x172>
 8005e8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e8e:	d87f      	bhi.n	8005f90 <HAL_TIM_ConfigClockSource+0x16c>
 8005e90:	2b70      	cmp	r3, #112	; 0x70
 8005e92:	d01a      	beq.n	8005eca <HAL_TIM_ConfigClockSource+0xa6>
 8005e94:	2b70      	cmp	r3, #112	; 0x70
 8005e96:	d87b      	bhi.n	8005f90 <HAL_TIM_ConfigClockSource+0x16c>
 8005e98:	2b60      	cmp	r3, #96	; 0x60
 8005e9a:	d050      	beq.n	8005f3e <HAL_TIM_ConfigClockSource+0x11a>
 8005e9c:	2b60      	cmp	r3, #96	; 0x60
 8005e9e:	d877      	bhi.n	8005f90 <HAL_TIM_ConfigClockSource+0x16c>
 8005ea0:	2b50      	cmp	r3, #80	; 0x50
 8005ea2:	d03c      	beq.n	8005f1e <HAL_TIM_ConfigClockSource+0xfa>
 8005ea4:	2b50      	cmp	r3, #80	; 0x50
 8005ea6:	d873      	bhi.n	8005f90 <HAL_TIM_ConfigClockSource+0x16c>
 8005ea8:	2b40      	cmp	r3, #64	; 0x40
 8005eaa:	d058      	beq.n	8005f5e <HAL_TIM_ConfigClockSource+0x13a>
 8005eac:	2b40      	cmp	r3, #64	; 0x40
 8005eae:	d86f      	bhi.n	8005f90 <HAL_TIM_ConfigClockSource+0x16c>
 8005eb0:	2b30      	cmp	r3, #48	; 0x30
 8005eb2:	d064      	beq.n	8005f7e <HAL_TIM_ConfigClockSource+0x15a>
 8005eb4:	2b30      	cmp	r3, #48	; 0x30
 8005eb6:	d86b      	bhi.n	8005f90 <HAL_TIM_ConfigClockSource+0x16c>
 8005eb8:	2b20      	cmp	r3, #32
 8005eba:	d060      	beq.n	8005f7e <HAL_TIM_ConfigClockSource+0x15a>
 8005ebc:	2b20      	cmp	r3, #32
 8005ebe:	d867      	bhi.n	8005f90 <HAL_TIM_ConfigClockSource+0x16c>
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d05c      	beq.n	8005f7e <HAL_TIM_ConfigClockSource+0x15a>
 8005ec4:	2b10      	cmp	r3, #16
 8005ec6:	d05a      	beq.n	8005f7e <HAL_TIM_ConfigClockSource+0x15a>
 8005ec8:	e062      	b.n	8005f90 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6818      	ldr	r0, [r3, #0]
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	6899      	ldr	r1, [r3, #8]
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	685a      	ldr	r2, [r3, #4]
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	f000 f9ad 	bl	8006238 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005eec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	609a      	str	r2, [r3, #8]
      break;
 8005ef6:	e04f      	b.n	8005f98 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6818      	ldr	r0, [r3, #0]
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	6899      	ldr	r1, [r3, #8]
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	685a      	ldr	r2, [r3, #4]
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	f000 f996 	bl	8006238 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	689a      	ldr	r2, [r3, #8]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f1a:	609a      	str	r2, [r3, #8]
      break;
 8005f1c:	e03c      	b.n	8005f98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6818      	ldr	r0, [r3, #0]
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	6859      	ldr	r1, [r3, #4]
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	f000 f90a 	bl	8006144 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2150      	movs	r1, #80	; 0x50
 8005f36:	4618      	mov	r0, r3
 8005f38:	f000 f963 	bl	8006202 <TIM_ITRx_SetConfig>
      break;
 8005f3c:	e02c      	b.n	8005f98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6818      	ldr	r0, [r3, #0]
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	6859      	ldr	r1, [r3, #4]
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	f000 f929 	bl	80061a2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2160      	movs	r1, #96	; 0x60
 8005f56:	4618      	mov	r0, r3
 8005f58:	f000 f953 	bl	8006202 <TIM_ITRx_SetConfig>
      break;
 8005f5c:	e01c      	b.n	8005f98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6818      	ldr	r0, [r3, #0]
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	6859      	ldr	r1, [r3, #4]
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	f000 f8ea 	bl	8006144 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	2140      	movs	r1, #64	; 0x40
 8005f76:	4618      	mov	r0, r3
 8005f78:	f000 f943 	bl	8006202 <TIM_ITRx_SetConfig>
      break;
 8005f7c:	e00c      	b.n	8005f98 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4619      	mov	r1, r3
 8005f88:	4610      	mov	r0, r2
 8005f8a:	f000 f93a 	bl	8006202 <TIM_ITRx_SetConfig>
      break;
 8005f8e:	e003      	b.n	8005f98 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	73fb      	strb	r3, [r7, #15]
      break;
 8005f94:	e000      	b.n	8005f98 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005f96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3710      	adds	r7, #16
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}

08005fb2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fb2:	b480      	push	{r7}
 8005fb4:	b083      	sub	sp, #12
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fba:	bf00      	nop
 8005fbc:	370c      	adds	r7, #12
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr

08005fc6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005fc6:	b480      	push	{r7}
 8005fc8:	b083      	sub	sp, #12
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005fce:	bf00      	nop
 8005fd0:	370c      	adds	r7, #12
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr

08005fda <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005fda:	b480      	push	{r7}
 8005fdc:	b083      	sub	sp, #12
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005fe2:	bf00      	nop
 8005fe4:	370c      	adds	r7, #12
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr

08005fee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fee:	b480      	push	{r7}
 8005ff0:	b083      	sub	sp, #12
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ff6:	bf00      	nop
 8005ff8:	370c      	adds	r7, #12
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
	...

08006004 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a40      	ldr	r2, [pc, #256]	; (8006118 <TIM_Base_SetConfig+0x114>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d013      	beq.n	8006044 <TIM_Base_SetConfig+0x40>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006022:	d00f      	beq.n	8006044 <TIM_Base_SetConfig+0x40>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4a3d      	ldr	r2, [pc, #244]	; (800611c <TIM_Base_SetConfig+0x118>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d00b      	beq.n	8006044 <TIM_Base_SetConfig+0x40>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4a3c      	ldr	r2, [pc, #240]	; (8006120 <TIM_Base_SetConfig+0x11c>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d007      	beq.n	8006044 <TIM_Base_SetConfig+0x40>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	4a3b      	ldr	r2, [pc, #236]	; (8006124 <TIM_Base_SetConfig+0x120>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d003      	beq.n	8006044 <TIM_Base_SetConfig+0x40>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4a3a      	ldr	r2, [pc, #232]	; (8006128 <TIM_Base_SetConfig+0x124>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d108      	bne.n	8006056 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800604a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	68fa      	ldr	r2, [r7, #12]
 8006052:	4313      	orrs	r3, r2
 8006054:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a2f      	ldr	r2, [pc, #188]	; (8006118 <TIM_Base_SetConfig+0x114>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d02b      	beq.n	80060b6 <TIM_Base_SetConfig+0xb2>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006064:	d027      	beq.n	80060b6 <TIM_Base_SetConfig+0xb2>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a2c      	ldr	r2, [pc, #176]	; (800611c <TIM_Base_SetConfig+0x118>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d023      	beq.n	80060b6 <TIM_Base_SetConfig+0xb2>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a2b      	ldr	r2, [pc, #172]	; (8006120 <TIM_Base_SetConfig+0x11c>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d01f      	beq.n	80060b6 <TIM_Base_SetConfig+0xb2>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4a2a      	ldr	r2, [pc, #168]	; (8006124 <TIM_Base_SetConfig+0x120>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d01b      	beq.n	80060b6 <TIM_Base_SetConfig+0xb2>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a29      	ldr	r2, [pc, #164]	; (8006128 <TIM_Base_SetConfig+0x124>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d017      	beq.n	80060b6 <TIM_Base_SetConfig+0xb2>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a28      	ldr	r2, [pc, #160]	; (800612c <TIM_Base_SetConfig+0x128>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d013      	beq.n	80060b6 <TIM_Base_SetConfig+0xb2>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a27      	ldr	r2, [pc, #156]	; (8006130 <TIM_Base_SetConfig+0x12c>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d00f      	beq.n	80060b6 <TIM_Base_SetConfig+0xb2>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a26      	ldr	r2, [pc, #152]	; (8006134 <TIM_Base_SetConfig+0x130>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d00b      	beq.n	80060b6 <TIM_Base_SetConfig+0xb2>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a25      	ldr	r2, [pc, #148]	; (8006138 <TIM_Base_SetConfig+0x134>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d007      	beq.n	80060b6 <TIM_Base_SetConfig+0xb2>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a24      	ldr	r2, [pc, #144]	; (800613c <TIM_Base_SetConfig+0x138>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d003      	beq.n	80060b6 <TIM_Base_SetConfig+0xb2>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a23      	ldr	r2, [pc, #140]	; (8006140 <TIM_Base_SetConfig+0x13c>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d108      	bne.n	80060c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	689a      	ldr	r2, [r3, #8]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a0a      	ldr	r2, [pc, #40]	; (8006118 <TIM_Base_SetConfig+0x114>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d003      	beq.n	80060fc <TIM_Base_SetConfig+0xf8>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a0c      	ldr	r2, [pc, #48]	; (8006128 <TIM_Base_SetConfig+0x124>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d103      	bne.n	8006104 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	691a      	ldr	r2, [r3, #16]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	615a      	str	r2, [r3, #20]
}
 800610a:	bf00      	nop
 800610c:	3714      	adds	r7, #20
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr
 8006116:	bf00      	nop
 8006118:	40010000 	.word	0x40010000
 800611c:	40000400 	.word	0x40000400
 8006120:	40000800 	.word	0x40000800
 8006124:	40000c00 	.word	0x40000c00
 8006128:	40010400 	.word	0x40010400
 800612c:	40014000 	.word	0x40014000
 8006130:	40014400 	.word	0x40014400
 8006134:	40014800 	.word	0x40014800
 8006138:	40001800 	.word	0x40001800
 800613c:	40001c00 	.word	0x40001c00
 8006140:	40002000 	.word	0x40002000

08006144 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006144:	b480      	push	{r7}
 8006146:	b087      	sub	sp, #28
 8006148:	af00      	add	r7, sp, #0
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6a1b      	ldr	r3, [r3, #32]
 8006154:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	6a1b      	ldr	r3, [r3, #32]
 800615a:	f023 0201 	bic.w	r2, r3, #1
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	699b      	ldr	r3, [r3, #24]
 8006166:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800616e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	011b      	lsls	r3, r3, #4
 8006174:	693a      	ldr	r2, [r7, #16]
 8006176:	4313      	orrs	r3, r2
 8006178:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	f023 030a 	bic.w	r3, r3, #10
 8006180:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006182:	697a      	ldr	r2, [r7, #20]
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	4313      	orrs	r3, r2
 8006188:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	693a      	ldr	r2, [r7, #16]
 800618e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	697a      	ldr	r2, [r7, #20]
 8006194:	621a      	str	r2, [r3, #32]
}
 8006196:	bf00      	nop
 8006198:	371c      	adds	r7, #28
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr

080061a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061a2:	b480      	push	{r7}
 80061a4:	b087      	sub	sp, #28
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	60f8      	str	r0, [r7, #12]
 80061aa:	60b9      	str	r1, [r7, #8]
 80061ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6a1b      	ldr	r3, [r3, #32]
 80061b2:	f023 0210 	bic.w	r2, r3, #16
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	699b      	ldr	r3, [r3, #24]
 80061be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6a1b      	ldr	r3, [r3, #32]
 80061c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	031b      	lsls	r3, r3, #12
 80061d2:	697a      	ldr	r2, [r7, #20]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80061de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	011b      	lsls	r3, r3, #4
 80061e4:	693a      	ldr	r2, [r7, #16]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	697a      	ldr	r2, [r7, #20]
 80061ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	693a      	ldr	r2, [r7, #16]
 80061f4:	621a      	str	r2, [r3, #32]
}
 80061f6:	bf00      	nop
 80061f8:	371c      	adds	r7, #28
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr

08006202 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006202:	b480      	push	{r7}
 8006204:	b085      	sub	sp, #20
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
 800620a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006218:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800621a:	683a      	ldr	r2, [r7, #0]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	4313      	orrs	r3, r2
 8006220:	f043 0307 	orr.w	r3, r3, #7
 8006224:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	609a      	str	r2, [r3, #8]
}
 800622c:	bf00      	nop
 800622e:	3714      	adds	r7, #20
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006238:	b480      	push	{r7}
 800623a:	b087      	sub	sp, #28
 800623c:	af00      	add	r7, sp, #0
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	607a      	str	r2, [r7, #4]
 8006244:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006252:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	021a      	lsls	r2, r3, #8
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	431a      	orrs	r2, r3
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	4313      	orrs	r3, r2
 8006260:	697a      	ldr	r2, [r7, #20]
 8006262:	4313      	orrs	r3, r2
 8006264:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	697a      	ldr	r2, [r7, #20]
 800626a:	609a      	str	r2, [r3, #8]
}
 800626c:	bf00      	nop
 800626e:	371c      	adds	r7, #28
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006278:	b480      	push	{r7}
 800627a:	b085      	sub	sp, #20
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006288:	2b01      	cmp	r3, #1
 800628a:	d101      	bne.n	8006290 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800628c:	2302      	movs	r3, #2
 800628e:	e05a      	b.n	8006346 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2202      	movs	r2, #2
 800629c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	4313      	orrs	r3, r2
 80062c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a21      	ldr	r2, [pc, #132]	; (8006354 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d022      	beq.n	800631a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062dc:	d01d      	beq.n	800631a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a1d      	ldr	r2, [pc, #116]	; (8006358 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d018      	beq.n	800631a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a1b      	ldr	r2, [pc, #108]	; (800635c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d013      	beq.n	800631a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a1a      	ldr	r2, [pc, #104]	; (8006360 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d00e      	beq.n	800631a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a18      	ldr	r2, [pc, #96]	; (8006364 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d009      	beq.n	800631a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a17      	ldr	r2, [pc, #92]	; (8006368 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d004      	beq.n	800631a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a15      	ldr	r2, [pc, #84]	; (800636c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d10c      	bne.n	8006334 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006320:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	68ba      	ldr	r2, [r7, #8]
 8006328:	4313      	orrs	r3, r2
 800632a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68ba      	ldr	r2, [r7, #8]
 8006332:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3714      	adds	r7, #20
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr
 8006352:	bf00      	nop
 8006354:	40010000 	.word	0x40010000
 8006358:	40000400 	.word	0x40000400
 800635c:	40000800 	.word	0x40000800
 8006360:	40000c00 	.word	0x40000c00
 8006364:	40010400 	.word	0x40010400
 8006368:	40014000 	.word	0x40014000
 800636c:	40001800 	.word	0x40001800

08006370 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006378:	bf00      	nop
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800638c:	bf00      	nop
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8006398:	b480      	push	{r7}
 800639a:	b085      	sub	sp, #20
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80063a2:	2300      	movs	r3, #0
 80063a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063b0:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	4b20      	ldr	r3, [pc, #128]	; (8006438 <FSMC_NORSRAM_Init+0xa0>)
 80063b6:	4013      	ands	r3, r2
 80063b8:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80063c2:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 80063c8:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 80063ce:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 80063d4:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 80063da:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 80063e0:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 80063e6:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 80063ec:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 80063f2:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 80063f8:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 80063fe:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8006404:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	4313      	orrs	r3, r2
 800640a:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	2b08      	cmp	r3, #8
 8006412:	d103      	bne.n	800641c <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800641a:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	68f9      	ldr	r1, [r7, #12]
 8006424:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006428:	2300      	movs	r3, #0
}
 800642a:	4618      	mov	r0, r3
 800642c:	3714      	adds	r7, #20
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr
 8006436:	bf00      	nop
 8006438:	fff00080 	.word	0xfff00080

0800643c <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800643c:	b480      	push	{r7}
 800643e:	b087      	sub	sp, #28
 8006440:	af00      	add	r7, sp, #0
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8006448:	2300      	movs	r3, #0
 800644a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	1c5a      	adds	r2, r3, #1
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006456:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800645e:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800646a:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8006472:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800647a:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	691b      	ldr	r3, [r3, #16]
 8006480:	3b01      	subs	r3, #1
 8006482:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006484:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	695b      	ldr	r3, [r3, #20]
 800648a:	3b02      	subs	r3, #2
 800648c:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800648e:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006494:	4313      	orrs	r3, r2
 8006496:	697a      	ldr	r2, [r7, #20]
 8006498:	4313      	orrs	r3, r2
 800649a:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	1c5a      	adds	r2, r3, #1
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6979      	ldr	r1, [r7, #20]
 80064a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	371c      	adds	r7, #28
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr
	...

080064b8 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b087      	sub	sp, #28
 80064bc:	af00      	add	r7, sp, #0
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	60b9      	str	r1, [r7, #8]
 80064c2:	607a      	str	r2, [r7, #4]
 80064c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80064c6:	2300      	movs	r3, #0
 80064c8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064d0:	d122      	bne.n	8006518 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064da:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 80064dc:	697a      	ldr	r2, [r7, #20]
 80064de:	4b15      	ldr	r3, [pc, #84]	; (8006534 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 80064e0:	4013      	ands	r3, r2
 80064e2:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80064ee:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 80064f6:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 80064fe:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006504:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006506:	697a      	ldr	r2, [r7, #20]
 8006508:	4313      	orrs	r3, r2
 800650a:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	6979      	ldr	r1, [r7, #20]
 8006512:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006516:	e005      	b.n	8006524 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8006520:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8006524:	2300      	movs	r3, #0
}
 8006526:	4618      	mov	r0, r3
 8006528:	371c      	adds	r7, #28
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop
 8006534:	cff00000 	.word	0xcff00000

08006538 <__libc_init_array>:
 8006538:	b570      	push	{r4, r5, r6, lr}
 800653a:	4d0d      	ldr	r5, [pc, #52]	; (8006570 <__libc_init_array+0x38>)
 800653c:	4c0d      	ldr	r4, [pc, #52]	; (8006574 <__libc_init_array+0x3c>)
 800653e:	1b64      	subs	r4, r4, r5
 8006540:	10a4      	asrs	r4, r4, #2
 8006542:	2600      	movs	r6, #0
 8006544:	42a6      	cmp	r6, r4
 8006546:	d109      	bne.n	800655c <__libc_init_array+0x24>
 8006548:	4d0b      	ldr	r5, [pc, #44]	; (8006578 <__libc_init_array+0x40>)
 800654a:	4c0c      	ldr	r4, [pc, #48]	; (800657c <__libc_init_array+0x44>)
 800654c:	f000 f820 	bl	8006590 <_init>
 8006550:	1b64      	subs	r4, r4, r5
 8006552:	10a4      	asrs	r4, r4, #2
 8006554:	2600      	movs	r6, #0
 8006556:	42a6      	cmp	r6, r4
 8006558:	d105      	bne.n	8006566 <__libc_init_array+0x2e>
 800655a:	bd70      	pop	{r4, r5, r6, pc}
 800655c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006560:	4798      	blx	r3
 8006562:	3601      	adds	r6, #1
 8006564:	e7ee      	b.n	8006544 <__libc_init_array+0xc>
 8006566:	f855 3b04 	ldr.w	r3, [r5], #4
 800656a:	4798      	blx	r3
 800656c:	3601      	adds	r6, #1
 800656e:	e7f2      	b.n	8006556 <__libc_init_array+0x1e>
 8006570:	080095e8 	.word	0x080095e8
 8006574:	080095e8 	.word	0x080095e8
 8006578:	080095e8 	.word	0x080095e8
 800657c:	080095ec 	.word	0x080095ec

08006580 <memset>:
 8006580:	4402      	add	r2, r0
 8006582:	4603      	mov	r3, r0
 8006584:	4293      	cmp	r3, r2
 8006586:	d100      	bne.n	800658a <memset+0xa>
 8006588:	4770      	bx	lr
 800658a:	f803 1b01 	strb.w	r1, [r3], #1
 800658e:	e7f9      	b.n	8006584 <memset+0x4>

08006590 <_init>:
 8006590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006592:	bf00      	nop
 8006594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006596:	bc08      	pop	{r3}
 8006598:	469e      	mov	lr, r3
 800659a:	4770      	bx	lr

0800659c <_fini>:
 800659c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800659e:	bf00      	nop
 80065a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065a2:	bc08      	pop	{r3}
 80065a4:	469e      	mov	lr, r3
 80065a6:	4770      	bx	lr
